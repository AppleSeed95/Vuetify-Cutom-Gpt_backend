Data from https://vuetifyjs.com/en/introduction/why-vuetify/#what-is-vuetify3f:














Why Vuetify? ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
What is Vuetify?
Getting started
Why Vuetify?
It's free
Flexible components
Tooling
Community
Professional and Enterprise support
Active development
Feature Guides
Sponsors
Support
#
Introduction
Learn more about what Vuetify is, how to create an application from scratch, browse API references, sample code, tutorials, and more.
Skip the tedious work and dive straight into designing beautiful UIs. Start your next project with Vuetify Snips!
ads via vuetify
#
What is Vuetify?
Since its initial release in 2014, 
Vue.js
 has grown to be among the most popular JavaScript frameworks in the world. One of the reasons for this popularity is the wide use of 
components
 which enable developers to create small modules to be used and re-used throughout an application. Vuetify is a collection of pre-made components paired with powerful features such 
dynamic themes
, 
global defaults
, 
application layouts
, and more. Its goal is to provide developers with all of the necessary tools to build rich and engaging user experiences.
Why you should use it
Features at a glance
#
Getting started
Watch a free video on Getting Started with Vuetify
The fastest way to try Vuetify is in the browser at 
Vuetify Play
. For a complete list of installation options please navigate to the 
Installation page
.
#
Why Vuetify?
Vuetify is a powerful Vue Component Framework built from the ground up to be easy to learn and rewarding to master. Our collection of UI components maintain a consistent style throughout your application with enough customization options to meet any use-case.
#
It‚Äôs free
Vuetify is an Open Source project available for free under the 
MIT licensed
. Additionally, Vuetify‚Äôs source code is available on GitHub, allowing developers to modify and contribute to its development if they choose to do so.
#
Flexible components
Every component in Vuetify is handcrafted under the guise of Google‚Äôs 
Material Design specification
 and comes with hundreds of customization options that fit any style or design; even if it‚Äôs not Material. Write Vue templates that are as concise or verbose as you want using exclusively or in combination, 
props
, 
slots
, and 
components
.
#
Tooling
Vuetify has a large ecosystem of supporting tools that enrich the development experience that range from project creation to design UI kits.
üé® 
Figma UI Component Kit
‚ö° 
First-party Vite support
üèóÔ∏è 
Pre-configured Vue 3 applications for TypeScript and JavaScript
‚å®Ô∏è Intellisense & autocomplete support for 
VSCode
 and 
JetBrains
 products
üñºÔ∏è 
Wireframe examples
#
Community
When you develop with Vuetify, you are never alone. Stuck on a problem? Take advantage of our massive 
Discord community
 and collaborate with other Vuetify developers in one of our public help channels. Need a more personalized support solution? Vuetify offers 
Enterprise support
 with options tailored to individuals and businesses. Check out some other ways to 
Sponsor Vuetify development
.
#
Professional and Enterprise support
Vuetify offers an array of support services designed to help you get the most out of your application. Let our experience team provide you with the tools that you need to succeed with:
‚ÜóÔ∏è Vuetify version upgrades
üìä Performance review & analysis
‚õëÔ∏è SLA & direct support
For more information regarding our professional support options, navigate to our 
Enterprise support
 page.
#
Active development
Vuetify has been in active development since 2016 and is constantly responding to community issues and reports at breakneck speed, allowing you to get your hands on bug fixes and enhancements more often. Our overall release cadence typically follows:
üî® PATCH 
(Weekly)
‚õèÔ∏è MINOR 
(Quarterly)
‚öíÔ∏è MAJOR 
(Bi-yearly to Yearly)
In addition, after every MAJOR release, the previous version is still maintained with 18 months of 
Long-term support
.
So what are you waiting for? Head over to the 
Installation
 page and start building your next great idea today.
#
Feature Guides
Learn more about the inner workings of Vuetify and become a skilled 
v-developer
 with our detailed feature guides. Each guide is designed to teach you how to get the most out of your development experience with information on: how to build responsive pages using 
Layouts
, how to customize the style of your application with 
SASS variables
, and how to slim down your application‚Äôs package size via 
Treeshaking
, and more.
Feature
Skill level
Time to read
Bidirectionality (LTR/RTL)
Beginner
1 min
Global configuration
Beginner
1 min
Icon Fonts
Beginner
15 min
Layouts
Beginner
5 min
Theme
Beginner
15 min
Accessibility (a11y)
Intermediate
10 min
Aliasing
Intermediate
5 min
Application layout
Intermediate
15 min
Dates
Intermediate
10 min
Display & Platform
Intermediate
15 min
Internationalization (i18n)
Intermediate
5 min
SASS variables
Intermediate
10 min
Blueprints
Advanced
10 min
Treeshaking
Advanced
15 min
Can‚Äôt find what you‚Äôre looking for? Help us improve! Please reach out to 
hello@vuetifyjs.com
 with your feedback or join us in the Vuetify 
Discord community
.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Installation
Getting started
Roadmap
Introduction
For Enterprise
Introduction
Vuetify ‚Äî A Vue Component Framework
Long-term support
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/introduction/long-term-support/:














Long-term support ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Sponsors
Support
#
Long-term support
Vuetify provides long-term support to the last major release for 18 months for critical bugs and security vulnerabilities.
Need help with Vuetify? Join our Discord server for access to a subscriber only help channel!
ads via vuetify
We understand that many projects that utilize Vuetify have development cycles that prevent upgrading to the latest version. In order to provide developers and businesses peace of mind when adopting Vuetify, we commit to at minimum of 
18 months
 for critical bugs and security vulnerabilities for the latest 
minor
 of the last 
major
 release.
Version
Status
Initial Release Date
LTS Start Date
LTS End Date
Vuetify 3.x
üöÄ Active Development
November 1st, 2022
N/A
N/A
Vuetify 2.7
üõ†Ô∏è Maintenance
July 23rd, 2019
July 5th, 2023
January 23rd, 2025
Vuetify 1.5
üì¶ Archived
February 5th, 2019
July 31st, 2019
July 31st, 2020
Have questions? Reach out to us in our 
Discord community
.
TIP:
Sign-up for Enterprise support and get a personalized service plan from the team behind Vuetify. 
Book a consultation
 for your business today!
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
For Enterprise
Introduction
Contributing
Getting started
Meet the team
About
Why Vuetify?
Roadmap
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/introduction/roadmap/#section-2024-component-roadmap:














The Vuetify roadmap ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
2024 Component Roadmap
Released
v3.7 (Odyssey)
v3.6 (Nebula)
v3.5 (Polaris)
v3.4 (Blackguard)
v3.3 (Icarus)
v3.2 (Orion)
v3.1 (Valkyrie)
Vuetify Labs
v3.0 (Titan)
v2.7 (Nirvana)
v2.6 (Horizon)
v2.5 (Avalon)
v2.4 (Endurance)
v2.3 (Liberator)
v2.2 (Tigris)
v2.1 (Vanguard)
v2.0 (Arcadia)
Contributing
Archived
v1.5
v1.4
v1.3
v1.2
v1.1
v1.0
Alpha release
Sponsors
Support
#
The Vuetify roadmap
Vuetify is always under development. We are constantly working towards improving the existing codebase, adding new features, and expanding the ecosystem with developer tooling that makes building applications even easier.
Connect with developers across the globe in the official Vuetify Reddit.
ads via vuetify
#
2024 Component Roadmap
The following is a list of all planned components for the year 2024.
Component
Entering Labs
Production Release
v3.8 (Andromeda)
Q4 2024
v-number-input
*
v-snackbar-queue
*
v-time-picker
*
v-treeview
*
v-stepper-vertical
*
v4.0 (Revisionist)
TBA
v-date-input
*
v-calendar
*
v-time-input
September 2024
Future - v4.1+
TBD
v-file-upload
September 2024
v-date-time-picker
Q1 2025
v-date-range-picker
Q1 2025
v-video
TBD
v-feature-discovery
TBD
* Already in Labs
#
Released
The following are the already released 
minor
 and 
major
 version updates. Find more information on the 
latest releases
 on GitHub.
#
v3.7 (Odyssey)
Released:
 August 2024
Target Release:
 Q3 2024
Notes:
 
v3.7 Release
Overview:
 Added more validation options and proper submenu support.
Milestone Issues:
 
Github Issues
#
v3.6 (Nebula)
Released:
 April 2024
Hero:
 
Banner
Target Release:
 Q2 2024
Notes:
 
v3.6 Release
Overview:
 Introduced 5 new components to the main framework from Labs: 
v-fab
v-empty-state
v-sparkline
v-speed-dial
v-confirm-edit
Multiple bug fixes and improvements.
Milestone Issues:
 
Github Issues
#
v3.5 (Polaris)
Released:
 January 2024
Hero:
 
Banner
Target Release:
 Q1 2024
Notes:
 
v3.5 Release
Overview:
 A maintenance cycle post v3.4 that will focuses on bug fixes and general improvements.
Milestone Issues:
 
Github Issues
#
v3.4 (Blackguard)
Released:
 November 2023
Hero:
 
Banner
Target Release:
 Q3 2023
Notes:
 
v3.4 Release
Overview:
 Introduced 8 updated components to the main framework from Labs: 
v-bottom-sheet
v-data-iterator
v-data-table
v-date-picker
v-infinite-scroll
v-opt-input
v-skeleton-loader
v-stepper
.
Milestone Issues:
 
Github Issues
#
v3.3 (Icarus)
Released:
 May 2023
Target Release:
 Q2 2023
Notes:
 
v3.3 Release
Overview:
 A small intermediary minor that will release alongside Vue v3.3 and include a few small features.
Milestone Issues:
 
Github Issues
#
v3.2 (Orion)
Released:
 April 2023
Target Release:
 Q2 2023
Notes:
 
v3.2 Release
Overview:
 New and ported components from v2. Exposed defaults system for public use, allowing you to hook into the global default configuration with your components. More information in the 
release notes
Milestone Issues:
 
Github Issues
#
v3.1 (Valkyrie)
Released:
 January 2023
Target Release:
 Q1 2023
Notes:
 
v3.1 Release
Overview:
 First post v3 release that will focus on porting remaining missing v2 components and general bug fixing.
Milestone Issues:
 
Github Issues
#
Vuetify Labs
Released:
 January 2023
Target Release:
 Q4 2022
Overview:
 Labs is a new package that includes large components from Vuetify 2 in a pre-production state. More information is located on the 
Labs introduction
 page.
#
v3.0 (Titan)
Released:
 October 2022
Notes:
 
v3.0 Release
Overview:
Rebuilt for Vue 3 using the new 
composition api
Global properties that allow you to make large overarching changes to your app
Improved SASS variable customization and extensibility with 
Built-In Modules
New 
Vue CLI presets
 for generating pre-built starting projects
First party 
Vite
 support for lightning fast development
Greatly improved TypeScript support
Better framework coverage with E2E testing using Cypress
#
v2.7 (Nirvana)
Released:
 July 2023
Target Release:
 Q2 2023
Notes:
 
v2.7 Release
LTS Support until:
 January 2025
Milestone Issues:
 
Github Issues
#
v2.6 (Horizon)
Released
: November 2021
Notes
: 
v2.6 Release
Overview
: New 
v-otp-input
 component, calendar event and scrolling improvements, minor features for other components.
#
v2.5 (Avalon)
Released:
 May 2021
Notes:
 
v2.5 Release
Overview:
 The v2.5 release adds a multitude of new functionality to 
v-data-table
 and 
v-text-field
, as well as bug fixes for the 
click-outside
 directive, 
v-carousel
 component, and more.
Objectives:
Expand functionality of 
v-data-table
Quality of life improvements
General bug fixes
#
v2.4 (Endurance)
Released:
 December 2020
Notes:
 
v2.4 Release
Overview:
 The v2.4 release provides bug fixes, features and quality of life changes for Vuetify as we prepare for v3 Alpha. This release contains some new features that we are building into Vuetify 3 right now such as new slots for 
v-carousel
 and support for globally defined icon components.
Objectives:
Add 
plain
 property for 
v-btn
Add new locales 
Azerbaijani
Central Kurdish
Add typography css classes 
text-pre
 and 
text-pre-wrap
Add new slots for 
v-carousel
Support for a globally defined icon components
Improved accessibility in the 
v-menu
 component
#
v2.3 (Liberator)
Released:
 June 2020
Notes:
 
v2.3 Release
Overview:
 The v2.3 release was dropped earlier in the year to focus on v3 development but was revived when COVID-19 showed up. This release is packed full of quality of life changes, new features such as the 
v-virtual-scroll
 component, responsive typography css classes.
Objectives:
Add new css helper classes for 
text-decoration
, 
border-radius
, 
typography
, and more.
Add new 
v-virtual-scroll
 component
Improve 
Date Pickers, Data Tables, and Calendars
Harden framework in preparation for 
LTS version
#
v2.2 (Tigris)
Released:
 January 2020
Notes:
 
v2.2 Release
Overview:
 The introduction of Vuetify Presets. Will include the entire Material Design Studies collection and be 
user customizable
. Will streamline the process for altering the default styles for the framework. Thousands of SASS variables will be added and a lookup tree for finding those variables will put into the documentation. For more information on Google‚Äôs studies, please 
navigate here
.
Objectives:
Add 
thousands
 of new SASS variables
Create a new Vuetify Service for bootstrapping pre-configured framework options; 
Preset
Create presets for the official 
Material Design Studies
Add new features and improve code styling of 
v-badge
Add new features and improve code styling of 
v-expansion-panels
new 
v-theme-provider
 component
#
v2.1 (Vanguard)
Released:
 October 2019
Notes:
 
v2.1 Release
Overview:
 A maintenance cycle to work on bugs from the v2.0 release. This includes performance issues, incorrect or missing a11y, RTL, regressions and general fixes. This will allow the team to catch up on the backlog of tasks that have accumulated over the 8 month development cycle of the previous release.
Objectives:
Add new components 
v-lazy
v-skeleton-loader
Add new directives 
v-intersect
v-mutate
Add lazy loading support for 
v-img
#
v2.0 (Arcadia)
Released:
 July 2019
Notes:
 
v2.0 Release
Overview:
 A complete rebuild of the framework core. Improving the layout and theme systems, platform integration, accessibility, RTL and performance. Update all components to the 
Material Design 2
 specification. Add additional functionality to multiple existing components and setup v1.5 for 
Long-term Support
.
Objectives:
Add new components 
v-app-bar
v-banner
v-chip-group
v-color-picker
v-file-input
v-list-item-group
v-overlay
v-simple-table
v-slide-group
Complete update to Material Design 2
Convert from Javascript to Typescript
Convert from Stylus to Sass
Convert from avoriaz to vue-test-utils
#
Contributing
If you‚Äôd like to help contribute to Vuetify, head to our 
Contribution guide
 for more information on how to get started.
#
Archived
The following releases are old and unsupported 
minor
 and 
major
 versions:
#
v1.5
Released:
 February 2019
Support until:
 August 1st, 2020
Notes:
 
v1.5 Release
Overview:
 Added new component, 
v-calendar
. Improved functionality of 
v-sparkline
 with new 
bar
 and 
fill
 properties. Improved 
v-treeview
 and prepared for LTS. Navigate to the 
Long-term Support Page
 for more information on LTS.
v1.5 reached end of life on 
July 31st, 2020
 and is no longer actively maintained. It is recommended to update to the latest stable version of Vuetify using our 
Upgrade guide
.
#
v1.4
Released:
 December 2018
Notes:
 
v1.4 Release
Overview:
 Added new components 
v-sparkline
 and abstracted 
v-toolbar
‚Äôs functionality into multiple components for easier maintainability and testing. Rebuilt the entire documentation to make it easier for contributors and maintenance from the team.
#
v1.3
Released:
 December 2018
Notes:
 
v1.3 Release
Overview:
 Added new components, 
v-treeview
, 
v-timeline
 and 
v-item-group
. Unified the interfaces used in 
v-tabs
 and 
v-carousel
. Improved the 
vuetify-loader
 to support effortless application tree-shaking of Vuetify components.
#
v1.2
Released:
 October 2018
Notes:
 
v1.2 Release
Overview:
 Added new components, 
v-img
, 
v-rating
 and 
v-hover
. Improved theme propagation system and expanded the functionality of the colors used with components such as HEX and RGBA. Als added numerous new locales.
#
v1.1
Released:
 July 2018
Notes:
 
v1.1 Release
Overview:
 A complete rebuild of all form functionality including all inputs and selection controls. Abstracted features from components like 
v-select
 into new implementations, 
v-autocomplete
, 
v-combobox
 for more scoped functionality and easier testing. This release also marked the first official support of 
RTL
 languages.
#
v1.0
Released:
 February 2018
Notes:
 
v1.0 Release
Overview:
 The official v1.0 release party. After 18 months and Kael‚Äôs sanity, we rolled into our first 
MAJOR
 release. This included a multitude of brand new components, features and functionality.
#
Alpha release
Released:
 December 2016
Overview:
 Vuetify is officially announced to the public. The framework initially shipped with 40 components and came in at a whopping 46kb.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Long-term support
Introduction
For Enterprise
Introduction
Browser support
Getting started
Long-term support
Sponsors and backers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/introduction/sponsors-and-backers/#preamble:














Sponsoring Vuetify ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Preamble
One-time donations
Recurring Pledges
Current Project Sponsors
Special
Diamond
Platinum
Gold
Service
Affiliate
Bottom line
Sponsors
Support
#
Sponsor Vuetify development
Vuetify is an 
MIT licensed
 open-source project that‚Äôs completely free to use.
Arrange content seamlessly using Multi-Column Layouts for a clean, organized structure.
ads via vuetify
#
Preamble
Vuetify is actively maintained by 
John
 and 
Heather
 Leider as a full-time job. In addition, a Core team of open-source contributors help maintain and guide the future of the framework. The time and dedication it takes to maintain the core framework and ecosystem packages is substantial. You can support Vuetify‚Äôs open-source project by becoming a backer through one of the following methods:
#
One-time donations
One-time donations can be made through 
PayPal
.
#
Recurring Pledges
Recurring pledges come with 
exclusive
 perks such as priority GitHub issues, application auditing, and having your logo placed on this website.
Become a backer or sponsor via GitHub
 or 
Patreon
 (goes directly to Vuetify to support John and Heather).
Become a backer or sponsor through Open Collective
 (a transparent fund for supporting the development and maintenance of Vuetify).
#
Current Project Sponsors
We thank all of our project sponsors for their continued support of Vuetify. If you have any questions about sponsorship, please reach out to 
sponsor@vuetifyjs.com
 for more information.
#
Special
Thank you to our special sponsor. Your support is greatly appreciated.
Become a sponsor
#
Diamond
These sponsors have pledged $1,500 per month.
#
Platinum
These sponsors have pledged $500 per month.
#
Gold
These sponsors have pledged $250 per month.
#
Service
These sponsors help keep the lights on by providing free services to the Vuetify project.
#
Affiliate
We work with these companies to provide you with the best possible experience.
#
Bottom line
If you run a business and are using Vuetify in a revenue-generating product, it makes business sense to sponsor Vuetify development: 
it ensures the project that your product relies on stays healthy and actively maintained
. Vuetify is a 
full-time
 job for John and Heather; your sponsorship and contributions help support them.
If you have any questions, please reach out to 
sponsor@vuetifyjs.com
.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
For Enterprise
Introduction
Roadmap
Introduction
Meet the team
About
Roadmap
For Enterprise
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/introduction/enterprise-support/#for-enterprise:














Direct support from Vuetify ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
For Enterprise
Single developer support
Consulting Services
Sponsors
Support
#
Direct support from Vuetify
Let the experts at Vuetify help you get the most out of your application with a customized support plan from the team behind the framework.
#
For Enterprise
Vuetify offers a variety of support options to meet any need.
Galaxy Tier 
$250
/mo
Subscribe
ü•â For 2 developers
üí¨
Chat support
Get a private Discord channel where your developers can ask questions directly to the Core Team.
üïí
Same day response
Questions are answered within 24 hours, Monday through Friday.
Cosmic Tier 
$500
/mo
Subscribe
ü•à For up to 5 developers
üí´
Everything in Galaxy Tier, plus:
üéØ
Priority bug fixes
Get priority on reported or identified Vuetify GitHub issues.
Multiverse Tier 
$1,000
/mo
Subscribe
ü•á For up to 15 developers
üí´
Everything in Cosmic Tier, plus:
üìÖ
Monthly strategy session
A monthly strategy session to discuss your project and how to best utilize Vuetify.
#
Single developer support
Get direct access to the Vuetify team through our private 
Discord server
. Ask questions, get help, and chat with the team.
Wood Tier 
$2.99
/mo
Start free trial
Get access to sponsor only chat and help channels.
üí™
#subscribers
Say hello and talk to other developers in this private subscriber only channel.
üöë
#subscriber-help
Get priority help in our Subscriber only help channel.
Gold Tier 
$19.99
/mo
Subscribe
Get access to our daily Vuetify development updates.
ü™µ
Every channel in Wood Tier plus:
üéâ
üî•dev-stream
Inside peek of current Vuetify development.
Planetary Tier 
$99.99
/mo
Subscribe
Get help directly from the Core team with a private help channel.
ü•á
Every channel in Gold Tier plus:
üî®
Private Help Channel
Get a private help channel where you can ask questions to the Core Team.
 *View more detailed information on our 
 Discord Welcome Page 
#
Consulting Services
Take your software projects to the next level with the expert consulting services of our trusted partner, 
Epicmax
. With extensive experience in delivering Vuetify-based projects, Epicmax provides specialized guidance to ensure your project is efficient, innovative, and tailored to your unique requirements.
Development and Support
Epicmax provides dedicated development and ongoing support for Vuetify-based projects, ensuring your product is built and maintained with best practices for maximum performance and stability.
Learn more
Frontend Code Audit
Identify and resolve potential issues in your frontend code with a thorough audit from Epicmax's seasoned experts. Their in-depth analysis ensures that your codebase is optimized, clean, and ready for scale. Use code "VUETIFY" to get 20% off.
Request Audit
Flexible Consulting
Whether you need short-term assistance or a long-term strategy, Epicmax provides flexible consulting services that adapt to your specific project needs and timeline.
Learn more
Team Augmentation
Epicmax can boost your team with skilled developers who integrate seamlessly into your workflow. Whether for short-term projects or ongoing support, they help you scale and meet your goals efficiently.
Learn more
 *View more detailed information on 
 Epicmax.co 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Long-term support
Introduction
Security disclosure
About
Meet the team
About
Sponsors and backers
Installation
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/getting-started/installation/#installation:














Get started with Vuetify 3 ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Installation
Using Vite
Using Nuxt 3
Manual setup
vuetify-nuxt-module
Using Laravel Mix
Using CDN
Using Vitepress
Existing projects
SSR caveats
Exposed exports
JS / TS
SASS
Nightly Builds
Questions
Sponsors
Support
#
Get started with Vuetify 3
Get started with Vuetify, the world‚Äôs most popular Vue.js framework for building feature rich, blazing fast applications.
Watch a free video on Getting Started with Vuetify
#
Installation
Vuetify has support for multiple different installation paths with the most common scaffolding tool being 
create-vuetify
For more information regarding supported package managers, please visit their official websites:
pnpm
yarn
npm
bun
#
Using Vite
To get started with Vuetify 3, simply paste the following code into your terminal:
pnpm
yarn
npm
bun
pnpm
 create vuetify

This command prompts you with a few options before generating your scaffolded Vue / Vuetify 3 project.
success Installed 
"create-vuetify@x.x.x"
 with binaries:
    - create-vuetify

? Project name: ‚ùØ vuetify-project // the folder to generate your application
? Use TypeScript?: ‚ùØ No / Yes
? Would you like to 
install
 dependencies with yarn, npm, or pnpm?:
  ‚ùØ 
yarn

    
npm

    
pnpm

    bun
    none

After making your selections, 
create-vuetify
 will generate the structure for your new application.
Once the scaffold is complete, start the vite development server by running the following commands:
cd
 vuetify-project

pnpm
 dev

ads via vuetify
#
Using Nuxt 3
Nuxt
 is an open-source framework that has helpful features to quickly get you started with developing a full-stack Vue app, such as file-based routing, SSR and component auto-imports.
#
Manual setup
Nuxt is powered by Nitro and can be used with Vite or Webpack 5 bundlers, so the steps to get Vuetify working in Nuxt 3 are quite similar to 
the manual steps described below
.
Start off creating a nuxt app by executing the following commands:
pnpm
yarn
npm
bun
pnpx nuxi@latest init 
<
project-name
>


cd
 
<
project-name
>


# Create a .npmrc file with shamefully-hoist=true


pnpm
 
install


and then install the required Vuetify modules as dependencies:
pnpm
yarn
npm
bun
pnpm
 i 
-D
 vuetify vite-plugin-vuetify

pnpm
 i @mdi/font

Next, integrate the following entries into your 
nuxt.config.ts
 file:
 nuxt.config.ts
import
 vuetify
,
 
{
 transformAssetUrls 
}
 
from
 
'vite-plugin-vuetify'


export
 
default
 
defineNuxtConfig
(
{

  
//...

  build
:
 
{

    transpile
:
 
[
'vuetify'
]
,

  
}
,

  modules
:
 
[

    
(
_options
,
 nuxt
)
 
=>
 
{

      nuxt
.
hooks
.
hook
(
'vite:extendConfig'
,
 
(
config
)
 
=>
 
{

        
// @ts-expect-error

        config
.
plugins
.
push
(
vuetify
(
{
 autoImport
:
 
true
 
}
)
)

      
}
)

    
}
,

    
//...

  
]
,

  vite
:
 
{

    vue
:
 
{

      template
:
 
{

        transformAssetUrls
,

      
}
,

    
}
,

  
}
,


}
)


Nuxt allows you to change its Vite config by using its built-in hook 
vite:extendConfig
. In its callback function, add the Vuetify plugin to the array of Vite plugins. To resolve relative asset URLs that are passed to Vuetify components such as 
VImg
 (e.g. 
~/assets/img/some.png
) the 
transformAssetUrls
 function needs to be added in the 
vite
 entry .
In the next step, initialize Vuetify and add it to the main Vue app instance. This can be done in the 
plugins
 folder as any plugin that is placed in this folder will be automatically loaded by Nuxt at startup.
 ~/plugins/vuetify.ts
// import this after install `@mdi/font` package


import
 
'@mdi/font/css/materialdesignicons.css'



import
 
'vuetify/styles'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
defineNuxtPlugin
(
(
app
)
 
=>
 
{

  
const
 vuetify 
=
 
createVuetify
(
{

    
// ... your configuration

  
}
)

  app
.
vueApp
.
use
(
vuetify
)


}
)


Finally, add Vuetify‚Äôs root 
VApp
 component either in 
~/app.vue
 or 
~/layouts/default.vue
, for example:
 app.vue
<
template
>

  
<
NuxtLayout
>

    
<
v-app
>

      
<
NuxtPage
 
/>

    
</
v-app
>

  
</
NuxtLayout
>


</
template
>


or
 ~/layouts/default.vue
<
template
>

  
<
v-app
>

    
<!-- .... -->

  
</
v-app
>


</
template
>


You should now have access to all Vuetify components and tools in the Nuxt app.
#
vuetify-nuxt-module
Alternatively, you can use the 
vuetify-nuxt-module
 (works only with Vite). The module is strongly opinionated and has a built-in default configuration out of the box. You can use it without any configuration, and it will work for most use cases.
Check the 
documentation
 for more information on how to use it.
#
Using Laravel Mix
import
 
{
 createApp 
}
 
from
 
'vue'



// Vuetify


import
 
'@mdi/font/css/materialdesignicons.css'


import
 
'vuetify/styles'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
*
 
as
 components 
from
 
'vuetify/components'


import
 
*
 
as
 directives 
from
 
'vuetify/directives'



// Components


import
 App 
from
 
'./App.vue'



const
 vuetify 
=
 
createVuetify
(
{

  components
,

  directives

}
)



createApp
(
App
)
.
use
(
vuetify
)
.
mount
(
'#app'
)


To import the fonts you need to add to webpack.mix.js:
mix
.
copy
(
'node_modules/@mdi/font/fonts/'
,
 
'dist/fonts/'
)


#
Using CDN
We recommend using the latest version of Vuetify 3 from 
jsdelivr
. All components and styles are included.
https://cdn.jsdelivr.net/npm/vuetify@3.7.3/dist/vuetify.min.css
https://cdn.jsdelivr.net/npm/vuetify@3.7.3/dist/vuetify.min.js
const
 
{
 createApp 
}
 
=
 Vue

const
 
{
 createVuetify 
}
 
=
 Vuetify


const
 vuetify 
=
 
createVuetify
(
)



const
 app 
=
 
createApp
(
)

app
.
use
(
vuetify
)
.
mount
(
'#app'
)


#
Using Vitepress
You can use Vuetify‚Äôs components in your Vitepress static site.
After initializing your Vitepress project, add Vuetify to your dependencies
pnpm
yarn
npm
bun
pnpm
 i vuetify

Then, in your 
.vitepress/theme/index.ts
import
 DefaultTheme 
from
 
'vitepress/theme'


import
 
'vuetify/styles'


import
 
*
 
as
 components 
from
 
'vuetify/components'


import
 
*
 
as
 directives 
from
 
'vuetify/directives'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



const
 vuetify 
=
 
createVuetify
(
{
 components
,
 directives 
}
)



export
 
default
 
{

  
...
DefaultTheme
,

  
enhanceApp
(
{
 app 
}
)
 
{

    app
.
use
(
vuetify
)

  
}
,


}


#
Existing projects
Follow these steps if for example you are adding Vuetify to an existing project, or simply do not want to use a scaffolding tool.
pnpm
yarn
npm
bun
pnpm
 i vuetify

TIP:
If you are upgrading from an earlier version of Vuetify, make sure to check out our 
Upgrade Guide
In the file where you create the Vue application, add the following code
import
 
{
 createApp 
}
 
from
 
'vue'



// Vuetify


import
 
'vuetify/styles'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
*
 
as
 components 
from
 
'vuetify/components'


import
 
*
 
as
 directives 
from
 
'vuetify/directives'



// Components


import
 App 
from
 
'./App.vue'



const
 vuetify 
=
 
createVuetify
(
{

  components
,

  directives
,


}
)



createApp
(
App
)
.
use
(
vuetify
)
.
mount
(
'#app'
)


This will include all components and directives regardless of whether or not you are using them. If you instead only want to include used components, have a look at the 
Vite
 or 
Webpack
 plugins, depending on your setup. The plugins also makes it possible to customize SCSS variables.
Lastly, do not forget to install 
icons
.
#
SSR caveats
Vue 3 has no way to automatically detect if SSR is used ‚Äî so nuxt, gridsome, and other SSR frameworks must manually set the 
ssr
 option to 
true
 in order to properly render the application.
 src/plugins/vuetify.js
import
 
'@mdi/font/css/materialdesignicons.css'


import
 
'vuetify/styles'



const
 vuetify 
=
 
createVuetify
(
{

  
ssr
:
 
true
,


}
)


#
Exposed exports
The following export paths exist for the Vuetify framework:
#
JS / TS
Name
Description
vuetify
Main entry point. Contains 
createVuetify()
 and public composables.
vuetify/styles
Precompiled global CSS (reset, utilities, etc.), no component styles. Will be redirected to SASS if 
styles.configFile
 is set in vite or webpack.
vuetify/components
All components. Not recommended as it will include all components during development, slowing down your build.
vuetify/components/<name>
Individual components. Grouped by top-level name, for example VListItem, VListGroup, and VListItemTitle are all in 
vuetify/components/VList
.
vuetify/directives
All directives.
vuetify/directives/<name>
Individual directives.
vuetify/blueprints/<name>
Preset collections of prop defaults.
vuetify/locale
Translations for strings in vuetify components. Each language is a named export.
vuetify/locale/adapters/<name>
Adapters to retrieve translations from other libraries such as vue-i18n.
vuetify/iconsets/<name>
Icon presets, see 
Icon Fonts
#
SASS
See 
SASS Variables
 for more information.
Name
Description
vuetify
Global CSS (reset, utilities, etc.), no component styles. Equivalent to 
vuetify/styles
 in JS.
vuetify/settings
All SASS variables, including component variables.
vuetify/tools
Mixins and functions.
#
Nightly Builds
The three development branches (
master
, 
dev
, and 
next
) are automatically published to NPM at 1200 UTC under the 
@vuetify/nightly
 namespace. They may be outdated or buggy and are therefore not officially supported and are only supplied for testing purposes. These builds can be installed with a 
package alias
.
Branch name
Purpose
package.json entry
Changelog
master
Bug fixes
"vuetify": "npm:@vuetify/nightly@latest"
Changelog
dev
New features
"vuetify": "npm:@vuetify/nightly@dev"
Changelog
next
Breaking changes
"vuetify": "npm:@vuetify/nightly@next"
Changelog
 
"devDependencies": {

-
  "vuetify": "^3.3.0"

+
  "vuetify": "npm:@vuetify/nightly@3.3.0-master.2023-05-21"

 
}

#
Questions
Have a question that belongs here? Tell us in our 
Discord Community
 or create a request on our 
Issue Generator
.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Contributing
Getting started
Roadmap
Introduction
Release notes
Getting started
For Enterprise
Frequently asked questions
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/getting-started/frequently-asked-questions/#questions:














Frequently asked questions ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Questions
Sponsors
Support
#
Frequently asked questions
Stuck on a particular problem? Check some of these common gotchas before creating a ticket. If you still cannot find what you are looking for, you can submit an 
issue
 on GitHub or ask in our 
community
.
Get priority help when you Subscribe on Discord
#
Questions
The following responses are a collection of common questions asked by the Vuetify community.
What is Vuetify?
Vuetify is a Vue.js framework that helps to create beautiful and responsive user interfaces. It includes a wide variety of customizable and reusable components for building modern applications.
Does Vuetify provide support?
Vuetify is a free to use Open Source project released under the 
MIT
 license. There are multiple ways to receive support for Vuetify:
Join our 
Discord Community
 - (Free/Paid)
Ask a question on 
GitHub Discussions
 - (Free)
Get 
Direct Support
 from Vuetify - (Paid)
What is the difference between Vuetify and Vue?
Vuetify is a framework that is built on top of Vue.js. It is a collection of components that can be used to build applications. Vue.js is a JavaScript framework that is used to build user interfaces.
What versions of Vue.js are compatible with Vuetify?
Vuetify is compatible with Vue.js 3.0.0 and above.
Can I use Vuetify with other CSS frameworks?
Yes, you can use Vuetify with other CSS frameworks, but it is typically not recommended. If you are integrating Vuetify into an existing application that is using another CSS framework, you may want to disable the default color and utility generation. See the 
SASS Variables
 page for more information.
Can I customize the styling of Vuetify components?
Yes, you can customize the styling of Vuetify components using the 
Global configuration
. Vuetify also provides 
SASS variables
 that can be overridden to change the look and feel of the components.
Where can I get help with Vuetify?
If you need help with an issue, please use one of our help channels:
Vuetify Enterprise Support
Discord Community
GitHub Discussions
Can I contribute to Vuetify?
Yes, we welcome all contributions. Please see our 
contributing guide
 for more information.
Can I use Vuetify with server-side rendering?
Yes, Vuetify supports server-side rendering. Set the 
ssr
 property to 
true
 in your 
vuetify
 configuration object.
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
ssr
:
 
true
,


}
)


Is there still support for IE11 in Vuetify 3?
No. If you need to support IE11, use 
Vuetify 2
.
Is there support for Nuxt 3?
Yes, Vuetify 3 is compatible with Nuxt 3 but does not currently have a community Nuxt module.
What is Vuetify Labs?
Vuetify Labs is a collection of components that are still in development. They are not considered stable and may change at any time. They are not included in the default Vuetify installation and must be imported individually. See the 
Labs
 page for more information.
Does Vuetify have Nightly Builds?
Yes, Vuetify has nightly builds. See the 
Nightly Builds
 page for more information.
I found a bug, what should I do?
Please create a new 
issue
 with our Issue Generator. Please make sure to check for existing issues before creating a new one.
Why did Vuetify 3 change 
value
 to 
model-value
?
The 
value
 prop was changed in Vue 3 to support a new 
v-model
 syntax. See the official Vue docs for more information on 
Component v-model
.
Is Vuetify 3 compatible with 
@vue/compat
?
Not directly, you have to set 
configureCompat({ MODE: 3 })
 globally and 
MODE: 2
 in each of your components that you want to run in compatibility mode. There will still be some incorrect warnings that can be ignored with the 
-ATTR_FALSE_VALUE
 filter in devtools.
Why don‚Äôt elements exist in the DOM yet in 
onMounted()
?
 (
#19736
)
Some vuetify components are asynchronous, so there is no guarantee that their children will be mounted immediately. Either wait for the target element itself to be mounted with 
v-on:vue:mounted
 or use 
onMounted
 in a separate component that only has plain elements between the 
<template>
 and your target element.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Why Vuetify?
Introduction
Contributing
Getting started
Installation
Getting started
Installation
Wireframes
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/getting-started/wireframes/#examples:














Wireframes ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Examples
Sponsors
Support
#
Wireframes
The Vuetify 
layout system
 makes it easy to rapidly scaffold an application‚Äôs UI regions with little effort.
Arrange content seamlessly using Multi-Column Layouts for a clean, organized structure.
ads via vuetify
#
Examples
These templates are known as 
wireframes
 and are designed to provide a consistent approach to layouts, layering, and shadows. They are a starting point that is meant to be modified to meet the specific needs of your application.
Baseline
Extended toolbar
System bar
Inbox
Constrained
Side navigation
Three column
Discord
Steam
Additional information on how these templates are structured is located on the 
Application page
.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Application layout
Features
Theme
Features
Blueprints
Features
Frequently asked questions
Unit testing
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/getting-started/unit-testing/#usage:














Unit testing ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
Using Vite
Setup Vitest
Sponsors
Support
#
Unit Testing
Add regression protection by adding unit tests to your Vuetify application
Streamline your forms with Vuetify Snips Input Snippets, designed to organize inputs with style and ease for a clean, user-friendly experience.
ads via vuetify
#
Usage
Unit tests are an important (and sometimes ignored) part of developing applications. They help us secure our processes and workflows, ensuring that the most critical parts of our projects are protected from accidental mistakes or oversights in our development.
Because of this, Vue has its own testing utility called 
vue-test-utils
. It provides useful features for interacting with Vue components and works with many popular test runners.
#
Using Vite
Vite
 is a fast, opinionated frontend build tool that serves your code via native ES Module imports during dev and bundles it with Rollup for production. It provides a great developer experience and is the recommended build tool for Vuetify applications.
First, update your 
vite.config.js
 file to inline the 
vuetify
 dependency:
 vite.config.js
import
 
{
 defineConfig 
}
 
from
 
'vite'



export
 
default
 
defineConfig
(
{

  
test
:
 
{

    
globals
:
 
true
,

    
environment
:
 
'jsdom'
,

    
server
:
 
{

      
deps
:
 
{

        
inline
:
 
[
'vuetify'
]
,

      
}
,

    
}
,

  
}
,


}
)


#
Setup Vitest
Vitest
 is a popular test runner that provides a great developer experience. It is fast, easy to use, and provides useful features like snapshot testing. To get started, install the following dependencies:
pnpm
yarn
npm
bun
pnpm
 
add
 @vue/test-utils vitest resize-observer-polyfill --save-dev

Once installed, create a new folder at the root of your application named 
tests/spec
 and add a new file named 
HelloWorld.spec.js
. The following example shows how to setup a basic unit test for a Vuetify component:
 tests/spec/HelloWorld.spec.js
import
 
{
 mount 
}
 
from
 
'@vue/test-utils'


import
 
{
 expect
,
 test 
}
 
from
 
'vitest'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
*
 
as
 components 
from
 
'vuetify/components'


import
 
*
 
as
 directives 
from
 
'vuetify/directives'


import
 HelloWorld 
from
 
'../../src/components/HelloWorld.vue'



const
 vuetify 
=
 
createVuetify
(
{

  components
,

  directives
,


}
)


global
.
ResizeObserver 
=
 
require
(
'resize-observer-polyfill'
)



test
(
'displays message'
,
 
(
)
 
=>
 
{

  
const
 wrapper 
=
 
mount
(
{

    
template
:
 
'<v-layout><hello-world></hello-world></v-layout>'

  
}
,
 
{

    
props
:
 
{
}
,

    
global
:
 
{

      
components
:
 
{

        HelloWorld
,

      
}
,

      
plugins
:
 
[
vuetify
]
,

    
}

  
}
)


  
// Assert the rendered text of the component

  
expect
(
wrapper
.
text
(
)
)
.
toContain
(
'Components'
)


}
)


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Frequently asked questions
Getting started
Contributing
Getting started
Text fields
Components
Wireframes
Browser support
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/getting-started/browser-support/#browsers:














Browser support ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Browsers
Sponsors
Support
#
Browser support
Vuetify 3 is a next generation framework that takes advantage of the latest web technology features and requires an evergreen browser to function.
Ideal for developers seeking a simple startup page. Dive into the digital currency world with our $1, 2-page Crypto Theme.

ads via vuetify
#
Browsers
This is not an exhaustive list of compatible browsers, but the main targeted ones. If you are using a browser that is not listed here, it is not officially supported.
Browser
Status
Chromium 90 (Chrome, Edge)
‚úÖ Supported 
*
Firefox 88
‚úÖ Supported 
*
Safari 15
‚úÖ Supported
Edge <79
‚õî Not supported
Internet Explorer
‚õî Not supported
Other Browsers
‚ùì Not officially supported
* All browsers on iOS use WebKit and have the same support as Safari
This table is updated with minor releases of Vuetify. Chrome, Firefox, and Safari will be supported at least two years back from the Vuetify x.x.0 release date. Current start date is May 2021.
Support for older browsers may be possible with additional 
polyfills
 and 
PostCSS plugins
, but has not been tested and is not guaranteed. If you need to support older browsers we recommend using Vuetify 2.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Installation
Getting started
Why Vuetify?
Introduction
SASS variables
Features
Unit testing
Upgrade guide
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/getting-started/upgrade-guide/#setup:














Upgrade guide ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Setup
Features
Layout
Theme
SASS variables
Styles and utility classes
Components
General changes
Input components
v-alert
v-badge
v-banner
v-btn/v-btn-toggle
v-checkbox/v-radio/v-switch
v-date-picker
v-form
v-list
v-menu/v-tooltip
v-navigation-drawer
v-rating
v-select/v-combobox/v-autocomplete
v-simple-table
v-stepper (vertical)
v-data-table
v-slider/v-range-slider
v-tabs
v-img
v-snackbar
v-expansion-panel
v-card
v-sparkline
Directives
v-intersect
Sponsors
Support
#
Upgrade Guide
This page contains a detailed list of breaking changes and the steps required to upgrade your application to Vuetify 3.0
Many of the changes on this page can be applied automatically using 
eslint-plugin-vuetify
Before upgrading, make sure to consult the Official 
Vue 3 Migration Guide
Not all Vuetify 2 components are currently available in Vuetify 3; These components will be released as their development is completed via 
Vuetify Labs
.
calendar
overflow-btn
time-picker
#
Setup
Vuetify
 class removed, use 
createVuetify
 function
 2.x
Vue
.
use
(
Vuetify
)



const
 vuetify 
=
 
new
 
Vuetify
(
{
 
...
 
}
)



const
 app 
=
 
new
 
Vue
(
{

  vuetify
,

  
...


}
)


 3.0
const
 app 
=
 
createApp
(
)



const
 vuetify 
=
 
createVuetify
(
{
 
...
 
}
)


app
.
use
(
vuetify
)


import ... from 'vuetify'
 is now a-la-carte, import 
'vuetify/dist/vuetify.js'
 instead to get the complete bundle (not recommended).
'vuetify/lib'
 should no longer be used, change to 
'vuetify'
 / 
'vuetify/components'
 / 
'vuetify/directives'
 as appropriate.
Only component styles are included, global styles must be imported separately from 
'vuetify/styles'
.
vuetify-loader
 has been renamed to 
webpack-plugin-vuetify
, and we also have a new plugin for vite 
vite-plugin-vuetify
.
#
Features
#
Layout
Global styles previously included as 
.v-application p
 or 
.v-application ul
 are no longer included. If you need margin for 
p
, or padding-left for 
ul
 and 
ol
, set it manually in your root component‚Äôs 
<style>
 tag
stateless
, 
clipped
, 
clipped-right
 and 
app
 props have been removed from v-navigation-drawer, v-app-bar and v-system-bar. The position in the markup determines the appearance. Use the 
order="number"
 prop to influence it manually.
$vuetify.breakpoint
 has been renamed to 
$vuetify.display
 and extended with 
new properties
*Only
 properties have been removed, use 
xs
 instead of 
xsOnly
 etc.
#
Theme
Multiple themes are now supported, so 
light
 / 
dark
 props have been removed from components. Use 
v-theme-provider
 to set the theme for a specific component tree. 
Components that previously had a 
dark
 prop, such as v-app-bar, now accept 
theme="dark"
 prop
Theme colors set their foreground text color automatically, if you were using 
light
 / 
dark
 to get a different text color you probably don‚Äôt need it anymore.
The variant naming scheme has changed slightly, it is now a single word instead of two. For example, 
primary darken-1
 is now 
primary-darken-1
. 
To use variant namings as value for 
color
 props, the variant you intend to use needs to be enabled in the theme under 
theme.variations.colors
. e.g: 
colors: ['primary']
Color classes have been renamed: 
Backgrounds have a 
bg-
 prefix, for example 
.primary
 is now 
.bg-primary
.
Text colors have a 
text-
 prefix, for example 
.primary--text
 is now 
.text-primary
.
Variants are no longer a separate class, for example 
.primary--text.text--darken-1
 is now 
.text-primary-darken-1
.
The theme system now uses CSS variables internally, so 
customProperties
 is no longer required. 
If you were using 
customProperties
 in v2, the naming scheme has changed from 
--v-primary-base
 to 
--v-theme-primary
.
Custom properties are now also an rgb list instead of hex so 
rgb()
 or 
rgba()
 must be used to access them, for example 
color: rgb(var(--v-theme-primary))
 instead of 
color: var(--v-primary-base)
.
Theme colors in the theme config are now nested inside a 
colors
 property, e.g. 
const myTheme = { theme: { themes: { light: { colors: { primary: '#ccc' } } } } }
#
SASS variables
$headings
 was merged with 
$typography
: Access font-size of subtitle-2 with 
map.get($typography, 'subtitle-2', 'size')
If you imported variables from 
~vuetify/src/styles/settings/_variables
 in v2, you have to replace it with 
vuetify/settings
Component variables that previously lived in e.g. 
~/vuetify/src/components/VIcon/VIcon.sass
 can now be imported from 
vuetify/settings
 directly too.
$display-breakpoints
 no longer includes 
{breakpoint}-only
 variables (e.g. xs-only), use 
@media #{map.get(v.$display-breakpoints, 'xs')}
 instead.
The 
$transition
 map has been removed, replaced with individual 
$standard-easing
, 
$decelerated-easing
, 
$accelerated-easing
 variables.
$container-padding-x
 is now 16px instead of 12px as in v2. You can replace it with 
$spacer * 3
 to get to the previous look.
Too many component variables to list have been renamed or removed. There is no automated way to update these as the element structure has changed significantly, you will need to manually update these along with any custom styles.
#
Styles and utility classes
.hidden-{breakpoint}-only
 has been renamed to 
.hidden-{breakpoint}
.text-xs-{alignment}
 has been renamed to 
.text-{alignment}
 to reflect the fact that it applies to all breakpoints.
Typography classes have been renamed for consistency and are all prefixed with 
text-
, for example 
.display-4
 is now 
.text-h1
Transition easing classes have been removed.
An complete list of class changes will not be provided, please use 
eslint-plugin-vuetify
 to automatically fix them.
#
Components
#
General changes
value
 prop has been replaced by 
model-value
 on components that support 
v-model
 usage. (Vue 3 requires this change) 
Note that this does not apply to 
value
 used as a 
selection value
, for example 
v-btn
 within 
v-btn-toggle
.
@input
 event has been replaced by 
@update:model-value
 on components that support 
v-model
 usage. (Vue 3 requires this change)
left
 and 
right
 have been replaced by 
start
 and 
end
 respectively. This applies to utility classes too, for example 
.rounded-r
 is now 
.rounded-e
.
Size props 
small
 / 
medium
 / 
large
 etc. have been combined into a single 
size
 prop.
absolute
 and 
fixed
 props have been combined into a single 
position
 prop.
top
 / 
bottom
 / 
left
 / 
right
 props have been combined into a single 
location
 prop.
background-color
 prop has been renamed to 
bg-color
.
dense
 prop on components such as v-select, v-btn-toggle, v-alert, v-text-field, v-list and v-list-item has been changed to 
density
 prop with the variants 
default
, 
comfortable
, 
compact
Activator slots work slightly different. Replace 
#activator={ attrs, on }
 with 
#activator={ props }
, then remove 
v-on="on"
 and replace 
v-bind="attrs"
 with 
v-bind="props"
Some components have structural changes in their markup. Which means you may have to change how you query and assert them in tests. 
v-switch
 for example now uses an 
<input type="checkbox" />
 under the hood, which is why the 
aria-checked
 and 
aria-role="switch"
 attributes were removed.
#
Input components
Affix slots are consistent now: 
prepend
 and 
prepend-inner
 are the same.
append
 has been renamed to 
append-inner
.
append-outer
 has been renamed to 
append
.
Variant props 
filled
/
outlined
/
solo
 have been combined into a single 
variant
 prop. 
Allowed values are 
'underlined'
, 
'outlined'
, 
'filled'
, 
'solo'
, or 
'plain'
.
success
 and 
success-messages
 props have been removed.
validate-on-blur
 prop has been renamed to 
validate-on="blur"
.
#
v-alert
border
 prop values 
left
 and 
right
 have been renamed to 
start
 and 
end
.
colored-border
 prop has been renamed to 
border-color
.
dismissable
 prop has been renamed to 
closable
.
outlined
 and 
text
 props have been combined into a single 
variant
 prop. 
Allowed values are 
'elevated'
, 
'flat'
, 
'tonal'
, 
'outlined'
, 
'text'
, or 
'plain'
.
text
 prop has new purpose. It represents the text content of the alert, if default slot is not used.
#
v-badge
overlap
 has been removed and is now the default style, use 
floating
 to restore the v2 default.
Transition props 
mode
 and 
origin
 have been removed.
avatar
 prop is no longer needed and has been removed.
#
v-banner
The 
actions
 slot no longer provides a dismiss function.
shaped
 prop has been removed.
icon-color
 has been removed.
single-line
 has been replaced with 
lines="one"
.
color
 now applies to the icon and action text. Use 
bg-color
 to change the background color.
#
v-btn/v-btn-toggle
active-class
 prop has been renamed to 
selected-class
fab
 is no longer supported. If you just need a round button, use 
icon
 prop or apply a 
.rounded-circle
 class.
flat
 / 
outlined
 / 
text
 / 
plain
 props have been combined into a single 
variant
 prop.
depressed
 has been renamed to 
variant="flat"
retain-focus-on-click
 has been removed, buttons use 
:focus-visible
 instead.
v-btn-toggle
 needs 
mandatory="force"
 prop to achieve the same behaviour as 
mandatory
 prop in v2.
Disabled buttons use a faded variant of the specified 
color
 instead of grey (
#15147
) 
The 
$button-colored-disabled
 sass variable can be set to false to use grey instead.
#
v-checkbox/v-radio/v-switch
input-value
 prop has been renamed to 
model-value
. (Vue 3 requires this change)
on-icon
 and 
off-icon
 props have been renamed to 
true-icon
 and 
false-icon
.
on-value
 and 
off-value
 props have been renamed to 
true-value
 and 
false-value
.
v-checkbox
‚Äôs label slot should no longer contain a 
<label>
 as it is already wrapped with one
#
v-date-picker
Uses 
Date
 objects instead of strings. Some utility functions are included to help convert between the two, see 
dates
.
locale
, 
locale-first-day-of-year
, 
first-day-of-week
, 
day-format
, 
weekday-format
, 
month-format
, 
year-format
, 
header-date-format
, and 
title-date-format
 are now part of the date adapter and use the globally configured 
locale
 instead of being passed as props.
active-picker
 has been renamed to 
view-mode
.
picker-date
 has been replaced with separate 
month
 and 
year
 props.
range
 is not currently implemented, will be added as a separate component in the future.
#
v-form
validate()
 now returns a 
Promise<FormValidationResult>
 instead of a boolean. Await the promise then check 
result.valid
 to determine form state.
#
v-list
two-line
 and 
three-line
 props have been combined into a single 
lines
 prop with allowed values 
'two'
 or 
'three'
.
v-list-item-group
 has been removed, assign the item‚Äôs key to the 
value
 prop of each 
v-list-item
 and bind 
v-model:selected
 on the 
v-list
 to get the selected value.
v-list-item-icon
 and 
v-list-item-avatar
 have been removed, use 
v-list-item
 with 
icon
 or 
avatar
 props, or put an icon or avatar in the append or prepend slot.
v-list-item-content
 has been removed, lists use CSS grid for layout now instead.
v-list-group
 can now be nested arbitrarily deep, 
sub-group
 prop should be removed.
v-list-item
 
input-value
 prop has been replaced with 
active
.
v-list-item
 
inactive
 prop has been replaced with 
:active="false" :link="false"
.
v-subheader
 has been renamed to 
v-list-subheader
.
v-list-item
‚Äôs 
active
 scoped slot prop has been renamed to 
isActive
#
v-menu/v-tooltip
rounded
 prop has been removed. Apply a rounded css class to the menu content element instead. e.g. 
.rounded-te
internal-activator
 prop has been removed, use 
activator
 with a ref or unique selector instead.
absolute
, 
offset-y
 and 
offset-x
 props have been removed. Manual positioning is now done by passing a 
[x, y]
 array to the 
target
 prop.
nudge-*
 props have been removed. There is no direct replacement but 
offset
 can be used to achieve similar results.
Content is now destroyed after closing, use 
eager
 to keep it.
#
v-navigation-drawer
stateless
 prop has been removed, manually control state using 
model-value
 or 
v-model
 instead.
#
v-rating
color
 has been renamed to 
active-color
.
background-color
 has been renamed to 
color
.
#
v-select/v-combobox/v-autocomplete
v-model values not present in 
items
 will now be rendered instead of being ignored.
cache-items
 prop has been removed, caching should be handled externally.
item-text
 has been renamed to 
item-title
, and now looks up the 
title
 property on item objects by default. 
value
 is unchanged.
item-disabled
 has been removed, and 
disabled
, 
header
, 
divider
, and 
avatar
 properties are ignored on item objects. 
Additional props to pass to 
v-list-item
 can be specified with the 
item-props
 prop. 
item-props
 can be a function that takes the item object and returns an object of props, or set to boolean 
true
 to spread item objects directly as props.
The 
item
 object in slots is now an 
ListItem
 object, the original item object is available as 
item.raw
.
The 
item
 slot will no longer generate a 
v-list-item
 component automatically, instead a 
props
 object is supplied with the required event listeners and props:
  
<
template
 
#item
=
"
{ props }
"
>

    
<
v-list-item
 
v-bind
=
"
props
"
>
</
v-list-item
>

  
</
template
>


The 
chip
 slot should be used instead of 
selection
 if the 
chips
 prop is set, this will provide some default values to the chips automatically.
Non-
multiple
 combobox will now update its model as you type (like a text field) instead of only on blur.
#
v-simple-table
v-simple-table
 has been renamed to 
v-table
#
v-stepper (vertical)
v-stepper-step
 has been renamed to 
v-stepper-vertical-item
. Move content into the 
title
 slot.
v-stepper-content
 has been removed. Move content to the default slot of 
v-stepper-vertical-item
.
#
v-data-table
Headers objects: 
text
 property has been renamed to 
title
.
data-table-select
 and 
data-table-expand
 must be defined as 
key
 instead of 
value
.
class
 has been replaced with 
headerProps
.
cellClass
 has been replaced with 
cellProps
 and now accepts either a function or an object.
filter
 function requires 
search
 to be used in order for it to be triggered.
Tables requires 
search
 prop to trigger filtering. 
items
 array can be pre-filter with a computed.
Server side tables using 
server-items-length
 must be replaced with 
<v-data-table-server items-length />
.
Argument order for 
@click:*
 events is now consistently 
(event, data)
. 
onRowClick (item, data, event)
 should be changed to 
onRowClick (event, { item })
.
item-class
 and 
item-style
 have been combined into 
row-props
, and 
cell-props
 has been added.
sort-desc
 and 
group-desc
 have been combined into 
sort-by
 and 
group-by
. These properties now take an array of 
{ key: string, order: 'asc' | 'desc' }
 objects instead of strings.
current-items
 event has been renamed to 
update:current-items
.
custom-sort
 can now be done using the 
sort
 key in the headers object or by using the 
custom-key-sort
 prop.
#
v-slider/v-range-slider
ticks
 has been renamed to 
show-ticks
.
tick-labels
 has been renamed to 
ticks
.
vertical
 has been renamed to 
direction="vertical"
.
step
 default value is now 0 instead of 1.
#
v-tabs
v-tab-item
 has been removed, use 
v-window-item
#
v-img
contain
 has been removed and is now the default behaviour. Use 
cover
 to fill the entire container.
#
v-snackbar
action
 slot was renamed to 
actions
#
v-expansion-panel
v-expansion-panel-header
 has been renamed to 
v-expansion-panel-title
.
v-expansion-panel-content
 has been renamed to 
v-expansion-panel-text
.
v-expansion-panel
 now has 
text
 and 
title
 props that can be used instead of subcomponents.
#
v-card
v-card
 does not allow content to overflow or use higher 
z-index
 values to display on top of elements outside it. To disable this behavior, use 
<v-card style="overflow: initial; z-index: initial">
 (
#17593
, 
#17628
)
#
v-sparkline
value
 is now 
model-value
#
Directives
#
v-intersect
Handler argument order has changed from 
entries, observer, isIntersecting
 to 
isIntersecting, entries, observer
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Roadmap
Introduction
Long-term support
Introduction
For Enterprise
Introduction
Browser support
Release notes
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/getting-started/release-notes/:














Release notes ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Sponsors
Support
#
Release notes
The Vuetify team performs releases on a weekly basis.
ads via vuetify
Select Release Version
Select Release Version
v3.7.3
 ‚Äî 
üëç 
11
üéâ 
6
Published: 
Thursday, October 17, 2024
#
üîß Bug Fixes
nested:
 convert ids to string in duplicate warning (
2728a10
)
styles:
 explicitly import global functions (
2b22da1
)
v-tooltip:
 log error instead of throwing (
ae33530
), closes 
#20564
v-tooltip:
 match provides from new vnode (
6e9f2a1
), closes 
#20564
VDataTable:
 remove page clamp on initial render (
60bc70e
), closes 
#17966
 
#20185
#
üß™ Labs
VTreeview:
 allow multiple nodes to be loading (
488fc02
), closes 
#19390
 
#20404
VTreeview:
 search doesn‚Äôt work with return-object (
#20508
) (
1b3ed5a
)
Assets
Source code (zip)
Source code (tar.gz)
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Long-term support
Introduction
Contributing
Getting started
Roadmap
Introduction
Upgrade guide
Contributing
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/getting-started/contributing/#reporting-issues:














Contributing ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Reporting Issues
Local development
Setting up your environment
Vuetify
Playground.vue
Documentation
API Generator
Submitting Changes / Pull Requests
Choosing a base branch
Working with GitHub
Issue triage
For Docs - Language
Requesting new features
Commit guidelines
General Rules
Commit types
Sponsors
Support
#
Contributing
Vuetify is made possible by an amazing community that submits issues, creates pull requests, and provides invaluable feedback.
ads via vuetify
It is our job to enable you to create amazing applications. A lot of the time, you come across something that can be made better. Maybe you find a bug, or you have an idea for additional functionality. That‚Äôs great! It‚Äôs as easy as cloning the Vuetify repository to get started working in a development environment.
#
Reporting Issues
The issue list of this repo is exclusively for bug reports and feature requests. Non-conforming issues will be closed immediately. Before reporting an issue:
Search for similar 
issues
, it may have been answered already. 
If a similar issue already exists, you do not need to open another issue for this, if you want to help with it in any way, you can help by giving appropriate information in the already existing issue.
Try to reproduce with the 
latest
 version in 
Vuetify Play
 or a repository that can be cloned to produce the expected behavior.
Make sure that the reproduction is 
MINIMAL
 and 
CONCISE
These steps ensure that we have all the information necessary to quickly triage and resolve your issue. Once your reproduction is complete, submit a new issue using the 
Vuetify Issue Creator
. Using this issue creator is required, otherwise the issue will be closed automatically.
When writing an issue please provide as much detail as possible. Note that ‚Äúreproduction steps‚Äù should be a series of actions another developer should take after clicking your reproduction link, not a recollection of how you discovered the bug.
Issues that are convoluted and lacking a proper reproduction may be closed by a member of the 
Core Team
. For additional questions regarding reporting issues and creating reproductions, join the official Vuetify Discord 
community
.
TIP:
When you create a reproduction, exclude all 
elements, properties, and data variables
 that are not needed for the reproduction. This helps drastically reduce the time it takes to triage the issue and ultimately resolve it.
In the next section you will learn step-by-step how to set up your local environment and how to configure Vuetify for development.
#
Local development
The Vuetify repository is a 
lerna
 monorepo that connects the vuetify library, docs, api generator, and reduces the friction of working with multiple projects at once. The following guide is designed to get you up and running in no time.
#
Setting up your environment
Required software:
Git
 >v2.20
Node.js
 LTS
pnpm
Some of our dependencies use 
node-gyp
 to build themselves. You don‚Äôt need to install node-gyp itself but may require additional tools, especially on windows. See the node-gyp documentation for more details.
Once you have everything installed, clone the repository:
# Using HTTPS


git
 clone https://github.com/vuetifyjs/vuetify.git


# Using SSH


git
 clone git@github.com:vuetifyjs/vuetify.git

Which remote URL should I use?
Then install dependencies and perform an initial build to link all the packages together:
# Navigate to the vuetify folder


cd
 vuetify


# Install all project dependencies


pnpm
 i


# Build the packages


pnpm
 build vuetify

pnpm
 build api

The build process compiles all the Vuetify packages for development and may take a while (grab some ‚òï). Once the packages are built, you can start developing.
#
Vuetify
The Vuetify library is located in 
packages/vuetify
. In 
packages/vuetify/dev
 you will find a 
Playground.vue
 file; running 
pnpm dev
 from the project root will start a dev server on 
localhost:8090
 with this file loaded. Test your changes in the Playground.vue file you copied, then paste its contents into your pull request when you‚Äôre ready.
You can also test Vuetify in your own project using 
pnpm link
:
Navigate to 
packages/vuetify
Run 
pnpm link --global
Navigate to your project‚Äôs directory
Run 
pnpm link --global vuetify
If your project is using vuetify-loader you will have to run 
pnpm build:lib
 in the vuetify package to see changes, otherwise you can use 
pnpm watch
 for incremental builds.
#
Playground.vue
The 
Playground
 file is a cleanroom used for Vuetify development and is the recommended way to iterate on changes within the framework.
<
template
>

  
<
v-app
>

    
<
v-container
>

      
<!--  -->

    
</
v-container
>

  
</
v-app
>


</
template
>



<
script
 
setup
>

  
//


</
script
>


#
Documentation
The documentation is located in 
packages/docs
 but also uses some files from 
packages/api-generator
. A dev server for the documentation can be started by running 
pnpm dev docs
 from the project root and will be available on 
localhost:8095
 by default.
If you want to see changes from Vuetify in the documentation you need to run 
pnpm build:lib
 in the vuetify package before starting the documentation server.
#
API Generator
All api descriptions are managed via the api-generator package. This package must be built prior to running or building the docs. Descriptions can be updated via the JSON files located in the 
src/locale/en
 folder. Some general guidelines to follow when handling api descriptions are:
en
 language only. Translations are handled via 
Crowdin
.
Prop names should be formatted using bold markdown eg: 
prop-name
.
Slot and other code related text should be formatted using code markdown eg: 
some-slot
.
Description keys should be in camelCase, except for 
slot
 keys which should be kebab-case.
Put keys in alphabetical order.
Descriptions utilize a hierarchy of 
generic.json
 < 
Source.json
 < 
Component.json
 to reduce duplication. Source can be viewed using the 
Developer Mode
 in docs settings.
#
Submitting Changes / Pull Requests
First you should create a fork of the vuetify repository to push your changes to. Information on forking repositories can be found in the 
GitHub documentation
.
Then add your fork as a remote in git:
# Using HTTPS


git
 remote 
add
 fork https://github.com/YOUR_USERNAME/vuetify.git


# Using SSH


git
 remote 
add
 fork git@github.com:YOUR_USERNAME/vuetify.git

#
Choosing a base branch
Before starting development you should know which branch to base your changes on. If in doubt use master as changes to master can usually be merged into a different branch without rebasing.
Version
Type of change
Branch
Vuetify 3
Documentation
master
Vuetify 3
Bug fixes
master
Vuetify 3
New features
dev
Vuetify 3
Features with breaking changes
next
Vuetify 2
Documentation
v2-stable
Vuetify 2
Bug fixes
v2-stable
Vuetify 2
New features
v2-dev
# Switch to the desired branch


# v3


git
 switch master

# v2


git
 switch v2-stable


# Pull down any upstream changes


git
 pull


# Create a new branch to work on


git
 switch 
--create
 fix/1234-some-issue

Never commit directly to the base branches, always create a feature branch to work on
Commit your changes following 
our guidelines
, then push the branch to your fork with 
git push -u fork
 and open a pull request on the Vuetify repository following the provided template.
Pull requests that include unrelated commits or your local merges will be 
CLOSED
 without notice
#
Working with GitHub
Vuetify‚Äôs repository lives on 
GitHub
 and is the primary location for all development related information.
Some of the more notable links within these services include:
GitHub
Issues
Discussions
The following sections are designed to familiarize you with our standard operating procedures for Vuetify development.
#
Issue triage
With the size and popularity of Vuetify has come a constant influx of new issues, questions, and feature requests. To organize these requests the 
Core Team
 developed tools to aid not only the triaging of issues, but creating them as well.
The 
Issues
 board makes heavy use of GitHub‚Äôs label system with some light automation, such as adding the 
triage
 label to new issues.
#
For Docs - Language
We 
do not
 accept PRs for any documentation changes pertaining to languages other than 
en
. All changes for languages other than 
en
 are to be submitted through our 
Crowdin project
. You can help translate in one of 2 ways:
Using in-context translation service directly through the documentation site. To get started simply select 
Help Translate
 in the language drop down in the docs.
Directly through the 
Crowdin project
.
Note
: Languages will not be added to the language drop down on the docs site until they have at least 50% of their translations completed.
#
Requesting new features
Pending
#
Commit guidelines
All commit messages are required to follow the 
conventional-changelog
 standard using the 
angular
 preset. This standard format consists of 2 types of commits:
With scope: 
<type>(scope): <subject>
fix
(
VSelect
)
: don't close when a detachable child is clicked

fixes 
#12354


Without scope: 
<type>: <subject>
docs: restructure nav components

Moved duplicated functionality 
in
 drawer to reduce
scope of responsibility

#
General Rules
Commit messages must have a subject line and may have body copy. These must be separated by a blank line.
The subject line must not exceed 60 characters
The subject line must be written in imperative mood (fix, not fixed / fixes etc.)
The body copy must include a reference all issues resolved:
docs
(
sass-variables
)
: fix broken 
link
 to api

resolves 
#3219

resolves 
#3254


The body copy must be wrapped at 72 characters
The body copy must only contain explanations as to what and why, never how. The latter belongs in documentation and implementation.
#
Commit types
The following is a list of 
commit types
 used in the 
angular
 preset:
feat:
 Commits that result in new features or functionalities. Backwards compatible features will release with the next 
MINOR
 whereas breaking changes will be in the next 
MAJOR
. The body of a commit with breaking changes must begin with 
BREAKING CHANGE
, followed by a description of how the API has changed.
fix:
 Commits that provide fixes for bugs within vuetify‚Äôs codebase.
docs:
 Commits that provide updates to the docs.
style:
 Commits that do not affect how the code runs, these are simply changes to formatting.
refactor:
 Commits that neither fixes a bug nor adds a feature.
perf:
 Commits that improve performance.
test:
 Commits that add missing or correct existing tests.
chore:
 Other commits that don‚Äôt modify src or test files.
revert:
 Commits that revert previous commits.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Unit testing
Getting started
Code of conduct
About
Roadmap
Introduction
Release notes
Accessibility (a11y)
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/accessibility/#activator-slots:














Accessibility (a11y) ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Activator slots
Focus management and keyboard interactions
v-menu
Additional Resources
Sponsors
Support
#
Accessibility (a11y)
Web accessibility 
(a11y for short)
, is the inclusive practice of ensuring there are no barriers that prevent the interaction with, or access to, websites on the World Wide Web by people with disabilities. Vuetify components are built to provide keyboard interactions for all mouse-based actions and utilize HTML5 semantic elements where applicable.
Report a Bug
#
Activator slots
Vuetify uses activator slots for many components such as 
v-menu
, 
v-dialog
 and more. In some instances these activator elements should have specific a11y attributes that associate them with their corresponding content. In order to achieve this, we pass down the necessary a11y options through the slots scope.
<!-- Vue Template HTML Markup -->



<
template
>

  
<
v-menu
>

    
<
template
 
v-slot:
activator
=
"
{ props }
"
>

      
<
v-btn

        
text
=
"
Click me
"

        
v-bind
=
"
props
"

      
>
</
v-btn
>

    
</
template
>


    
<
v-list
>

      
<
v-list-item
 
@click
=
"
method
"
>

        
<
v-list-item-title
>
Option 1
</
v-list-item-title
>

      
</
v-list-item
>


      
<
v-list-item
 
disabled
>

        
<
v-list-item-title
>
Option 2
</
v-list-item-title
>

      
</
v-list-item
>


      
<
v-list-item
 
@click
=
"
method
"
>

        
<
v-list-item-title
>
Option 3
</
v-list-item-title
>

      
</
v-list-item
>

    
</
v-list
>

  
</
v-menu
>


</
template
>


When the activator element is rendered, it will now contain the bound a11y attributes:
<!-- Rendered `v-btn` HTML Output -->



<
button

  
aria-expanded
=
"
false
"

  
aria-haspopup
=
"
true
"

  
role
=
"
button
"

  
type
=
"
button
"


>

  Click me

</
button
>


#
Focus management and keyboard interactions
Beyond attributes, components such as 
v-menu
 also support interaction by pressing 
‚Üë
 and 
‚Üì
 for navigating between options.
#
v-menu
When inside of a 
v-menu
, 
v-list-item
 will be automatically configured to have a role of 
menuitem
. Navigate to the 
Menu
 for more information on the components features.
Click me
#
Additional Resources
While Vuetify attempts to make a11y as easy as possible in your application, there are times where additional information is needed. Below you can find a list of helpful resources.
W3C Web Accessibility Initiative
WAI-ARIA Authoring Practices
The A11Y Project
"
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Internationalization (i18n)
Features
Menus
Components
Lists
Components
Contributing
Aliasing
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/aliasing/#usage:














Aliasing ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
Virtual component defaults
Nested defaults
Sponsors
Support
#
Aliasing & virtual components
Create virtual components that extend built-in Vuetify components using custom aliases.
Report a Bug
ads via vuetify
#
Usage
Aliasing allows you to use built-in Vuetify components as a baseline for your custom implementations. To get started, import the component that you want to extend. Provide it as the value of a unique key that is used for the virtual component‚Äôs name:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 VBtn 
}
 
from
 
'vuetify/components/VBtn'



export
 
default
 
createVuetify
(
{

  
aliases
:
 
{

    
MyButton
:
 VBtn
,

    
MyButtonAlt
:
 VBtn
,

  
}
,


}
)


Although treeshaking is automatically applied during production builds, it is advantageous to import components by specifying their full path in development mode. For instance, using 
vuetify/components/VBtn
 instead of 
vuetify/components
 ensures that the compiler loads fewer components, thus optimizing performance.
#
Virtual component defaults
Virtual components have access to the Vuetify 
Global configuration
. Default settings for aliases are defined the same as built-in components with no extra steps required by you. In the following example, 
MyButton
 uses 
v-btn props
 to change it‚Äôs default 
variant
:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 VBtn 
}
 
from
 
'vuetify/components/VBtn'



export
 
default
 
createVuetify
(
{

  
aliases
:
 
{

    
MyButton
:
 VBtn
,

  
}
,

  
defaults
:
 
{

    
VBtn
:
 
{
 
variant
:
 
'flat'
 
}
,

    
MyButton
:
 
{
 
variant
:
 
'tonal'
 
}
,

  
}
,


}
)


#
Nested defaults
Prop defaults accept component key references to apply style changes based upon component hierarchy. In the following example, 
v-btn
 and 
MyButton
 swap colors when nested within a 
v-card
 component.
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 VBtn 
}
 
from
 
'vuetify/components/VBtn'



export
 
default
 
createVuetify
(
{

  
aliases
:
 
{

    
MyButton
:
 VBtn
,

  
}
,

  
defaults
:
 
{

    
MyButton
:
 
{

      
color
:
 
'primary'
,

      
variant
:
 
'tonal'
,

    
}
,

    
VBtn
:
 
{

      
color
:
 
'secondary'
,

      
variant
:
 
'flat'
,

    
}
,

    
VCard
:
 
{

      
MyButton
:
 
{
 
color
:
 
'secondary'
 
}
,

      
VBtn
:
 
{
 
color
:
 
'primary'
 
}
,

    
}
,

  
}
,


}
)


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Blueprints
Features
Global configuration
Features
Treeshaking
Features
Accessibility (a11y)
Application layout
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/application-layout/#placing-components:














Application layout ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Placing components
Complex layouts
Dynamic layouts and order
Accessing layout information
Sponsors
Support
#
Application layout
Vuetify features an application layout system that allows you to easily create complex website designs.
Report a Bug
ads via vuetify
The system is built around an outside-in principle, where each application layout component reserves space for itself in one of four directions (left, right, up, down), leaving the available free space for any subsequent layout component(s) to occupy.
The following components are compatible with the layout system:
Component
Description
v-app-bar
A container that is used navigation, branding, search, and actions
v-system-bar
A system bar replaces the native phone system bar
v-navigation-drawer
A persistent or temporary container that holds site navigation links
v-footer
A generic component used to replace the default html footer
v-bottom-navigation
A persistent or temporary container that holds navigation links and is typically used for smaller devices
The final part of the layout system is the 
v-main
 component. Inside this is where you place your page content. It will use the remaining free space on the page after all layout components have reserved their space.
In the following examples, 
v-app
 has been replaced by 
v-layout
. This is because 
v-app
 defaults to a minimum height of 
100dvh
. In your own application you would always use 
v-app
 for the root layout.
#
Placing components
By default, the order in which layout components will attempt to reserve space is simply the order that they appear in your markup. To illustrate this concept, see the following two examples where a single 
v-app-bar
 and 
v-navigation-drawer
 have changed places in the markup.
Application bar
Navigation drawer
 Main Content 
Navigation drawer
Application bar
 Main Content 
As you can see, placing the 
v-app-bar
 before the 
v-navigation-drawer
 means that it will use the full width of the screen. When it it placed after the 
v-navigation-drawer
, it will only use the free space left over.
Some layout components accept a 
location
 prop with which you can place the component in the layout. In the example below, we use two 
v-navigation-drawer
 components, one on each side of the application.
Application bar
Drawer left
Drawer right
 Main Content 
#
Complex layouts
Let‚Äôs create a more complex layout to show the flexibility of the system. In the following example we have re-created the general layout of the Discord application. This example also demonstrates that layout components accept either a 
width
 or 
height
 prop, and that multiple components of the same type can be stacked in the same position.
 Main Content 
#
Dynamic layouts and order
In most cases, it should be enough to simply place your layout components in the correct order in your markup to achieve the layout you want. There are however a couple of scenarios where this might not be possible. One of these is if you want to change the order of your layout components dynamically.
To solve this you can explicitly set the layout order by using the 
order
 prop. Explore the example below to see what happens when using the prop. By toggling the switch, you change the order of the app-bar to 
-1
, thus putting it above the navigation-drawer in the layout ordering.
All layout components have a default order of 
0
. Layout components with the same order will be ordered as they appear in the markup.
Application bar
Toggle order
 Main Content 
#
Accessing layout information
The layout system exposes a function 
getLayoutItem
 that allows you to get size and position information about a specific layout component in your markup. To use it, you will need to add a 
name
 prop to the layout component, and give it a unique value. You can either access the method by using a ref on 
v-app
, or by using the 
useLayout
 composable.
Get data
Get data
 Main Content 
 Get data 
You will not be able to directly use the composable in the same component where you are rendering the 
v-app
 component. The call to 
useLayout
 must happen in a child component, so that the layout can be properly injected.
Get data
Get data
 Main Content 
 Get data 
The combined size of all layout components is also available under 
layout.mainRect
. This is used internally by the 
v-main
 component to determine the size of the main content area.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
App bars
Components
Navigation drawers
Components
Footers
Components
Aliasing
Blueprints
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/blueprints/#usage:














Blueprints ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
White-label concept
Available blueprints
Material Design 1
Material Design 2
Material Design 3
Sponsors
Support
#
Blueprints
Vuetify blueprints are a new way to pre-configure your entire application with a completely unique design system.
Report a Bug
ads via vuetify
#
Usage
Blueprints are a collection of Vuetify configuration options that assign default values for components, colors, language, and more. Open your project‚Äôs 
vuetify.js
 file and import the desired blueprint. The follow example demonstrates how to apply the 
Material Design 1
 preset:
 plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 md1 
}
 
from
 
'vuetify/blueprints'



export
 
default
 
createVuetify
(
{

  
blueprint
:
 md1
,


}
)


#
White-label concept
While Vuetify is built under the guise of Google‚Äôs 
Material Design
 specification, it is still flexible enough to be used as the foundation for any design system. By default, Vuetify components have no color and are 
white-label
 in nature. A white-label product is a product or service produced by one company that other companies rebrand to make it appear as if they had made it.
#
Available blueprints
Name
Release date
Status
Resource
Material Design 1
2014
‚úÖ Available
Specification
Material Design 2
2017
‚úÖ Available
Specification
Material Design 3
2022
‚úÖ Available
Specification
Blueprints require the use of utility classes to properly function.
#
Material Design 1
Released in 2014, the original Material Design specification aimed to create a visual language that combined principles and good design with technical and scientific innovation.
 plugins/vuetify.js
import
 
{
 md1 
}
 
from
 
'vuetify/blueprints'


Preview:
<
template
>


<
div
>


<
v-defaults-provider
 
:defaults
=
"
md1.defaults
"
>


<
div
 
class
=
"
d-flex align-center
"
>


<
v-btn
 
:color
=
"
color
"
 
class
=
"
me-6 text-white
"
>
Button
</
v-btn
>


<
v-tabs
 
:color
=
"
color
"
>


<
v-tab
>
Tab One
</
v-tab
>


<
v-tab
>
Tab Two
</
v-tab
>


<
v-tab
>
Tab Three
</
v-tab
>


</
v-tabs
>


</
div
>


<
br
>


<
v-banner


:color
=
"
color
"


text
=
"
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
"


>


<
template
 
v-slot:
prepend
>


<!-- rounded added due to bug -->


<
v-avatar


class
=
"
text-white
"


icon
=
"
$vuetify
"


rounded
=
"
circle
"


>
</
v-avatar
>


</
template
>


</
v-banner
>


<
br
>


<
v-text-field


:color
=
"
color
"


label
=
"
Text field
"


model-value
=
"
Material Design 1
"


>
</
v-text-field
>


</
v-defaults-provider
>


</
div
>


</
template
>
Button
Tab One
Tab Two
Tab Three
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Text field
Text field
#
Material Design 2
Released in 2017, version 2 of Google‚Äôs design specification received a massive upgrade with new components, guidelines, and improved on the principles that made the first system so successful.
 plugins/vuetify.js
import
 
{
 md2 
}
 
from
 
'vuetify/blueprints'


Preview:
<
template
>


<
div
>


<
v-defaults-provider
 
:defaults
=
"
md2.defaults
"
>


<
div
 
class
=
"
d-flex align-center
"
>


<
v-btn
 
:color
=
"
color
"
 
class
=
"
me-6 text-white
"
>
Button
</
v-btn
>


<
v-tabs
 
:color
=
"
color
"
>


<
v-tab
>
Tab One
</
v-tab
>


<
v-tab
>
Tab Two
</
v-tab
>


<
v-tab
>
Tab Three
</
v-tab
>


</
v-tabs
>


</
div
>


<
br
>


<
v-banner


:color
=
"
color
"


text
=
"
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
"


>


<
template
 
v-slot:
prepend
>


<!-- rounded added due to bug -->


<
v-avatar


class
=
"
text-white
"


icon
=
"
$vuetify
"


rounded
=
"
circle
"


>
</
v-avatar
>


</
template
>


</
v-banner
>


<
br
>


<
v-text-field


:color
=
"
color
"


label
=
"
Text field
"


model-value
=
"
Material Design 2
"


>
</
v-text-field
>


</
v-defaults-provider
>


</
div
>


</
template
>
Button
Tab One
Tab Two
Tab Three
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Text field
Text field
#
Material Design 3
Material Design 3 is currently in active development and represents the next chapter of Google‚Äôs design system.
 plugins/vuetify.js
import
 
{
 md3 
}
 
from
 
'vuetify/blueprints'


Preview:
<
template
>


<
div
>


<
v-defaults-provider
 
:defaults
=
"
md3.defaults
"
>


<
div
 
class
=
"
d-flex align-center
"
>


<
v-btn
 
:color
=
"
color
"
 
class
=
"
me-6 text-white
"
>
Button
</
v-btn
>


<
v-tabs
 
:color
=
"
color
"
>


<
v-tab
>
Tab One
</
v-tab
>


<
v-tab
>
Tab Two
</
v-tab
>


<
v-tab
>
Tab Three
</
v-tab
>


</
v-tabs
>


</
div
>


<
br
>


<
v-banner


:color
=
"
color
"


text
=
"
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
"


>


<
template
 
v-slot:
prepend
>


<!-- rounded added due to bug -->


<
v-avatar


class
=
"
text-white
"


icon
=
"
$vuetify
"


rounded
=
"
circle
"


>
</
v-avatar
>


</
template
>


</
v-banner
>


<
br
>


<
v-text-field


:color
=
"
color
"


label
=
"
Text field
"


model-value
=
"
Material Design 3
"


>
</
v-text-field
>


</
v-defaults-provider
>


</
div
>


</
template
>
Button
Tab One
Tab Two
Tab Three
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Text field
Text field
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Global configuration
Features
Theme
Features
Display & Platform
Features
Application layout
Dates
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/dates/#usage:














Dates ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
Format options
API
Adapter
Localization
Create your own
Sponsors
Support
#
Dates
Easily hook up date libraries that are used for components such as Date Picker and Calendar that require date functionality.
Report a Bug
Open issues
View on GitHub
This feature was introduced in 
v3.4.0 (Blackguard)
#
Usage
The date composable provides a shared architecture that is used by components such as date picker and calendar. The default implementation is built using the native Date object, but can be swapped out for another date library. If no other date adapter is given, the default Vuetify one is used.
Within your application, import the 
useDate
 function and use it to access the date composable.
 src/views/Date.vue
<
script
 
setup
>

  
import
 
{
 useDate 
}
 
from
 
'vuetify'


  
const
 date 
=
 
useDate
(
)


  console
.
log
(
date
.
getMonth
(
new
 
Date
(
'March 1, 2021'
)
)
)
 
// 3


</
script
>


For a list of all supported date adapters, visit the 
date-io
 project repository.
#
Format options
The date composable supports the following date formatting options:
Format Name
Format Output
fullDate
‚ÄúJan 1, 2024‚Äù
fullDateWithWeekday
‚ÄúTuesday, January 1, 2024‚Äù
normalDate
‚Äú1 January‚Äù
normalDateWithWeekday
‚ÄúWed, Jan 1‚Äù
shortDate
‚ÄúJan 1‚Äù
year
‚Äú2024‚Äù
month
‚ÄúJanuary‚Äù
monthShort
‚ÄúJan‚Äù
monthAndYear
‚ÄúJanuary 2024‚Äù
monthAndDate
‚ÄúJanuary 1‚Äù
weekday
‚ÄúWednesday‚Äù
weekdayShort
‚ÄúWed‚Äù
dayOfMonth
‚Äú1‚Äù
hours12h
‚Äú11‚Äù
hours24h
‚Äú23‚Äù
minutes
‚Äú44‚Äù
seconds
‚Äú00‚Äù
fullTime
‚Äú11:44 PM‚Äù for US, ‚Äú23:44‚Äù for Europe
fullTime12h
‚Äú11:44 PM‚Äù
fullTime24h
‚Äú23:44‚Äù
fullDateTime
‚ÄúJan 1, 2024 11:44 PM‚Äù
fullDateTime12h
‚ÄúJan 1, 2024 11:44 PM‚Äù
fullDateTime24h
‚ÄúJan 1, 2024 23:44‚Äù
keyboardDate
‚Äú02/13/2024‚Äù
keyboardDateTime
‚Äú02/13/2024 23:44‚Äù
keyboardDateTime12h
‚Äú02/13/2024 11:44 PM‚Äù
keyboardDateTime24h
‚Äú02/13/2024 23:44‚Äù
The following example shows how to use the date composable to format a date string:
 src/views/Date.vue
<
script
 
setup
>

  
import
 
{
 useDate 
}
 
from
 
'vuetify'


  
const
 date 
=
 
useDate
(
)


  
const
 formatted 
=
 date
.
format
(
'2010-04-13'
,
 
'fullDateWithWeekday'
)


  console
.
log
(
formatted
)
 
// Tuesday, April 13, 2010


</
script
>


#
API
Feature
Description
useDate
The date composable is used by components that require date functionality
Toggle Inline API
#
Adapter
The built-in date adapter implements a subset of functionality from the 
DateIOFormats
 interface. Because of this, it‚Äôs easy to swap in any date library supported by 
date-io
.
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 LuxonAdapter 
from
 
"@date-io/luxon"



export
 
default
 
createVuetify
(
{

  
date
:
 
{

    
adapter
:
 LuxonAdapter
,

  
}
,


}
)


For TypeScript users, an interface is also exposed for 
module augmentation
:
 src/plugins/vuetify.js
export
 
default
 
createVuetify
(
{

  
...


}
)



declare
 
module
 
'vuetify'
 
{

  
namespace
 DateModule 
{

    
interface
 
Adapter
 
extends
 
LuxonAdapter
 
{
}

  
}


}


#
Localization
The date composable will use the current vuetify 
locale
 for formatting and getting the first day of the week. These do not always line up perfectly, so a list of aliases can be provided to map language codes to locales. The following configuration will look up 
en
 keys for translations, but use 
en-GB
 for date formatting:
 src/plugins/vuetify.js
export
 
default
 
createVuetify
(
{

  
locale
:
 
{

    
locale
:
 
'en'
,

  
}
,

  
date
:
 
{

    
locale
:
 
{

      
en
:
 
'en-GB'
,

    
}
,

  
}
,


}
)


#
Create your own
To create your own date adapter, implement the 
DateAdapter
 interface:
import
 
type
 
{
 DateAdapter 
}
 
from
 
'vuetify/labs'



export
 
interface
 
DateAdapter
<
TDate
>
 
{

  
date
 
(
value
?
:
 
any
)
:
 TDate 
|
 
null

  
format
 
(
date
:
 TDate
,
 formatString
:
 
string
)
:
 
string

  
toJsTDate
 
(
value
:
 TDate
)
:
 TDate
  
parseISO
 
(
date
:
 
string
)
:
 TDate
  
toISO
 
(
date
:
 TDate
)
:
 
string


  
startOfDay
 
(
date
:
 TDate
)
:
 TDate
  
endOfDay
 
(
date
:
 TDate
)
:
 TDate
  
startOfMonth
 
(
date
:
 TDate
)
:
 TDate
  
endOfMonth
 
(
date
:
 TDate
)
:
 TDate
  
startOfYear
 
(
date
:
 TDate
)
:
 TDate
  
endOfYear
 
(
date
:
 TDate
)
:
 TDate

  
isBefore
 
(
date
:
 TDate
,
 comparing
:
 TDate
)
:
 
boolean

  
isAfter
 
(
date
:
 TDate
,
 comparing
:
 TDate
)
:
 
boolean

  
isEqual
 
(
date
:
 TDate
,
 comparing
:
 TDate
)
:
 
boolean

  
isSameDay
 
(
date
:
 TDate
,
 comparing
:
 TDate
)
:
 
boolean

  
isSameMonth
 
(
date
:
 TDate
,
 comparing
:
 TDate
)
:
 
boolean

  
isValid
 
(
date
:
 
any
)
:
 
boolean

  
isWithinRange
 
(
date
:
 TDate
,
 range
:
 
[
TDate
,
 TDate
]
)
:
 
boolean


  
addDays
 
(
date
:
 TDate
,
 amount
:
 
number
)
:
 TDate
  
addMonths
 
(
date
:
 TDate
,
 amount
:
 
number
)
:
 TDate

  
getYear
 
(
date
:
 TDate
)
:
 
number

  
setYear
 
(
date
:
 TDate
,
 year
:
 
number
)
:
 TDate
  
getDiff
 
(
date
:
 TDate
,
 comparing
:
 TDate 
|
 
string
,
 unit
?
:
 
string
)
:
 
number

  
getWeekArray
 
(
date
:
 TDate
)
:
 TDate
[
]
[
]

  
getWeekdays
 
(
)
:
 
string
[
]

  
getMonth
 
(
date
:
 TDate
)
:
 
number

  
setMonth
 
(
date
:
 TDate
,
 month
:
 
number
)
:
 TDate
  
getNextMonth
 
(
date
:
 TDate
)
:
 TDate

}


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Blueprints
Features
Global configuration
Features
Treeshaking
Features
Blueprints
Display & Platform
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/display-and-platform/#usage:














Display & Platform ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Breakpoints and Thresholds
Options
Examples
Interface
Using Setup
Breakpoint conditionals
Component Mobile Breakpoints
useDisplay overrides
Sponsors
Support
#
Display & Platform
The display composable provides a multitude of information about the current device
Report a Bug
#
Usage
The 
useDisplay
 composable provides information on multiple aspects of the current device.
This enables you to control various aspects of your application based upon the window size, device type, and SSR state. This composable works in conjunction with 
grids
 and other responsive utility classes (e.g. 
display
).
The following shows how to access the application‚Äôs display information:
 Composition.vue
<
script
 
setup
>

  
import
 
{
 onMounted 
}
 
from
 
'vue'

  
import
 
{
 useDisplay 
}
 
from
 
'vuetify'


  
const
 
{
 mobile 
}
 
=
 
useDisplay
(
)


  
onMounted
(
(
)
 
=>
 
{

    console
.
log
(
mobile
.
value
)
 
// false

  
}
)


</
script
>


If you are still using the Options API, you can access the display information on the global 
$vuetify
 variable. Note that refs are unwrapped here, so you don‚Äôt need 
.value
.
 Options.vue
<
script
>

  
export
 
default
 
{

    
mounted
 
(
)
 
{

      console
.
log
(
this
.
$vuetify
.
display
.
mobile
)

    
}
,

  
}


</
script
>


#
API
Component
Description
useDisplay
Composable
#
Breakpoints and Thresholds
Threshold values generate the ranges used for various breakpoints seen throughout vuetify and the 
useDisplay
 composable. The system uses an ‚Äúand up‚Äù mentality starting from 
xs
 at 0px. The default threshold values are displayed below.
Device
Code
Type
Range
Extra small
xs
Small to large phone
< 600px
Small
sm
Small to medium tablet
600px > < 960px
Medium
md
Large tablet to laptop
960px > < 1280px
Large
lg
Laptop to desktop
1280px > < 1920px
Extra large
xl
1080p to 1440p desktop
1920px > < 2560px
Extra extra large
xxl
4k and ultra-wide
> 2560px
 Specification
These ranges power the various additional 
AndUp
 / 
AndDown
 properties accessible in 
useDisplay
{

  smAndDown
:
 
boolean
 
// < 960px

  smAndUp
:
 
boolean
 
// > 600px

  mdAndDown
:
 
boolean
 
// < 1280px

  mdAndUp
:
 
boolean
 
// > 960px

  lgAndDown
:
 
boolean
 
// < 1919px

  lgAndUp
:
 
boolean
 
// > 1280px

  xlAndDown
:
 
boolean
 
// < 2559px

  xlAndUp
:
 
boolean
 
// > 1920px


}


#
Options
The 
useDisplay
 composable has several configuration options, such as the ability to define custom values for breakpoints.
For example, the 
thresholds
 option modifies the values used for viewport calculations. The following snippet overrides 
thresholds
 values 
xs
 through 
lg
 and sets 
mobileBreakpoint
 to 
sm
.
 src/plugins/vuetify.js
import
 
{
 createVuetify
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
display
:
 
{

    
mobileBreakpoint
:
 
'sm'
,

    
thresholds
:
 
{

      
xs
:
 
0
,

      
sm
:
 
340
,

      
md
:
 
540
,

      
lg
:
 
800
,

      
xl
:
 
1280
,

    
}
,

  
}
,


}
)


The 
mobileBreakpoint
 option accepts numbers and breakpoint keys.
#
Examples
In the following example, we use a switch statement and the current breakpoint name to modify the 
height
 property of the 
v-card
 component:
 Component.vue
<
template
>

  
<
v-card
 
:height
=
"
height
"
>

    ...
  
</
v-card
>


</
template
>



<
script
 
setup
>

  
import
 
{
 computed 
}
 
from
 
'vue'

  
import
 
{
 useDisplay 
}
 
from
 
'vuetify'


  
const
 
{
 name 
}
 
=
 
useDisplay
(
)


  
const
 height 
=
 
computed
(
(
)
 
=>
 
{

    
// name is reactive and

    
// must use .value

    
switch
 
(
name
.
value
)
 
{

      
case
 
'xs'
:
 
return
 
220

      
case
 
'sm'
:
 
return
 
400

      
case
 
'md'
:
 
return
 
500

      
case
 
'lg'
:
 
return
 
600

      
case
 
'xl'
:
 
return
 
800

      
case
 
'xxl'
:
 
return
 
1200

    
}


    
return
 
undefined

  
}
)


</
script
>


#
Interface
{

  
// Breakpoints

  xs
:
 
boolean
 
// 0 - 595

  sm
:
 
boolean
 
// 600 - 959

  md
:
 
boolean
 
// 960 - 1279

  lg
:
 
boolean
 
// 1280 - 1919

  xl
:
 
boolean
 
// > 1920

  xxl
:
 
boolean

  smAndDown
:
 
boolean
 
// < 960

  smAndUp
:
 
boolean
 
// > 600

  mdAndDown
:
 
boolean
 
// < 1280

  mdAndUp
:
 
boolean
 
// > 960

  lgAndDown
:
 
boolean
 
// < 1919

  lgAndUp
:
 
boolean
 
// > 1280

  xlAndDown
:
 
boolean

  xlAndUp
:
 
boolean
 
// < 1920


  
// true if screen width < mobileBreakpoint

  mobile
:
 
boolean

  mobileBreakpoint
:
 
number
 
|
 
'xs'
 
|
 
'sm'
 
|
 
'md'
 
|
 
'lg'
 
|
 
'xl'
 
|
 
'xxl'


  
// Current breakpoint name (e.g. 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl')

  name
:
 
string


  
// The current value of window.innerHeight and window.innerWidth

  height
:
 
number

  width
:
 
number


  
// Device userAgent information

  platform
:
 
{

    android
:
 
boolean

    ios
:
 
boolean

    cordova
:
 
boolean

    electron
:
 
boolean

    chrome
:
 
boolean

    edge
:
 
boolean

    firefox
:
 
boolean

    opera
:
 
boolean

    win
:
 
boolean

    mac
:
 
boolean

    linux
:
 
boolean

    touch
:
 
boolean

    ssr
:
 
boolean

  
}


  
// The values used to make Breakpoint calculations

  thresholds
:
 
{

    xs
:
 
number

    sm
:
 
number

    md
:
 
number

    lg
:
 
number

    xl
:
 
number

    xxl
:
 
number

  
}


}


#
Using Setup
Use the 
useDisplay
 composable alongside Vue 3‚Äôs 
setup
 function to harness the power of the 
Composition API
. In this example we show how to toggle the 
fullscreen
 property of 
v-dialog
 when the mobile breakpoint is active.
 Component.vue
<
template
>

  
<
v-dialog
 
:fullscreen
=
"
mobile
"
>

    ...
  
</
v-dialog
>


</
template
>



<
script
 
setup
>

  
import
 
{
 useDisplay 
}
 
from
 
'vuetify'


  
const
 
{
 mobile 
}
 
=
 
useDisplay
(
)


</
script
>


#
Breakpoint conditionals
Breakpoint and conditional values return a 
boolean
 that is derived from the current viewport size. Additionally, the 
breakpoint
 composable follows the 
Vuetify Grid
 naming conventions and has access to properties such as 
xs
, 
smAndUp
, 
mdAndDown
, and many others. In the following example we use the 
setup
 function to pass the 
xs
 and 
mdAndUp
 values to our template:
 Component.vue
<
template
>

  
<
v-sheet

    
:min-height
=
"
mdAndUp ? 300 : '20vh'
"

    
:rounded
=
"
xs
"

  
>

    ...
  
</
v-sheet
>


</
template
>



<
script
 
setup
>

  
import
 
{
 useDisplay 
}
 
from
 
'vuetify'


  
// Destructure only the keys you want to use

  
const
 
{
 xs
,
 mdAndUp 
}
 
=
 
useDisplay
(
)


</
script
>


Using the 
dynamic
 display values, we are able to adjust the minimum height of 
v-sheet
 to 
300
 when on the 
medium
 breakpoint or greater and only show rounded corners on 
extra small
 screens:
#
Component Mobile Breakpoints
This feature was introduced in 
v3.4.0 (Blackguard)
Some components within Vuetify have a 
mobile-breakpoint
 property which allows you to override the default value. These components reference the global mobileBreakpoint value that is generated at runtime using the provided options in the 
vuetify.js
 file.
The following components have built in support for the 
mobile-breakpoint
 property:
Component
v-banner
v-navigation-drawer
v-slide-group
By default, 
mobileBreakpoint
 is set to 
lg
, which means that if the window is less than 
1280
 pixels in width (which is the default value for the 
lg
 threshold), then the 
useDisplay
 composable will update its 
mobile
 value to 
true
.
For example, the 
v-banner
 component implements different styling when its mobile versus desktop. In the following example, The first banner uses the global 
mobile-breakpoint
 value of 
lg
 while the second overrides this default with 
580
:
 Component.vue
<
template
>

  
<
div
>

    
<
v-banner
>

      ...
    
</
v-banner
>


    
<
v-banner
 
mobile-breakpoint
=
"
580
"
>

      ...
    
</
v-banner
>

  
</
div
>


</
template
>



<
script
 
setup
>

  
import
 
{
 onMounted 
}
 
from
 
'vue'

  
import
 
{
 useDisplay 
}
 
from
 
'vuetify'


  
const
 
{
 width
,
 mobile 
}
 
=
 
useDisplay
(
)


  
onMounted
(
(
)
 
=>
 
{

    console
.
log
(
width
.
value
)
 
// 960

    console
.
log
(
mobile
.
value
)
 
// true

  
}
)


</
script
>


If the screen width is 1024 pixels, the second banner would not convert into its mobile state.
#
useDisplay overrides
Specify a custom 
mobileBreakpoint
 value directly to the 
useDisplay
 composable and override the global value. In the following example we use a custom mobileBreakpoint value of 
580
:
 Component.vue
<
script
 
setup
>

  
import
 
{
 onMounted 
}
 
from
 
'vue'

  
import
 
{
 useDisplay 
}
 
from
 
'vuetify'


  
const
 
{
 mobile 
}
 
=
 
useDisplay
(
{
 mobileBreakpoint 
}
)


  
// Given a viewport width of 960px

  
onMounted
(
(
)
 
=>
 
{

    console
.
log
(
mobile
.
value
)
 
// false

  
}
)


</
script
>


If you supply a value for the 
name
 argument, utilize the 
displayClasses
 property to apply the appropriate classes to your component. In the next example, the following classes would be applied to the root element of the component:
 Component.vue
<
template
>

  
<
div

    
:class
=
"
[
      'v-component',
      displayClasses,
    ]
"

  
>

    
<!-- v-component--mobile -->

  
</
div
>


</
template
>



<
script
 
setup
>

  
import
 
{
 defineName 
}
 
from
 
'vue'

  
import
 
{
 useDisplay 
}
 
from
 
'vuetify'


  
const
 
{
 displayClasses 
}
 
=
 
useDisplay
(
{
 mobileBreakpoint 
}
,
 
'v-component'
)


</
script
>


If you leave out the name argument, displayClasses will use the default name set by Vue. The following example uses the default name of the local component:
 AppDrawer.vue
<
template
>

  
<
v-navigation-drawer

    
:class
=
"
[
      displayClasses, // 'app-drawer--mobile'
    ]
"

  
>

    ...
  
</
v-navigation-drawer
>


</
template
>



<
script
 
setup
>

  
import
 
{
 useDisplay 
}
 
from
 
'vuetify'


  
const
 
{
 displayClasses 
}
 
=
 
useDisplay
(
{
 mobileBreakpoint 
}
)


</
script
>


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Resize
Directives
Display
Styles
Text and typography
Styles
Dates
Global configuration
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/global-configuration/#setup:














Global configuration ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Setup
Contextual defaults
Global class and styles
Using with virtual components
Using in custom components
Nested defaults
Sponsors
Support
#
Global configuration
Vuetify allows you to set default prop values globally or per component when setting up your application. Using this functionality you can for example disable 
ripple
 on all components, or set the default 
elevation
 for all sheets or buttons.
Report a Bug
#
Setup
Use the 
defaults
 property of the Vuetify configuration object to set default prop values. Here we have disabled 
ripple
 for all components that support it, and set the default 
elevation
 to 
4
 for all 
<v-sheet>
 components.
 src/plugins/vuetify.js
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
defaults
:
 
{

    
global
:
 
{

      
ripple
:
 
false
,

    
}
,

    
VSheet
:
 
{

      
elevation
:
 
4
,

    
}
,

  
}
,


}
)


#
Contextual defaults
Defaults can also be configured for components nested within other components, for example if you want to set the default 
variant
 for all 
<v-btn>
 components nested within a 
<v-card>
 component:
 src/plugins/vuetify.js
createVuetify
(
{

  
defaults
:
 
{

    
VCard
:
 
{

      
VBtn
:
 
{
 
variant
:
 
'outlined'
 
}
,

    
}
,

  
}
,


}
)


This is used internally by some components already:
<v-btn>
 has 
variant="text"
 when nested within a 
<v-card-actions>
 or 
<v-toolbar>
<v-list>
 has 
bg-color="transparent"
 when nested within a 
<v-navigation-drawer>
Lists, chip groups, expansion panels, tabs, and forms all use this system to propagate certain props to their children, for example 
<v-tabs disabled>
 will set the default value of 
disabled
 to 
true
 for all 
<v-tab>
 components inside it.
v-defaults-provider
 can be used to set defaults for components within a specific scope.
#
Global class and styles
This feature was introduced in 
v3.2.0 (Orion)
Define global classes and styles for all 
built-in
 components; including 
virtual
 ones. This provides an immense amount of utility when building your application‚Äôs design system and it reduces the amount of duplicated code in your templates.
Let‚Äôs say that you want to set the 
text-transform
 of all 
v-btn
 components to 
none
, but are not interested in using 
SASS variables
. By simply adding the 
style
 property to a component‚Äôs default values, you are able to apply custom values to all instances of said component.
The following code example modifies the 
text-transform
 CSS property of all 
<v-btn>
 components:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 VBtn 
}
 
from
 
'vuetify/components/VBtn'



export
 
default
 
createVuetify
(
{

  
defaults
:
 
{

    
VBtn
:
 
{

      
style
:
 
'text-transform: none;'
,

    
}
,

  
}
,


}
)


As an alternative, apply utility classes instead to achieve the same effect:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 VBtn 
}
 
from
 
'vuetify/components/VBtn'



export
 
default
 
createVuetify
(
{

  
defaults
:
 
{

    
VBtn
:
 
{

      
class
:
 
'text-none'
,

    
}
,

  
}
,


}
)


Additionally, it works with any valid Vue value type such as objects and arrays:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 VBtn 
}
 
from
 
'vuetify/components/VBtn'



export
 
default
 
createVuetify
(
{

  
defaults
:
 
{

    
VBtn
:
 
{

      
style
:
 
[
{
 
textTransform
:
 
'none'
 
}
]
,

    
}
,

  
}
,


}
)


class
 and 
style
 cannot be used in the 
global
 object, only in specific components.
#
Using with virtual components
Whether you are developing a wrapper framework or just a design system for your application, 
virtual components
 are a powerful ally. Within the Vuetify defaults system, classes and styles are treated just like regular props but instead of being overwritten at the template level, they are merged.
For example, lets create an alias of the 
v-btn
 component and modify some of its default values:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 VBtn 
}
 
from
 
'vuetify/components/VBtn'



export
 
default
 
createVuetify
(
{

  
aliases
:
 
{

    
VBtnPrimary
:
 VBtn
,

  
}
,


  
defaults
:
 
{

    
VBtnPrimary
:
 
{

      
class
:
 
[
'v-btn--primary'
,
 
'text-none'
]
,

    
}
,

  
}
,


}
)


Now, use 
<v-btn-primary>
 in a template and apply a custom class:
<
template
>

  
<
v-btn-primary
 
class
=
"
foobar
"
>
Foobar
</
v-btn-primary
>


</
template
>


When compiled, the resulting HTML will contain both the globally defined classes and the custom one:
<!-- Example HTML Output -->


<
button
 
class
=
"
v-btn v-btn--primary text-none foobar
"
>
Fizzbuzz
</
button
>


This is particularly useful when you have multiple variants of a component that need individual classes to target:
 src/components/HelloWorld.vue
<
template
>

  
<
v-app
>

    
<
v-main
>

      
<
v-btn-primary
>
Primary
</
v-btn-primary
>


      
<
span
 
class
=
"
mx-2
"
 
/>


      
<
v-btn-secondary
>
Secondary
</
v-btn-secondary
>

    
</
v-main
>

  
</
v-app
>


</
template
>



<
style
>

  
.v-btn.v-btn--primary
 
{

    
background
:
 
linear-gradient
(
to right
,
 #ff8a00
,
 #da1b60
)
;

    
color
:
 white
;

  
}

  
.v-btn.v-btn--secondary
 
{

    
background
:
 
linear-gradient
(
to right
,
 #da1b60
,
 #ff8a00
)
;

    
color
:
 white
;

  
}


</
style
>


Keep in mind that virtual components do not inherit global class or styles from their extension. For example, the following Vuetify configuration uses a 
v-chip
 as the alias for the virtual 
<v-chip-primary>
 component.
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 VChip 
}
 
from
 
'vuetify/components/VChip'



export
 
default
 
createVuetify
(
{

  
aliases
:
 
{

    
VChipPrimary
:
 VChip
,

  
}
,


  
defaults
:
 
{

    
VChipPrimary
:
 
{

      
class
:
 
'v-chip--primary'
,

    
}
,

    
VChip
:
 
{

      
class
:
 
'v-chip--custom'
,

    
}
,

  
}
,


}
)


When 
<v-chip-primary>
 is used in a template, it will 
not
 have the 
v-chip--custom
 class.
There are some cases where a default class or style could be unintentionally passed down to an inner component. This mostly concerns 
form inputs and controls
.
#
Using in custom components
This feature was introduced in 
v3.2.0 (Orion)
Hook into the Vuetify defaults engine and configure your custom components the same way that we do. This feature makes it super easy to homogenize functionality across your application and reduce the amount of duplicated code.
Let‚Äôs start with an example by creating a basic component that accepts a single prop:
 src/components/MyComponent.vue
<
template
>

  
<
div
>
I am {{ foo }}
</
div
>


</
template
>



<
script
 
setup
>

  
defineProps
(
{
 
foo
:
 String 
}
)


</
script
>


Now, let‚Äôs add our new component to the Vuetify defaults configuration object and assign a default value to its 
foo
 prop:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
defaults
:
 
{

    
MyComponent1
:
 
{

      
foo
:
 
'bar'
,

    
}
,

  
}
,


}
)


Next, import the 
useDefaults
 composable into 
MyComponent1.vue
. This function has two optional arguments:
props
 - The props object used to generate the component‚Äôs default values
name
 - The name of the component. This is used to reference the defaults key defined in your Vuetify configuration
In your template, assign the return value of 
defineProps
 to a variable and pass it to 
useDefaults
:
 src/components/MyComponent1.vue
<
template
>

  
<
div
>
I am {{ props.foo }}
</
div
>


</
template
>



<
script
 
setup
>

  
import
 
{
 useDefaults 
}
 
from
 
'vuetify'


  
const
 _props 
=
 
defineProps
(
{
 
foo
:
 String 
}
)

  
const
 props 
=
 
useDefaults
(
_props
,
 
'MyComponent1'
)


</
script
>


Notice that we have to explicitly use the 
props
 object in the template. This is because Vue automatically unwraps the values in 
defineProps
.
-
<div>I am {{ foo }}</div>

+
<div>I am {{ props.foo }}</div>

The 
name
 argument is optional and is inferred from the component‚Äôs name if not provided.
When 
<MyComponent1>
 is used in a template, it uses the default value assigned in the Vuetify config:
<
template
>

  
<
MyComponent1
 
/>
 
<!-- I am bar -->


</
template
>


#
Nested defaults
It is possible to assign nested defaults within your component chain. This provides you with countless ways to configure your application and its components.
Let‚Äôs expand on the previous 
example
 by creating a new component, 
<MyComponent2>
 that uses 
<MyComponent1>
:
 src/components/MyComponent2.vue
<
template
>

  
<
MyComponent1
 
/>


</
template
>



<
script
 
setup
>

  
import
 MyComponent1 
from
 
'./MyComponent1.vue'


</
script
>


Now, let‚Äôs add 
<MyComponent2>
 to the Vuetify defaults configuration object and assign a default value to 
foo
 prop of all nested 
<MyComponent1>
 components:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
defaults
:
 
{

    
MyComponent
:
 
{
 
foo
:
 
'bar'
 
}
,


    
MyComponent2
:
 
{

      
MyComponent
:
 
{
 
foo
:
 
'baz'
 
}
,

    
}

  
}


}
)


Head back to the 
MyComponent2.vue
 file and import & invoke the 
useDefaults
 composable:
 src/components/MyComponent2.vue
<
template
>

  
<
div
>

    
<
slot
 
/>

  
</
div
>


</
template
>



<
script
 
setup
>

  
import
 MyComponent1 
from
 
'./MyComponent1.vue'

  
import
 
{
 useDefaults 
}
 
from
 
'vuetify'


  
useDefaults
(
)


</
script
>


Finally, add both new components to a template and inspect the output:
<
template
>

  
<
v-app
>

    
<
v-main
>

      
<
MyComponent1
 
/>
 
<!-- I am bar -->


      
<
MyComponent2
>

        
<
MyComponent1
 
/>
 
<!-- I am baz -->

      
</
MyComponent2
>

    
</
v-main
>

  
</
v-app
>


</
template
>



<
script
 
setup
>

  
import
 MyComponent1 
from
 
'./MyComponent1.vue'

  
import
 MyComponent2 
from
 
'./MyComponent2.vue'


</
script
>


Now, whenever 
<MyComponent1>
 is used within the 
<MyComponent2>
 component, it has a different assigned default value.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Accessibility (a11y)
Features
Treeshaking
Features
Blueprints
Features
Display & Platform
Icon Fonts
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/icon-fonts/#usage:














Icon Fonts ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
Installing icon fonts
Material Design Icons
MDI - CSS
MDI - JS SVG
MDI - Icon search
Material Icons
Material Icons - CSS
Font Awesome
FA 5 - CSS
FA 4 - CSS
FA 5 - SVG
Built-in aliases
Multiple icon sets
Creating a custom icon set
Extending available aliases
Sponsors
Support
#
Icon Fonts
Out of the box, Vuetify supports 4 popular icon font libraries‚Äî
Material Design Icons
, 
Material Icons
, 
Font Awesome 4
 and 
Font Awesome 5
.
Report a Bug
#
Usage
To change your font library, import one of the pre-defined icon sets or provide your own.
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 aliases
,
 mdi 
}
 
from
 
'vuetify/iconsets/mdi'



export
 
default
 
createVuetify
(
{

  
icons
:
 
{

    
defaultSet
:
 
'mdi'
,

    aliases
,

    
sets
:
 
{

      mdi
,

    
}
,

  
}
,


}
)


<
template
>

  
<
v-icon
 
icon
=
"
mdi-home
"
 
/>


</
template
>


In the above examples we import the default 
mdi
 icon set and its corresponding aliases. These aliases reference commonly used types of icons that are utilized by Vuetify components.
While it is still possible to supply the icon value through the default slot in Vuetify 3.0 (
<v-icon>mdi-home</v-icon>
), we recommend using the 
icon
 prop instead.
#
Installing icon fonts
You are required to include the specified icon library (even when using the default icons from 
Material Design Icons
). This can be done by including a CDN link or importing the icon library into your application.
In this page ‚ÄúMaterial Icons‚Äù is used to refer to the 
official google icons
 and ‚ÄúMaterial Design Icons‚Äù refers to the 
extended third-party library
#
Material Design Icons
This is the default icon set used by Vuetify. It supports local installation with a build process or a CDN link. The following shows how to add the CDN link to your 
index.html
:
#
MDI - CSS
<
link
 
href
=
"
https://cdn.jsdelivr.net/npm/@mdi/font@5.x/css/materialdesignicons.min.css
"
 
rel
=
"
stylesheet
"
>


Or as a local dependency:
pnpm
yarn
npm
bun
pnpm
 
add
 @mdi/font 
-D


 src/plugins/vuetify.js
import
 
'@mdi/font/css/materialdesignicons.css'
 
// Ensure you are using css-loader


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
icons
:
 
{

    
defaultSet
:
 
'mdi'
,
 
// This is already the default value - only for display purposes

  
}
,


}
)


DO NOT
 use a CDN link without specifying a package 
version
. Failure to do so can result in unexpected changes to your application with new releases.
#
MDI - JS SVG
This is the recommended installation when optimizing your application for production, as only icons used for Vuetify components internally will be imported into your application bundle. You will need to provide your own icons for the rest of the app.
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 aliases
,
 mdi 
}
 
from
 
'vuetify/iconsets/mdi-svg'



export
 
default
 
createVuetify
(
{

  
icons
:
 
{

    
defaultSet
:
 
'mdi'
,

    aliases
,

    
sets
:
 
{

      mdi
,

    
}
,

  
}
,


}
)


@mdi/js
 or 
unplugin-icons
 are two alternatives to get the rest of the icons that you will need in your application.
If you want to stick with 
@mdi/js
, use the SVG paths as designated in 
@mdi/js
 and only import the icons that you need.
The following example shows how to use an imported icon within a 
.vue
 SFC template:
pnpm
yarn
npm
bun
pnpm
 
add
 @mdi/js 
-D


<
template
>

  
<
v-icon
 
:icon
=
"
mdiAccount
"
 
/>


</
template
>



<
script
 
setup
>

  
import
 
{
 mdiAccount 
}
 
from
 
'@mdi/js'


</
script
>


Or the icons you want to use can be added as aliases to simplify reuse:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 aliases
,
 mdi 
}
 
from
 
'vuetify/iconsets/mdi-svg'


import
 
{
 mdiAccount 
}
 
from
 
'@mdi/js'



export
 
default
 
createVuetify
(
{

  
icons
:
 
{

    
defaultSet
:
 
'mdi'
,

    
aliases
:
 
{

      
...
aliases
,

      
account
:
 mdiAccount
,

    
}
,

    
sets
:
 
{

      mdi
,

    
}
,

  
}
,


}
)


<
template
>

  
<
v-icon
 
icon
=
"
$account
"
 
/>


</
template
>


#
MDI - Icon search
Use this tool to search for any Material Design Icons and copy them to your clipboard by clicking the item.
mdi-
#
Material Icons
For projects without a build process, it is recommended to import the icons from CDN.
#
Material Icons - CSS
<
link
 
href
=
"
https://fonts.googleapis.com/css?family=Material+Icons
"
 
rel
=
"
stylesheet
"
>


Some Material Icons are missing by default. For example, 
person
 and 
person_outline
 are available, but 
visibility_outline
 isn‚Äôt, while 
visibility
 is. To use the missing icons, replace the existing 
<link>
 with the following:
<
link

  
rel
=
"
stylesheet
"

  
href
=
"
https://fonts.googleapis.com/css?family=Material+Icons|Material+Icons+Outlined|Material+Icons+Two+Tone|Material+Icons+Round|Material+Icons+Sharp
"


/>


Alternatively, it is possible to install locally using yarn or npm. Keep in mind that this is not an official google repository and may not contain all icons.
pnpm
yarn
npm
bun
pnpm
 
add
 material-design-icons-iconfont 
-D


 src/plugins/vuetify.js
import
 
'material-design-icons-iconfont/dist/material-design-icons.css'
 
// Ensure your project is capable of handling css files


import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 aliases
,
 md 
}
 
from
 
'vuetify/iconsets/md'



export
 
default
 
createVuetify
(
{

  
icons
:
 
{

    
defaultSet
:
 
'md'
,

    aliases
,

    
sets
:
 
{

      md
,

    
}
,

  
}
,


}
)


<
template
>

  
<
v-icon
 
icon
=
"
home
"
 
/>


</
template
>


#
Font Awesome
The easiest way to get started with 
FontAwesome
 is to use a CDN.
#
FA 5 - CSS
<
link
 
href
=
"
https://use.fontawesome.com/releases/v5.0.13/css/all.css
"
 
rel
=
"
stylesheet
"
>


To install locally you can pull in the 
free
 version of 
FontAwesome
 using your preferred package manager:
pnpm
yarn
npm
bun
pnpm
 
add
 @fortawesome/fontawesome-free 
-D


 src/plugins/vuetify.js
import
 
'@fortawesome/fontawesome-free/css/all.css'
 
// Ensure your project is capable of handling css files


import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 aliases
,
 fa 
}
 
from
 
'vuetify/iconsets/fa'



export
 
default
 
createVuetify
(
{

  
icons
:
 
{

    
defaultSet
:
 
'fa'
,

    aliases
,

    
sets
:
 
{

      fa
,

    
}
,

  
}
,


}
)


<
template
>

  
<
v-icon
 
icon
=
"
fas fa-home
"
 
/>


</
template
>


The JavaScript version (
all.js
) of the FontAwesome icons will 
NOT
 work with Vue
#
FA 4 - CSS
The easiest way to get started with 
FontAwesome
 is to use a CDN.
<
link
 
href
=
"
https://cdn.jsdelivr.net/npm/font-awesome@4.x/css/font-awesome.min.css
"
 
rel
=
"
stylesheet
"
>


To install FontAwesome 
4
 locally is the same as its newer version, just from a different package. You will be using the 
font-awesome
 package as opposed to 
@fortawesome
.
pnpm
yarn
npm
bun
pnpm
 
add
 font-awesome@4.7.0 
-D


 src/plugins/vuetify.js
import
 
'font-awesome/css/font-awesome.min.css'
 
// Ensure your project is capable of handling css files


import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 aliases
,
 fa 
}
 
from
 
'vuetify/iconsets/fa4'



export
 
default
 
createVuetify
(
{

  
icons
:
 
{

    
defaultSet
:
 
'fa'
,

    aliases
,

    
sets
:
 
{

      fa
,

    
}
,

  
}
,


}
)


<
template
>

  
<
v-icon
 
icon
=
"
fa-check
"
 
/>


</
template
>


#
FA 5 - SVG
Install the following packages.
pnpm
yarn
npm
bun
pnpm
 
add
 @fortawesome/fontawesome-svg-core @fortawesome/vue-fontawesome @fortawesome/free-solid-svg-icons @fortawesome/free-regular-svg-icons 
-D


Then register the global 
font-awesome-icon
 component and use the pre-defined 
fa-svg
 icon set. If you have access to Font Awesome Pro icons they can be added to the library in the same way.
 src/main.js
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 aliases
,
 fa 
}
 
from
 
'vuetify/iconsets/fa-svg'


import
 
{
 library 
}
 
from
 
'@fortawesome/fontawesome-svg-core'


import
 
{
 FontAwesomeIcon 
}
 
from
 
'@fortawesome/vue-fontawesome'


import
 
{
 fas 
}
 
from
 
'@fortawesome/free-solid-svg-icons'


import
 
{
 far 
}
 
from
 
'@fortawesome/free-regular-svg-icons'



const
 app 
=
 
createApp
(
)


app
.
component
(
'font-awesome-icon'
,
 FontAwesomeIcon
)
 
// Register component globally

library
.
add
(
fas
)
 
// Include needed solid icons

library
.
add
(
far
)
 
// Include needed regular icons



const
 vuetify 
=
 
createVuetify
(
{

  
icons
:
 
{

    
defaultSet
:
 
'fa'
,

    aliases
,

    
sets
:
 
{

      fa
,

    
}
,

  
}
,


}
)


app
.
use
(
vuetify
)


app
.
mount
(
'#app'
)


<
template
>

  
<
v-icon
 
icon
=
"
fas fa-home
"
 
/>


</
template
>


#
Built-in aliases
The following icons are available as aliases for use in Vuetify components:
Alias
Name
Preview
$calendar
mdi-calendar
$cancel
mdi-close-circle
$checkboxIndeterminate
mdi-minus-box
$checkboxOff
mdi-checkbox-blank-outline
$checkboxOn
mdi-checkbox-marked
$clear
mdi-close-circle
$close
mdi-close
$collapse
mdi-chevron-up
$complete
mdi-check
$delete
mdi-close-circle
$delimiter
mdi-circle
$dropdown
mdi-menu-down
$edit
mdi-pencil
$error
mdi-close-circle
$expand
mdi-chevron-down
$eyeDropper
mdi-eyedropper
$file
mdi-paperclip
$first
mdi-page-first
$info
mdi-information
$last
mdi-page-last
$loading
mdi-cached
$menu
mdi-menu
$minus
mdi-minus
$next
mdi-chevron-right
$plus
mdi-plus
$prev
mdi-chevron-left
$radioOff
mdi-radiobox-blank
$radioOn
mdi-radiobox-marked
$ratingEmpty
mdi-star-outline
$ratingFull
mdi-star
$ratingHalf
mdi-star-half-full
$sortAsc
mdi-arrow-up
$sortDesc
mdi-arrow-down
$subgroup
mdi-menu-down
$success
mdi-check-circle
$treeviewCollapse
mdi-menu-down
$treeviewExpand
mdi-menu-right
$unfold
mdi-unfold-more-horizontal
$warning
mdi-alert-circle
#
Multiple icon sets
Out of the box, Vuetify supports the use of multiple 
different
 icon sets at the same time. The following example demonstrates how to change the default icon font to Font Awesome (
fa
) while still maintaining access to the original Material Design Icons (
mdi
) through the use of a prefix:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 aliases
,
 fa 
}
 
from
 
'vuetify/iconsets/fa'


import
 
{
 mdi 
}
 
from
 
'vuetify/iconsets/mdi'



export
 
default
 
createVuetify
(
{

  
icons
:
 
{

    
defaultSet
:
 
'fa'
,

    aliases
,

    
sets
:
 
{

      fa
,

      mdi
,

    
}
,

  
}
,


}
)


<
template
>

  
<
v-icon
 
icon
=
"
fas fa-plus
"
 
/>
 // This renders a FontAwesome icon
  
<
v-icon
 
icon
=
"
mdi:mdi-minus
"
 
/>
 // This renders a MDI icon

</
template
>


It is not necessary to provide a prefix (such as 
mdi:
) for icons from the default icon set
#
Creating a custom icon set
An icon set consists of an object with one property 
component
 which should be a functional component that receives props of type 
IconsProps
, and renders an icon.
In order to use a custom set as the default icon set, you must also add the necessary 
aliases
 that correspond to values used by Vuetify components.
 src/iconsets/custom.ts
import
 
{
 h 
}
 
from
 
'vue'


import
 
type
 
{
 IconSet
,
 IconAliases
,
 IconProps 
}
 
from
 
'vuetify'



const
 aliases
:
 IconAliases 
=
 
{

  collapse
:
 
'...'
,

  complete
:
 
'...'
,

  cancel
:
 
'...'
,

  close
:
 
'...'
,

  
delete
:
 
'...'
,

  clear
:
 
'...'
,

  success
:
 
'...'
,

  info
:
 
'...'
,

  warning
:
 
'...'
,

  error
:
 
'...'
,

  prev
:
 
'...'
,

  next
:
 
'...'
,

  checkboxOn
:
 
'...'
,

  checkboxOff
:
 
'...'
,

  checkboxIndeterminate
:
 
'...'
,

  delimiter
:
 
'...'
,

  sort
:
 
'...'
,

  expand
:
 
'...'
,

  menu
:
 
'...'
,

  subgroup
:
 
'...'
,

  dropdown
:
 
'...'
,

  radioOn
:
 
'...'
,

  radioOff
:
 
'...'
,

  edit
:
 
'...'
,

  ratingEmpty
:
 
'...'
,

  ratingFull
:
 
'...'
,

  ratingHalf
:
 
'...'
,

  loading
:
 
'...'
,

  first
:
 
'...'
,

  last
:
 
'...'
,

  unfold
:
 
'...'
,

  file
:
 
'...'
,

  plus
:
 
'...'
,

  minus
:
 
'...'
,


}



const
 custom
:
 IconSet 
=
 
{

  
component
:
 
(
props
:
 IconProps
)
 
=>
 
h
(
...
)
,


}



export
 
{
 aliases
,
 custom 
}


 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 aliases
,
 custom 
}
 
from
 
'../iconsets/custom'



export
 
default
 
createVuetify
(
{

  
icons
:
 
{

    
defaultSet
:
 
'custom'
,

    aliases
,

    
sets
:
 
{

      custom
,

    
}
,

  
}
,


}
)


#
Extending available aliases
If you are developing custom Vuetify components, you can extend the 
aliases
 object to utilize the same functionality that internal Vuetify components use. Icon aliases are referenced with an initial 
$
 followed by the name of the alias, e.g. 
$product
.
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 aliases
,
 mdi 
}
 
from
 
'vuetify/iconsets/mdi'



export
 
default
 
createVuetify
(
{

  
icons
:
 
{

    
aliases
:
 
{

      
...
aliases
,

      
product
:
 
'mdi-dropbox'
,

      
support
:
 
'mdi-lifebuoy'
,

    
}
,

  
}
,


}
)


<
template
>

  
<
v-icon
 
icon
=
"
$product
"
 
/>

  
<
v-icon
 
icon
=
"
$support
"
 
/>


</
template
>


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Icons
Components
Buttons
Components
Avatars
Components
Global configuration
Internationalization (i18n)
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/internationalization/#getting-started:














Internationalization (i18n) ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Getting started
API
Scoped languages
RTL
Creating a custom locale
Custom Vuetify components
vue-i18n
Supported languages
Sponsors
Support
#
Internationalization (i18n)
Vuetify supports language Internationalization (i18n) of its components.
Report a Bug
When bootstrapping your application you can specify available locales and the default locale with the 
defaultLocale
 option. The 
locale
 service also supports easy integration with 
vue-i18n
. Using a locale that has an RTL (right-to-left) language also affects the directionality of the Vuetify components.
#
Getting started
To set the available locale messages or the default locale, supply the 
locale
 option when installing Vuetify.
 main.js
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



// Translations provided by Vuetify


import
 
{
 pl
,
 zhHans 
}
 
from
 
'vuetify/locale'



// Your own translation file


import
 sv 
from
 
'./i18n/vuetify/sv'



const
 app 
=
 
createApp
(
)



const
 vuetify 
=
 
createVuetify
(
{

  
locale
:
 
{

    
locale
:
 
'zhHans'
,

    
fallback
:
 
'sv'
,

    
messages
:
 
{
 zhHans
,
 pl
,
 sv 
}
,

  
}
,


}
)


app
.
use
(
vuetify
)


app
.
mount
(
'#app'
)


You can change the locale during runtime by using the 
useLocale
 composable.
 Composition.vue
<
script
 
setup
>

  
import
 
{
 useLocale 
}
 
from
 
'vuetify'


  
const
 
{
 current 
}
 
=
 
useLocale
(
)


  
function
 
changeLocale
 
(
locale
)
 
{

    current
.
value 
=
 locale
  
}


</
script
>


If you are still using the Options API, you can access the locale settings on 
this.$vuetify.locale
.
 Options.vue
<
script
>

  
export
 
default
 
{

    
methods
:
 
{

      
changeLocale
 
(
locale
)
 
{

        
this
.
$vuetify
.
locale
.
current 
=
 locale
      
}
,

    
}
,

  
}


</
script
>


#
API
Feature
Description
useLocale
The locale composable is used
v-locale-provider
The locale provider component is used to scope a portion of your application to a different locale than the default one
Toggle Inline API
#
Scoped languages
Using the 
v-locale-provider
 component it is possible to scope a portion of your application to a different locale than the default one.
 src/App.vue
<
template
>

  
<
v-app
>

    
<
v-select
>
</
v-select
>
 
<!-- Will use default locale -->


    
<
v-locale-provider
 
locale
=
"
ja
"
>

      
<
v-select
>
</
v-select
>
 
<!-- Will use ja locale -->

    
</
v-locale-provider
>

  
</
v-app
>


</
template
>


#
RTL
RTL (Right To Left) support is built in for all localizations that ship with Vuetify. If a 
supported language
 is flagged as RTL, all content directions are automatically switched. See the 
next section
 for information on how to add RTL support to a custom locale.
The following example demonstrates how to force RTL for a specific section of your content, without switching the current language, by using the 
v-locale-provider
 component:
 src/App.vue
<
v-app
>

  
<
v-card
>
...
</
v-card
>
 
<!-- default locale used here -->


  
<
v-locale-provider
 
rtl
>

    
<
v-card
>
...
<
v-card
>
 
<!-- default locale used here, but with RTL active -->

  
</
v-locale-provider
>


</
v-app
>


#
Creating a custom locale
To create your own locale messages, copy and paste the content of 
vuetify/src/locale/en.ts
 to a new file, and change the localized strings. You can also specify if they should be displayed RTL or not by using the 
rtl
 property of the locale options.
 src/locales/customLocale.js
export
 
default
 
{

  
badge
:
 
'...'
,

  
close
:
 
'...'
,

  
...


}


 src/main.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 customLocale 
from
 
'./locales/customLocale'



const
 vuetify 
=
 
createVuetify
(
{

  
locale
:
 
{

    
locale
:
 
'customLocale'
,

    
messages
:
 
{
 customLocale 
}
,

    
rtl
:
 
{

      
customLocale
:
 
true
,

    
}
,

  
}
,


}
)


#
Custom Vuetify components
If you are building custom Vuetify components that need to hook into the locale service, you can use the 
t
 function from the 
useLocale
 composable, or the 
$vuetify.locale
 property when using Options API.
 Component.vue
<
template
>

  
<
div
 
class
=
"
my-component
"
>

    {{ text }}
  
</
div
>


</
template
>



<
script
 
setup
>

  
import
 
{
 useLocale 
}
 
from
 
'vuetify'


  
const
 
{
 t 
}
 
=
 
useLocale
(
)

  
const
 text 
=
 
t
(
'$vuetify.my-component.text'
)


</
script
>


The Vuetify locale service only provides a basic translation function 
t
, and should really only be used for internal or custom Vuetify components. It is recommended that you use a proper i18n library such as 
vue-i18n
 in your own application. Vuetify does provide support for integrating with other libraries.
#
vue-i18n
If you are using the vue-i18n library, you can very easily integrate it with Vuetify. This allows you to keep all of your translations in one place. Simply create an entry for $vuetify within your messages and add the corresponding language changes. Then hook up vue-i18n to Vuetify by using the provided adapter function (as seen in the example below).
 src/main.js
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 createVueI18nAdapter 
}
 
from
 
'vuetify/locale/adapters/vue-i18n'


import
 
{
 createI18n
,
 useI18n 
}
 
from
 
'vue-i18n'


import
 
{
 en
,
 sv 
}
 
from
 
'vuetify/locale'



const
 messages 
=
 
{

  
en
:
 
{

    
$vuetify
:
 
{

      
...
en
,

      
dataIterator
:
 
{

        
rowsPerPageText
:
 
'Items per page:'
,

        
pageText
:
 
'{0}-{1} of {2}'
,

      
}
,

    
}
,

  
}
,

  
sv
:
 
{

    
$vuetify
:
 
{

      
...
sv
,

      
dataIterator
:
 
{

        
rowsPerPageText
:
 
'Element per sida:'
,

        
pageText
:
 
'{0}-{1} av {2}'
,

      
}
,

    
}
,

  
}
,


}



const
 i18n 
=
 
createI18n
(
{

  
legacy
:
 
false
,
 
// Vuetify does not support the legacy mode of vue-i18n

  
locale
:
 
'sv'
,

  
fallbackLocale
:
 
'en'
,

  messages
,


}
)



const
 vuetify 
=
 
createVuetify
(
{

  
locale
:
 
{

    
adapter
:
 
createVueI18nAdapter
(
{
 i18n
,
 useI18n 
}
)
,

  
}
,


}
)



const
 app 
=
 
createApp
(
)


app
.
use
(
i18n
)

app
.
use
(
vuetify
)


app
.
mount
(
'#app'
)


#
Supported languages
Currently Vuetify provides translations in the following languages:
af
 - Afrikaans (Afrikaans)
ar
 - Arabic (ÿßŸÑÿπÿ±ÿ®Ÿäÿ©)
az
 - Azerbaijani (Az…ôrbaycan)
bg
 - Bulgarian (–±—ä–ª–≥–∞—Ä—Å–∫–∏)
ca
 - Catalan (catal√†)
ckb
 - Central Kurdish (⁄©Ÿàÿ±ÿØ€å)
cs
 - Czech (ƒçe≈°tina)
da
 - Danish (Dansk)
de
 - German (Deutsch)
el
 - Greek (ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨)
en
 - English
es
 - Spanish (Espa√±ol)
et
 - Estonian (eesti)
fa
 - Persian (ŸÅÿßÿ±ÿ≥€å)
fi
 - Finnish (suomi)
fr
 - French (Fran√ßais)
he
 - Hebrew (◊¢◊ë◊®◊ô◊™)
hr
 - Croatian (hrvatski jezik)
hu
 - Hungarian (magyar)
id
 - Indonesian (Indonesian)
it
 - Italian (Italiano)
ja
 - Japanese (Êó•Êú¨Ë™û)
km
 - Khmer (·ûÅ·üí·ûò·üÇ·ûö)
ko
 - Korean (ÌïúÍµ≠Ïñ¥)
lt
 - Lithuanian (lietuvi≈≥ kalba)
lv
 - Latvian (latvie≈°u valoda)
nl
 - Dutch (Nederlands)
no
 - Norwegian (Norsk)
pl
 - Polish (jƒôzyk polski)
pt
 - Portuguese (Portugu√™s)
ro
 - Romanian (Rom√¢nƒÉ)
ru
 - Russian (–†—É—Å—Å–∫–∏–π)
sk
 - Slovak (slovenƒçina)
sl
 - Slovene (slovenski jezik)
srCyrl
 - Serbian (—Å—Ä–ø—Å–∫–∏ —ò–µ–∑–∏–∫)
srLatn
 - Serbian (srpski jezik)
sv
 - Swedish (svenska)
th
 - Thai (‡πÑ‡∏ó‡∏¢)
tr
 - Turkish (T√ºrk√ße)
uk
 - Ukrainian (–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞)
vi
 - Vietnamese (Ti·∫øng Vi·ªát)
zhHans
 - Chinese (‰∏≠Êñá)
zhHant
 - Chinese (Ê≠£È´î‰∏≠Êñá)
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Accessibility (a11y)
Features
Locale providers
Components
Browser support
Getting started
Icon Fonts
Programmatic scrolling
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/scrolling/#usage:














Programmatic scrolling ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Sponsors
Support
#
Programmatic scrolling
Handle scrolling within your application by using the 
goTo
 function.
Report a Bug
Open issues
View on GitHub
ads via vuetify
This feature was introduced in 
v3.5.0 (Polaris)
#
Usage
The 
goTo
 method takes two parameters 
target
 and 
options
. 
target
 can be either a pixel offset from the top of the page, a valid css selector, or an element reference. 
options
 is an object that includes 
duration
, 
easing
, 
container
, and 
offset
.
Target
By Number
Target
Number
Number
Easing
easeInOutCubic
Easing
Duration
Duration
Offset
0
Go To
Reset
Heading 1
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Card 1
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem! Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Heading 2
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Card 2
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem! Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Heading 3
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Card 3
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem! Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Heading 4
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Card 4
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem! Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Back to Top
#
API
Directive
Description
useGoTo
The useGoTo composable
Toggle Inline API
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Scroll
Directives
Application layout
Features
Slide groups
Components
Internationalization (i18n)
SASS variables
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/sass-variables/#installation:














SASS variables ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Installation
Basic usage
Component specific variables
Variable API
Usage in templates
Disabling utility classes
Disabling color packs
Enabling CSS cascade layers
Caveats
Duplicated CSS
Build performance
Symlinks
sass-loader with api: 'modern'
Sponsors
Support
#
SASS variables
Vuetify uses 
SASS/SCSS
 to craft the style and appearance of all aspects of the framework.
Report a Bug
It is recommended to familiarize yourself with the 
Treeshaking
 guide before continuing.
#
Installation
Vuetify works out of the box without any additional compilers needing to be installed but does support advanced use-cases such as modifying the underlying variables of the framework. Vite provides built-in support for sass, less and stylus files without the need to install Vite-specific plugins for them; just the corresponding pre-processor itself.
To begin modifying Vuetify‚Äôs internal variables, install the 
sass
 pre-processor:
pnpm
yarn
npm
bun
  
pnpm
 
install
 
-D
 sass-loader sass

For additional details about css-pre-processors, please refer to the official vite page at: 
https://vitejs.dev/guide/features.html#css-pre-processors
 or official vue-cli-page at: 
https://cli.vuejs.org/guide/css.html#pre-processors
#
Basic usage
There are many SASS variables such as 
font size
, 
font family
, and 
line height
 that can be configured globally. An extensive list of configurable global SASS variables can be found 
here
. To start, create a 
main.scss
 file in your 
src/styles
 directory and update the style import within your 
vuetify.js
 file:
 src/styles/main.scss
@use
 
'vuetify'
 
with
 
(

  
// variables go here


)
;


 src/plugins/vuetify.js
-
 import 'vuetify/styles'

+
 import '@/styles/main.scss'

Within your style file, import the Vuetify styles and specify the variables you want to override, that‚Äôs it.
'vuetify'
 should be used for 
global SASS variable
.
'vuetify/settings'
 should be used for vuetify 
component SASS Variables
.
'vuetify/styles'
 should not be used in sass files as it resolves to precompiled css (
vitejs/vite#7809
). 
'vuetify'
 and 
'vuetify/settings'
 are valid and safe to use
#
Component specific variables
Customizing variables used in components is a bit more complex and requires the use of a special build plugin.
Follow the plugin setup guide from 
treeshaking
 then add 
styles.configFile
 to the plugin options:
 vite.config.js
vuetify
(
{

  
styles
:
 
{

    
configFile
:
 
'src/styles/settings.scss'
,

  
}
,


}
)


 src/styles/settings.scss
@use
 
'vuetify/settings'
 
with
 
(

  
$button-height
:
 40px
,


)
;


configFile
 will be resolved relative to the project root, and loaded before each of vuetify‚Äôs stylesheets. If you were using the basic technique from above, make sure to either:
Remove it and switch back to 
import 'vuetify/styles'
, or
Add 
@use './settings'
 before 
@use 'vuetify'
 in 
main.scss
 and remove the 
with
 block from 
@use 'vuetify'
.
You can keep 
main.scss
 for other style overrides but don‚Äôt do both 
@use 'vuetify'
 and 
import 'vuetify/styles'
 or you‚Äôll end up with duplicated styles.
#
Variable API
There are many SASS/SCSS variables that can be customized across the entire Vuetify framework. You can browse all the variables using the tool below:
Available SASS variables are located on each component‚Äôs API page.
VBtn SASS Variables
#
Usage in templates
You can access 
global
 and per-component variables in Vue templates simply by importing the settings file:
 Comp1.vue
<
style
 
lang
=
"
scss
"
>

  
@use
 
'./settings'
;


  
.my-button
 
{

    
height
:
 settings.$button-height
;

  
}


</
style
>


Keep in mind that to obtain settings from Vuetify, you must forward its variables from within your local stylesheet. In the following example we modify 
settings.scss
 to 
forward
 instead of 
use
:
 src/styles/settings.scss
-
 @use 'vuetify/settings' with (

+
 @forward 'vuetify/settings' with (

#
Disabling utility classes
Utility classes are a powerful feature of Vuetify, but they can also be unnecessary for some projects. Each utility class is generated with a set of options that are defined 
here
. Disable individual classes by setting their corresponding variable to 
false
:
 src/styles/settings.scss
@forward
 
'vuetify/settings'
 
with
 
(

  
$utilities
:
 
(

    
"align-content"
:
 
false
,

    
"align-items"
:
 
false
,

    
"align-self"
:
 
false
,

    
"border-bottom"
:
 
false
,

    
"border-end"
:
 
false
,

    
"border-opacity"
:
 
false
,

    
"border-start"
:
 
false
,

    
"border-style"
:
 
false
,

    
"border-top"
:
 
false
,

    
"border"
:
 
false
,

    
"display"
:
 
false
,

    
"flex-direction"
:
 
false
,

    
"flex-grow"
:
 
false
,

    
"flex-shrink"
:
 
false
,

    
"flex-wrap"
:
 
false
,

    
"flex"
:
 
false
,

    
"float-ltr"
:
 
false
,

    
"float-rtl"
:
 
false
,

    
"float"
:
 
false
,

    
"font-italic"
:
 
false
,

    
"font-weight"
:
 
false
,

    
"justify-content"
:
 
false
,

    
"margin-bottom"
:
 
false
,

    
"margin-end"
:
 
false
,

    
"margin-left"
:
 
false
,

    
"margin-right"
:
 
false
,

    
"margin-start"
:
 
false
,

    
"margin-top"
:
 
false
,

    
"margin-x"
:
 
false
,

    
"margin-y"
:
 
false
,

    
"margin"
:
 
false
,

    
"negative-margin-bottom"
:
 
false
,

    
"negative-margin-end"
:
 
false
,

    
"negative-margin-left"
:
 
false
,

    
"negative-margin-right"
:
 
false
,

    
"negative-margin-start"
:
 
false
,

    
"negative-margin-top"
:
 
false
,

    
"negative-margin-x"
:
 
false
,

    
"negative-margin-y"
:
 
false
,

    
"negative-margin"
:
 
false
,

    
"order"
:
 
false
,

    
"overflow-wrap"
:
 
false
,

    
"overflow-x"
:
 
false
,

    
"overflow-y"
:
 
false
,

    
"overflow"
:
 
false
,

    
"padding-bottom"
:
 
false
,

    
"padding-end"
:
 
false
,

    
"padding-left"
:
 
false
,

    
"padding-right"
:
 
false
,

    
"padding-start"
:
 
false
,

    
"padding-top"
:
 
false
,

    
"padding-x"
:
 
false
,

    
"padding-y"
:
 
false
,

    
"padding"
:
 
false
,

    
"rounded-bottom-end"
:
 
false
,

    
"rounded-bottom-start"
:
 
false
,

    
"rounded-bottom"
:
 
false
,

    
"rounded-end"
:
 
false
,

    
"rounded-start"
:
 
false
,

    
"rounded-top-end"
:
 
false
,

    
"rounded-top-start"
:
 
false
,

    
"rounded-top"
:
 
false
,

    
"rounded"
:
 
false
,

    
"text-align"
:
 
false
,

    
"text-decoration"
:
 
false
,

    
"text-mono"
:
 
false
,

    
"text-opacity"
:
 
false
,

    
"text-overflow"
:
 
false
,

    
"text-transform"
:
 
false
,

    
"typography"
:
 
false
,

    
"white-space"
:
 
false
,

  
)
,


)
;


To disable all utility classes, set the entire 
$utilities
 variable to 
false
:
 src/styles/settings.scss
@forward
 
'vuetify/settings'
 
with
 
(

  
$utilities
:
 
false
,


)
;


#
Disabling color packs
Color packs are handy for quickly applying a color to a component but mostly unused in production. To disable them, set the 
$color-pack
 variable to 
false
:
 src/styles/settings.scss
@forward
 
'vuetify/settings'
 
with
 
(

  
$color-pack
:
 
false
,


)
;


#
Enabling CSS cascade layers
This feature was introduced in 
v3.6.0 (Nebula)
Cascade layers
 are a modern CSS feature that makes it easier to write custom styles without having to deal with specificity issues and 
!important
. This will be included by default in Vuetify 4 but can optionally be used now:
 src/styles/settings.scss
@forward
 
'vuetify/settings'
 
with
 
(

  
$layers
:
 
true
,


)
;


Import order of stylesheets becomes much more important with layers enabled, 
import 'vuetify/styles'
 or a file containing 
@use 'vuetify'
 
must
 be loaded 
before
 any components or the CSS reset will take precedence over component styles and break everything. If you have separate plugin files make sure to import vuetify‚Äôs before 
App.vue
.
Your own styles will always
*
 override vuetify‚Äôs if you don‚Äôt use 
@layer
 yourself, or you can specify an order for custom layers in a stylesheet loaded before vuetify.
 src/styles/layers.css
@layer
 base
,
 vuetify
,
 overrides
;


* Layers invert 
!important
, so anything trying to override an important vuetify style must also be in a layer.
#
Caveats
When using sass variables, there are a few considerations to be aware of.
#
Duplicated CSS
Placing actual styles or importing a regular stylesheet into the settings file will cause them to be duplicated everywhere the file is imported. Only put variables, mixins, and functions in the settings file, styles should be placed in the main stylesheet or loaded another way.
#
Build performance
Vuetify loads precompiled CSS by default, enabling variable customization will switch to the base SASS files instead which must be recompiled with your project. This can be a performance hit if you‚Äôre using more than a few vuetify components, and also forces you to use the same SASS compiler version as us.
Performance can be improved with Vite by using the modern sass compiler. Replace your 
sass
 dependency with 
sass-embedded
, update vite to 5.4 or later, and set 
css.preprocessorOptions.sass.api
 to 
'modern-compiler'
 in the vite config.
#
Symlinks
PNPM and Yarn 2+ create symlinks to library files instead of copying them to node_modules, sass doesn‚Äôt seem to like this and sometimes doesn‚Äôt apply the configuration.
#
sass-loader with 
api: 'modern'
You might have to write a custom importer plugin to load the settings file.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Material color palette
Styles
Theme
Features
Treeshaking
Features
Programmatic scrolling
Theme
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/theme/#api:














Theme ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
API
Setup
Javascript
Typescript
Changing theme
Custom theme colors
Color variations
Disable theme
Theme object structure
CSP Nonce
Implementation
Sponsors
Support
#
Theme configuration
Customize your application‚Äôs default text colors, surfaces, and more. Easily modify your theme programmatically in real time. Vuetify comes with standard support for light and dark variants.
Report a Bug
ads via vuetify
#
API
Feature
Description
useTheme
The theme composable allows you to get information about, and modify the current theme
v-theme-provider
The theme provider component modifies the theme of all its children
Toggle Inline API
#
Setup
Vuetify comes with two themes pre-installed, 
light
 and 
dark
. To set the default theme of your application, use the 
defaultTheme
 option.
#
Javascript
Example with only the 
defaultTheme
 value
 src/plugins/vuetify.js
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
theme
:
 
{

    
defaultTheme
:
 
'dark'

  
}


}
)


Adding new themes is as easy as defining a new property in the 
theme.themes
 object. A theme is a collection of colors and options that change the overall look and feel of your application. One of these options designates the theme as being either a 
light
 or 
dark
 variation. This makes it possible for Vuetify to implement Material Design concepts such as elevated surfaces having a lighter overlay color the higher up they are. Find out more about dark themes on the official 
Material Design
 page.
 src/plugins/vuetify.js
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



const
 myCustomLightTheme 
=
 
{

  
dark
:
 
false
,

  
colors
:
 
{

    
background
:
 
'#FFFFFF'
,

    
surface
:
 
'#FFFFFF'
,

    
'surface-bright'
:
 
'#FFFFFF'
,

    
'surface-light'
:
 
'#EEEEEE'
,

    
'surface-variant'
:
 
'#424242'
,

    
'on-surface-variant'
:
 
'#EEEEEE'
,

    
primary
:
 
'#1867C0'
,

    
'primary-darken-1'
:
 
'#1F5592'
,

    
secondary
:
 
'#48A9A6'
,

    
'secondary-darken-1'
:
 
'#018786'
,

    
error
:
 
'#B00020'
,

    
info
:
 
'#2196F3'
,

    
success
:
 
'#4CAF50'
,

    
warning
:
 
'#FB8C00'
,

  
}
,

  
variables
:
 
{

    
'border-color'
:
 
'#000000'
,

    
'border-opacity'
:
 
0.12
,

    
'high-emphasis-opacity'
:
 
0.87
,

    
'medium-emphasis-opacity'
:
 
0.60
,

    
'disabled-opacity'
:
 
0.38
,

    
'idle-opacity'
:
 
0.04
,

    
'hover-opacity'
:
 
0.04
,

    
'focus-opacity'
:
 
0.12
,

    
'selected-opacity'
:
 
0.08
,

    
'activated-opacity'
:
 
0.12
,

    
'pressed-opacity'
:
 
0.12
,

    
'dragged-opacity'
:
 
0.08
,

    
'theme-kbd'
:
 
'#212529'
,

    
'theme-on-kbd'
:
 
'#FFFFFF'
,

    
'theme-code'
:
 
'#F5F5F5'
,

    
'theme-on-code'
:
 
'#000000'
,

  
}


}



export
 
default
 
createVuetify
(
{

  
theme
:
 
{

    
defaultTheme
:
 
'myCustomLightTheme'
,

    
themes
:
 
{

      myCustomLightTheme
,

    
}
,

  
}
,


}
)


#
Typescript
Example with only the 
defaultTheme
 value
 src/plugins/vuetify.ts
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  theme
:
 
{

    defaultTheme
:
 
'dark'
,

  
}
,


}
)


When using Typescript you may use the 
ThemeDefinition
 type to get type hints for the structure of the theme object.
 src/plugins/vuetify.ts
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify
,
 
type
 
ThemeDefinition
 
}
 
from
 
'vuetify'



const
 myCustomLightTheme
:
 ThemeDefinition 
=
 
{

  dark
:
 
false
,

  colors
:
 
{

    background
:
 
'#FFFFFF'
,

    surface
:
 
'#FFFFFF'
,

    primary
:
 
'#6200EE'
,

    
'primary-darken-1'
:
 
'#3700B3'
,

    secondary
:
 
'#03DAC6'
,

    
'secondary-darken-1'
:
 
'#018786'
,

    error
:
 
'#B00020'
,

    info
:
 
'#2196F3'
,

    success
:
 
'#4CAF50'
,

    warning
:
 
'#FB8C00'
,

  
}
,


}



export
 
default
 
createVuetify
(
{

  theme
:
 
{

    defaultTheme
:
 
'myCustomLightTheme'
,

    themes
:
 
{

      myCustomLightTheme
,

    
}
,

  
}
,


}
)


#
Changing theme
This is used when you need to change the theme during runtime
 src/App.vue
<
template
>

  
<
v-app
>

    
<
v-btn
 
@click
=
"
toggleTheme
"
>
toggle theme
</
v-btn
>

    ...
  
</
v-app
>


</
template
>



<
script
 
setup
>


import
 
{
 useTheme 
}
 
from
 
'vuetify'



const
 theme 
=
 
useTheme
(
)



function
 
toggleTheme
 
(
)
 
{

  theme
.
global
.
name
.
value 
=
 theme
.
global
.
current
.
value
.
dark 
?
 
'light'
 
:
 
'dark'


}


</
script
>


You should keep in mind that most of the Vuetify components support the 
theme
 prop. When used a new context is created for 
that
 specific component and 
all
 of its children. In the following example, the 
v-btn
 uses the 
dark
 theme because it is applied to its parent 
v-card
.
<
template
>

  
<
v-app
>

    
<
v-card
 
theme
=
"
dark
"
>

      
<!-- button uses dark theme -->

      
<
v-btn
>
foo
</
v-btn
>

    
</
v-card
>

  
</
v-app
>


</
template
>


You can use the 
<v-theme-provider>
 component to dynamically apply different themes to larger sections of your application, without having to set the 
theme
 prop on each individual component. In the following example, we apply a custom theme named 
high-contrast
.
<
template
>

  
<
v-app
>

    
<!-- uses the current default theme -->

    
<
v-card
>
...
</
v-card
>


    
<
v-theme-provider
 
theme
=
"
high-contrast
"
>

      
<!-- uses the high-contrast theme -->

      
<
v-card
>
...
</
v-card
>

      
<
v-btn
>
...
</
v-btn
>

    
</
v-theme-provider
>

  
</
v-app
>


</
template
>


#
Custom theme colors
The Vuetify theme system supports adding custom colors. When configuring the Vuetify theme settings, add your custom colors to the 
colors
 object and Vuetify will generate a number of CSS classes and variables for you to use in your application.
 src/plugins/vuetify.js
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
theme
:
 
{

    
defaultTheme
:
 
'myCustomTheme'
,

    
themes
:
 
{

      
myCustomTheme
:
 
{

        
dark
:
 
false
,

        
colors
:
 
{

          
...
,
 
// We have omitted the standard color properties here to emphasize the custom one that we've added

          
something
:
 
'#00ff00'
,

        
}
,

      
}
,

    
}
,

  
}
,


}
)


Custom properties for colors are a list of 
red, green, blue
, so the 
rgb()
 or 
rgba()
 function has to be used:
<
template
>

  
<
div
 
class
=
"
bg-something on-something
"
>
background color with appropriate text color contrast
</
div
>


  
<
div
 
class
=
"
text-something
"
>
text color
</
div
>


  
<
div
 
class
=
"
border-something
"
>
border color
</
div
>


</
template
>



<
style
>

  
.custom-class
 
{

    
background
:
 
rgb
(
var
(
--v-theme-something
)
)

    
color
:
 
rgba
(
var
(
--v-theme-on-something
)
,
 0.9
)

  
}


</
style
>


#
Color variations
The Vuetify theme system can help you generate any number of 
variations
 for the colors in your theme. The following example shows how to generate 1 lighten and 2 darken variants for the 
primary
 and 
secondary
 colors.
 src/plugins/vuetify.js
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
theme
:
 
{

    
defaultTheme
:
 
'myCustomTheme'
,

    
variations
:
 
{

      
colors
:
 
[
'primary'
,
 
'secondary'
]
,

      
lighten
:
 
1
,

      
darken
:
 
2
,

    
}
,

    
themes
:
 
{

      
//

    
}
,

  
}
,


}
)


<
template
>

  
<
div
 
class
=
"
text-primary-lighten-1
"
>
text color
</
div
>


  
<
div
 
class
=
"
text-primary-darken-1
"
>
text color
</
div
>


  
<
div
 
class
=
"
text-primary-darken-2
"
>
text color
</
div
>


</
template
>


#
Disable theme
The theme functionality can be disabled by setting the 
theme
 configuration property to 
false
. This prevents the creation of the Vuetify stylesheet, and theme classes will not be applied to components.
 src/plugins/vuetify.js
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
theme
:
 
false
,


}
)


#
Theme object structure
interface
 
ThemeInstance
 
{

  
/**
   * Raw theme objects
   * Can be mutated to add new themes or update existing colors
   */

  themes
:
 Ref
<
{
 
[
name
:
 
string
]
:
 ThemeDefinition 
}
>


  
/**
   * Name of the current theme
   * Inherited from parent components
   */

  
readonly
 name
:
 Ref
<
string
>


  
/** Processed theme object, includes automatically generated colors */

  
readonly
 current
:
 Ref
<
ThemeDefinition
>

  
readonly
 computedThemes
:
 Ref
<
{
 
[
name
:
 
string
]
:
 ThemeDefinition 
}
>


  
readonly
 global
:
 
{

    
/** Name of the current global theme */

    name
:
 Ref
<
string
>


    
/**
     * Processed theme object of the current global theme
     * Equivalent to `theme.computedThemes.value[theme.global.name.value]`
     */

    
readonly
 current
:
 Ref
<
ThemeDefinition
>

  
}


}


#
CSP Nonce
Pages with the 
script-src
 or 
style-src
 CSP rules enabled may require a 
nonce
 to be specified for embedded style tags.
<!-- Use with script-src -->

Content-Security-Policy: script-src 'self' 'nonce-dQw4w9WgXcQ'


<!-- Use with style-src -->

Content-Security-Policy: style-src 'self' 'nonce-dQw4w9WgXcQ'

// src/plugins/vuetify.js



import
 
{
createVuetify
}
 
from
 
'vuetify'



export
 
const
 vuetify 
=
 
createVuetify
(
{

  theme
:
 
{

    cspNonce
:
 
'dQw4w9WgXcQ'
,

  
}
,


}
)


#
Implementation
Vuetify generates theme styles at runtime according to the given configuration. The generated styles are injected into the 
<head>
 section of the DOM in a 
<style>
 tag with an 
id
 of 
vuetify-theme-stylesheet
.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Material color palette
Styles
Transitions
Styles
Wireframes
Getting started
SASS variables
Treeshaking
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/features/treeshaking/#automatic-treeshaking:














Treeshaking ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Automatic treeshaking
Manual imports
Limitations
Dynamic components
Import groups
Sponsors
Support
#
Treeshaking
Being a component framework, Vuetify will always grow horizontally. Depending on your project, a small bundle size may be a requirement.
Report a Bug
#
Automatic treeshaking
Treeshaking enables you to drastically lower your build size by only including the components you actually use in the final bundle. Vuetify comes with plugins for both 
Webpack
 and 
vite
 that enable automatic treeshaking.
Install 
webpack-plugin-vuetify
 or 
vite-plugin-vuetify
 then enable it in your bundler configuration. Make sure the vuetify plugin comes after the vue plugin or it won‚Äôt work correctly.
Vite
Webpack
Vue CLI
Nuxt
 vite.config.js
import
 vue 
from
 
'@vitejs/plugin-vue'


import
 vuetify 
from
 
'vite-plugin-vuetify'



export
 
default
 
{

  
plugins
:
 
[

    
vue
(
)
,

    
vuetify
(
)
,

  
]
,


}


And that‚Äôs it! Vuetify components and directives will be automatically imported into your application wherever they are used. If you had any wildcard imports they can now be removed.
 src/main.js
 
 import 'vuetify/styles'

 
 import { createVuetify } from 'vuetify'

-
 import * as components from 'vuetify/components'

-
 import * as directives from 'vuetify/directives'

#
Manual imports
Components can be manually imported when not using the loader plugin.
 src/plugins/vuetify.js
import
 
{
 createApp 
}
 
from
 
'vue'


import
 
{
 createVuetify 
}
 
from
 
'vuetify'


import
 
{
 VCard 
}
 
from
 
'vuetify/components/VCard'


import
 
{
 VRating 
}
 
from
 
'vuetify/components/VRating'


import
 
{
 VToolbar 
}
 
from
 
'vuetify/components/VToolbar'


import
 
{
 Ripple 
}
 
from
 
'vuetify/directives'



const
 vuetify 
=
 
createVuetify
(
{

  
components
:
 
{

    VCard
,

    VRating
,

    VToolbar
,

  
}
,

  
directives
:
 
{

    Ripple
,

  
}
,


}
)



export
 
default
 vuetify

You can also import components locally in .vue files, as seen below.
 Component.vue
<
template
>

  
<
v-card
>

    
<
v-card-title
>
...
</
v-card-title
>

    
<
v-card-text
>
...
</
v-card-text
>

  
</
v-card
>


</
template
>



<
script
 
setup
>

  
import
 
{
 VCard
,
 VCardText
,
 VCardTitle 
}
 
from
 
'vuetify/components/VCard'


</
script
>


#
Limitations
When using the loader plugin, there are a few scenarios which will require manually importing components.
#
Dynamic components
When using dynamic components the plugin is unable to parse which vuetify components are being rendered. This commonly occurs when using the built-in Vue 
<component>
. More information about dynamic components can be found in the official Vue 
documentation
.
Dynamic components using 
<component>
 can be registered locally:
 Component.vue
<
template
>

  
<
component
 
:is
=
"
button ? 'v-btn' : 'v-chip'
"
 
/>


</
template
>



<
script
 
setup
>

  
import
 
{
 VBtn 
}
 
from
 
'vuetify/components/VBtn'

  
import
 
{
 VChip 
}
 
from
 
'vuetify/components/VChip'

  
import
 
{
 shallowRef 
}
 
from
 
'vue'


  
const
 button 
=
 
shallowRef
(
false
)


</
script
>


#
Import groups
All components are available at both 
vuetify/components
 and 
vuetify/components/<group>
. Use of the latter is preferred however as it only loads files that are needed. Treeshaking will still work in production builds if you use 
vuetify/components
, but during development it will cause a performance hit by loading styles even for components you aren‚Äôt using.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
SASS variables
Features
Blueprints
Features
Why Vuetify?
Introduction
Theme
CSS Reset
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/css-reset/#bootstrapping:














CSS Reset ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Bootstrapping
Reset Features
Sponsors
Support
#
CSS Reset
Opinionated base styles for Vuetify projects.
#
Bootstrapping
ress is a modern CSS reset that applies a solid base for stylesheets. It is built on top of 
normalize.css
 and adds new features such as specifying 
font-family: monospace
 for 
<code>
 elements, removing all 
outlines
 from elements when hovering, and much much more. Additional information can be found on the 
ress GitHub repository
.
The Vuetify style reset is applied globally and affects default elements such as 
button
 and 
input
. This also includes anything located outside of the 
v-app
 component.
It can be disabled with 
sass variables
 by setting 
$reset: false
, but you may have to manually reset some styles for components to display correctly.
#
Reset Features
Below is a list of additional 
features
 that ress provides over the default 
normalize.css
 functionality
Apply 
box-sizing: border-box
 in all elements.
Reset 
padding
 and 
margin
 in all elements.
Specify 
background-repeat: no-repeat
 in all elements and pseudo elements.
Inherit 
text-decoration
 and 
vertical-align
 to 
::before
 and 
::after
.
Remove the 
outline
 when hovering in all browsers.
Specify 
font-family: monospace
 in code elements.
Reset 
border-radius
 in input elements.
Specify font inheritance of form elements.
Remove the default button styling in all browsers.
Specify textarea resizability to vertical.
Apply 
cursor: pointer
 to button elements.
Apply 
tab-size: 4
 in 
html
.
Style 
select
 like a standard input.
Style 
cursor
 by aria attributes.
Hide content from screens but not screen readers.
For a complete list of all applied styles, see the 
ress css stylesheet
.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Material color palette
Styles
Text and typography
Styles
SASS variables
Features
Treeshaking
Transitions
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/transitions/#api:














Transitions ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
API
Examples
Misc
Expand x
Fab
Fade
Scale
Scroll x
Scroll y
Slide x
Slide y
Todo list
Sponsors
Support
#
Transitions
Smooth animations help make a UI feel great. Using Vue‚Äôs transition system and re-usable functional components, you can easily control the motion of your application. Most components can have their transition altered through the 
transition
 prop.
#
API
Name
Description
v-expand-transition
The expand transition is used in Expansion Panels and List Groups. There is also a horizontal version available with 
v-expand-x-transition
.
v-fab-transition
An example of the fab transition can be found in the 
v-speed-dial
 component.
v-fade-transition
An example of the fade transition can be found on the Carousel component.
v-scale-transition
Many of Vuetify‚Äôs components contain a 
transition
 prop which allows you to specify your own.
v-scroll-x-transition
Scroll X transitions continue along the horizontal axis.
v-scroll-y-transition
Scroll Y transitions continue along the vertical axis.
v-slide-x-reverse-transition
Slide X reverse transitions slide in from the right.
v-slide-x-transition
Slide X transitions slide in from the left.
v-slide-y-reverse-transition
Slide Y reverse transitions slide in from the bottom.
v-slide-y-transition
Slide Y transitions slide in from the top.
v-tab-reverse-transition
Tab reverse transitions slide in from the right.
v-tab-transition
Tab transitions slide in from the left.
v-toggle-slide-x-reverse-transition
Toggle Slide X reverse transitions slide in from the right.
v-toggle-slide-x-transition
Toggle Slide X transitions slide in from the left.
v-toggle-slide-y-reverse-transition
Toggle Slide Y reverse transitions slide in from the bottom.
v-toggle-slide-y-transition
Toggle Slide Y transitions slide in from the top.
Toggle Inline API
#
Examples
#
Misc
#
Expand x
The expand transition is used in Expansion Panels and List Groups. There is also a horizontal version available with 
v-expand-x-transition
.
 Expand Transition 
 Expand X Transition 
#
Fab
An example of the fab transition can be found in the 
v-speed-dial
 component.
 Fab Transition 
#
Fade
An example of the fade transition can be found on the Carousel component.
 Fade Transition 
#
Scale
Many of Vuetify‚Äôs components contain a 
transition
 prop which allows you to specify your own.
 Scale Transition 
#
Scroll x
Scroll X transitions continue along the horizontal axis.
 Scroll X Transition 
 Scroll X Reverse Transition 
#
Scroll y
Scroll Y transitions continue along the vertical axis.
 Scroll Y Transition 
 Scroll Y Reverse Transition 
#
Slide x
Slide x transitions move along the horizontal axis.
 Slide X Transition 
 Slide X Reverse Transition 
#
Slide y
Animations use the application‚Äôs 
$primary-transition
.
 Slide Y Transition 
 Slide Y Reverse Transition 
#
Todo list
Using multiple custom transitions, it is easy to bring a simple todo list to life!
What are you working on?
What are you working on?
 Tasks:¬† 
2
 Remaining: 2
 Completed: 0
Foobar
Fizzbuzz
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Menus
Components
Material color palette
Styles
Expansion panels
Components
CSS Reset
Material color palette
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/colors/#classes:














Material color palette ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Classes
Javascript color pack
Sass color pack
Material colors
Sponsors
Support
#
Colors
Out of the box you get access to all colors in the 
Material Design specification
 through 
sass
 and 
javascript
. These values can be used within your style sheets, your component files and on actual components via the 
color
 prop.
#
Classes
Each color from the specification gets converted to a 
background
 and 
text
 variant for styling within your application through a class, e.g. 
<div class="bg-red">
 or 
<span class="text-red">
. These class colors are defined 
here
.
Lorem ipsum
Text colors also support 
darken
 and 
lighten
 variants using 
text-{color}-{lighten|darken}-{n}
 Lorem ipsum dolor sit amet, 
inciderint
 definitionem est ea, explicari prodesset eam id. Mazim doctus vix an. 
Amet causae probatus nec ex
. 
#
Javascript color pack
Vuetify has an optional javascript color pack that you can import and use within your application. This can also be used to help define your application‚Äôs theme.
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'



import
 colors 
from
 
'vuetify/util/colors'



export
 
default
 
createVuetify
(
{

  
theme
:
 
{

    
themes
:
 
{

      
light
:
 
{

        
dark
:
 
false
,

        
colors
:
 
{

          
primary
:
 colors
.
red
.
darken1
,
 
// #E53935

          
secondary
:
 colors
.
red
.
lighten4
,
 
// #FFCDD2

          
...

        
}

      
}
,

    
}
,

  
}
,


}
)


#
Sass color pack
While convenient, the color pack increases the CSS export size by ~30kb. Some projects may only require the classes that are created at runtime from the Vuetify 
theme
 system. To disable the color pack feature, follow 
sass variables
 and set 
$color-pack: false
.
 main.scss
@use
 
'vuetify'
 
with
 
(

  
$color-pack
:
 
false
,


)
;


#
Material colors
Below is a list of the Material design color palette grouped by primary color
red
red
#F44336
red-lighten-5
#FFEBEE
red-lighten-4
#FFCDD2
red-lighten-3
#EF9A9A
red-lighten-2
#E57373
red-lighten-1
#EF5350
red-darken-1
#E53935
red-darken-2
#D32F2F
red-darken-3
#C62828
red-darken-4
#B71C1C
red-accent-1
#FF8A80
red-accent-2
#FF5252
red-accent-3
#FF1744
red-accent-4
#D50000
pink
pink
#E91E63
pink-lighten-5
#FCE4EC
pink-lighten-4
#F8BBD0
pink-lighten-3
#F48FB1
pink-lighten-2
#F06292
pink-lighten-1
#EC407A
pink-darken-1
#D81B60
pink-darken-2
#C2185B
pink-darken-3
#AD1457
pink-darken-4
#880E4F
pink-accent-1
#FF80AB
pink-accent-2
#FF4081
pink-accent-3
#F50057
pink-accent-4
#C51162
purple
purple
#9C27B0
purple-lighten-5
#F3E5F5
purple-lighten-4
#E1BEE7
purple-lighten-3
#CE93D8
purple-lighten-2
#BA68C8
purple-lighten-1
#AB47BC
purple-darken-1
#8E24AA
purple-darken-2
#7B1FA2
purple-darken-3
#6A1B9A
purple-darken-4
#4A148C
purple-accent-1
#EA80FC
purple-accent-2
#E040FB
purple-accent-3
#D500F9
purple-accent-4
#AA00FF
deep-purple
deep-purple
#673AB7
deep-purple-lighten-5
#EDE7F6
deep-purple-lighten-4
#D1C4E9
deep-purple-lighten-3
#B39DDB
deep-purple-lighten-2
#9575CD
deep-purple-lighten-1
#7E57C2
deep-purple-darken-1
#5E35B1
deep-purple-darken-2
#512DA8
deep-purple-darken-3
#4527A0
deep-purple-darken-4
#311B92
deep-purple-accent-1
#B388FF
deep-purple-accent-2
#7C4DFF
deep-purple-accent-3
#651FFF
deep-purple-accent-4
#6200EA
indigo
indigo
#3F51B5
indigo-lighten-5
#E8EAF6
indigo-lighten-4
#C5CAE9
indigo-lighten-3
#9FA8DA
indigo-lighten-2
#7986CB
indigo-lighten-1
#5C6BC0
indigo-darken-1
#3949AB
indigo-darken-2
#303F9F
indigo-darken-3
#283593
indigo-darken-4
#1A237E
indigo-accent-1
#8C9EFF
indigo-accent-2
#536DFE
indigo-accent-3
#3D5AFE
indigo-accent-4
#304FFE
blue
blue
#2196F3
blue-lighten-5
#E3F2FD
blue-lighten-4
#BBDEFB
blue-lighten-3
#90CAF9
blue-lighten-2
#64B5F6
blue-lighten-1
#42A5F5
blue-darken-1
#1E88E5
blue-darken-2
#1976D2
blue-darken-3
#1565C0
blue-darken-4
#0D47A1
blue-accent-1
#82B1FF
blue-accent-2
#448AFF
blue-accent-3
#2979FF
blue-accent-4
#2962FF
light-blue
light-blue
#03A9F4
light-blue-lighten-5
#E1F5FE
light-blue-lighten-4
#B3E5FC
light-blue-lighten-3
#81D4FA
light-blue-lighten-2
#4FC3F7
light-blue-lighten-1
#29B6F6
light-blue-darken-1
#039BE5
light-blue-darken-2
#0288D1
light-blue-darken-3
#0277BD
light-blue-darken-4
#01579B
light-blue-accent-1
#80D8FF
light-blue-accent-2
#40C4FF
light-blue-accent-3
#00B0FF
light-blue-accent-4
#0091EA
cyan
cyan
#00BCD4
cyan-lighten-5
#E0F7FA
cyan-lighten-4
#B2EBF2
cyan-lighten-3
#80DEEA
cyan-lighten-2
#4DD0E1
cyan-lighten-1
#26C6DA
cyan-darken-1
#00ACC1
cyan-darken-2
#0097A7
cyan-darken-3
#00838F
cyan-darken-4
#006064
cyan-accent-1
#84FFFF
cyan-accent-2
#18FFFF
cyan-accent-3
#00E5FF
cyan-accent-4
#00B8D4
teal
teal
#009688
teal-lighten-5
#E0F2F1
teal-lighten-4
#B2DFDB
teal-lighten-3
#80CBC4
teal-lighten-2
#4DB6AC
teal-lighten-1
#26A69A
teal-darken-1
#00897B
teal-darken-2
#00796B
teal-darken-3
#00695C
teal-darken-4
#004D40
teal-accent-1
#A7FFEB
teal-accent-2
#64FFDA
teal-accent-3
#1DE9B6
teal-accent-4
#00BFA5
green
green
#4CAF50
green-lighten-5
#E8F5E9
green-lighten-4
#C8E6C9
green-lighten-3
#A5D6A7
green-lighten-2
#81C784
green-lighten-1
#66BB6A
green-darken-1
#43A047
green-darken-2
#388E3C
green-darken-3
#2E7D32
green-darken-4
#1B5E20
green-accent-1
#B9F6CA
green-accent-2
#69F0AE
green-accent-3
#00E676
green-accent-4
#00C853
light-green
light-green
#8BC34A
light-green-lighten-5
#F1F8E9
light-green-lighten-4
#DCEDC8
light-green-lighten-3
#C5E1A5
light-green-lighten-2
#AED581
light-green-lighten-1
#9CCC65
light-green-darken-1
#7CB342
light-green-darken-2
#689F38
light-green-darken-3
#558B2F
light-green-darken-4
#33691E
light-green-accent-1
#CCFF90
light-green-accent-2
#B2FF59
light-green-accent-3
#76FF03
light-green-accent-4
#64DD17
lime
lime
#CDDC39
lime-lighten-5
#F9FBE7
lime-lighten-4
#F0F4C3
lime-lighten-3
#E6EE9C
lime-lighten-2
#DCE775
lime-lighten-1
#D4E157
lime-darken-1
#C0CA33
lime-darken-2
#AFB42B
lime-darken-3
#9E9D24
lime-darken-4
#827717
lime-accent-1
#F4FF81
lime-accent-2
#EEFF41
lime-accent-3
#C6FF00
lime-accent-4
#AEEA00
yellow
yellow
#FFEB3B
yellow-lighten-5
#FFFDE7
yellow-lighten-4
#FFF9C4
yellow-lighten-3
#FFF59D
yellow-lighten-2
#FFF176
yellow-lighten-1
#FFEE58
yellow-darken-1
#FDD835
yellow-darken-2
#FBC02D
yellow-darken-3
#F9A825
yellow-darken-4
#F57F17
yellow-accent-1
#FFFF8D
yellow-accent-2
#FFFF00
yellow-accent-3
#FFEA00
yellow-accent-4
#FFD600
amber
amber
#FFC107
amber-lighten-5
#FFF8E1
amber-lighten-4
#FFECB3
amber-lighten-3
#FFE082
amber-lighten-2
#FFD54F
amber-lighten-1
#FFCA28
amber-darken-1
#FFB300
amber-darken-2
#FFA000
amber-darken-3
#FF8F00
amber-darken-4
#FF6F00
amber-accent-1
#FFE57F
amber-accent-2
#FFD740
amber-accent-3
#FFC400
amber-accent-4
#FFAB00
orange
orange
#FF9800
orange-lighten-5
#FFF3E0
orange-lighten-4
#FFE0B2
orange-lighten-3
#FFCC80
orange-lighten-2
#FFB74D
orange-lighten-1
#FFA726
orange-darken-1
#FB8C00
orange-darken-2
#F57C00
orange-darken-3
#EF6C00
orange-darken-4
#E65100
orange-accent-1
#FFD180
orange-accent-2
#FFAB40
orange-accent-3
#FF9100
orange-accent-4
#FF6D00
deep-orange
deep-orange
#FF5722
deep-orange-lighten-5
#FBE9E7
deep-orange-lighten-4
#FFCCBC
deep-orange-lighten-3
#FFAB91
deep-orange-lighten-2
#FF8A65
deep-orange-lighten-1
#FF7043
deep-orange-darken-1
#F4511E
deep-orange-darken-2
#E64A19
deep-orange-darken-3
#D84315
deep-orange-darken-4
#BF360C
deep-orange-accent-1
#FF9E80
deep-orange-accent-2
#FF6E40
deep-orange-accent-3
#FF3D00
deep-orange-accent-4
#DD2C00
brown
brown
#795548
brown-lighten-5
#EFEBE9
brown-lighten-4
#D7CCC8
brown-lighten-3
#BCAAA4
brown-lighten-2
#A1887F
brown-lighten-1
#8D6E63
brown-darken-1
#6D4C41
brown-darken-2
#5D4037
brown-darken-3
#4E342E
brown-darken-4
#3E2723
blue-grey
blue-grey
#607D8B
blue-grey-lighten-5
#ECEFF1
blue-grey-lighten-4
#CFD8DC
blue-grey-lighten-3
#B0BEC5
blue-grey-lighten-2
#90A4AE
blue-grey-lighten-1
#78909C
blue-grey-darken-1
#546E7A
blue-grey-darken-2
#455A64
blue-grey-darken-3
#37474F
blue-grey-darken-4
#263238
grey
grey
#9E9E9E
grey-lighten-5
#FAFAFA
grey-lighten-4
#F5F5F5
grey-lighten-3
#EEEEEE
grey-lighten-2
#E0E0E0
grey-lighten-1
#BDBDBD
grey-darken-1
#757575
grey-darken-2
#616161
grey-darken-3
#424242
grey-darken-4
#212121
shades
black
#000000
white
#FFFFFF
transparent
#FFFFFF00
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Theme
Features
Themes
Resources
Wireframes
Getting started
Transitions
Borders
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/borders/#usage:














Borders ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
All sides
Individual sides
Border styles
Theme colors
Components
SASS variables
Sponsors
Support
#
Borders
Utilities for controlling the border of elements in your application.
Report a Bug
Class
Properties
border
border: thin solid rgba(var(‚Äìv-border-color), var(‚Äìv-border-opacity));
border-thin
border-width: thin;
border-sm
border-width: 1px;
border-md
border-width: 2px;
border-lg
border-width: 4px;
border-xl
border-width: 8px;
border-0
border-width: 0;
border-t
border-top-width: thin;
border-t-0
border-top-width: 0;
border-t-thin
border-top-width: thin;
border-t-sm
border-top-width: 1px;
border-t-md
border-top-width: 2px;
border-t-lg
border-top-width: 4px;
border-t-xl
border-top-width: 8px;
border-e
border-inline-end-width: thin;
border-e-0
border-inline-end-width: 0;
border-e-thin
border-inline-end-width: thin;
border-e-sm
border-inline-end-width: 1px;
border-e-md
border-inline-end-width: 2px;
border-e-lg
border-inline-end-width: 4px;
border-e-xl
border-inline-end-width: 8px;
border-b
border-bottom-width: thin;
border-b-0
border-bottom-width: 0;
border-b-thin
border-bottom-width: thin;
border-b-sm
border-bottom-width: 1px;
border-b-md
border-bottom-width: 2px;
border-b-lg
border-bottom-width: 4px;
border-b-xl
border-bottom-width: 8px;
border-s
border-inline-start-width: thin;
border-s-0
border-inline-start-width: 0;
border-s-thin
border-inline-start-width: thin;
border-s-sm
border-inline-start-width: 1px;
border-s-md
border-inline-start-width: 2px;
border-s-lg
border-inline-start-width: 4px;
border-s-xl
border-inline-start-width: 8px;
border-opacity-0
‚Äìv-border-opacity: 0;
border-opacity
‚Äìv-border-opacity: .12;
border-opacity-25
‚Äìv-border-opacity: .25;
border-opacity-50
‚Äìv-border-opacity: .5;
border-opacity-75
‚Äìv-border-opacity: .75;
border-opacity-100
‚Äìv-border-opacity: 1;
border-dashed
border-style: dashed;
border-dotted
border-style: dotted;
border-double
border-style: double;
border-solid
border-style: solid;
ads via vuetify
#
Usage
The 
border
 utilities allow you to quickly style the border of any element.
#
All sides
Use the 
border
, 
border-0
, 
border-sm
, 
border-md
, 
border-lg
, and 
border-xl
 classes to set the border width of an element.
border-thin
border-sm
border-md
border-lg
border-xl
#
Individual sides
Use the 
border-*
, 
border-*-0
, 
border-*-sm
, 
border-*-md
, 
border-*-lg
, and 
border-*-xl
 classes to set the border width of an element on a specific side.
border-t-lg
border-e-lg
border-b-lg
border-s-lg
#
Border styles
Use the 
border-dashed
, 
border-dotted
, 
border-double
, and 
border-solid
 classes to set the border style of an element.
Button A
border
Button A
border-dashed
Button A
border-dotted
Button A
border-double
#
Theme colors
Components that support the 
border
 property can take advantage of all border utility classes. This includes colors generated by your theme.
"primary thin"
"sucess sm"
"info md"
"warning lg"
"error xl"
Class
Properties
border-primary
‚Äìv-border-color: var(‚Äìv-theme-primary);
border-secondary
‚Äìv-border-color: var(‚Äìv-theme-secondary);
border-accent
‚Äìv-border-color: var(‚Äìv-theme-accent);
border-error
‚Äìv-border-color: var(‚Äìv-theme-error);
border-info
‚Äìv-border-color: var(‚Äìv-theme-info);
border-success
‚Äìv-border-color: var(‚Äìv-theme-success);
border-warning
‚Äìv-border-color: var(‚Äìv-theme-warning);
border-surface
‚Äìv-border-color: var(‚Äìv-theme-surface);
border-background
‚Äìv-border-color: var(‚Äìv-theme-background);
border-surface-light
‚Äìv-border-color: var(‚Äìv-theme-surface-light);
border-surface-variant
‚Äìv-border-color: var(‚Äìv-theme-surface-variant);
border-surface-bright
‚Äìv-border-color: var(‚Äìv-theme-surface-bright);
#
Components
When using the 
border
 property on components, omit the 
border-
 prefix. For example, use 
border="sm"
 instead of 
border="border-sm"
.
Setting the 
border
 property to true applies a component specific border class, such as 
v-card--border
. This is to ensure that basic border usage persists even if the utility classes are disabled.
Revenue
 13% 
$ 9,232,215
 + $ 3,295 
 in the last week 
#
SASS variables
You can also use the following SASS variables to customize the border color and width:
 src/styles/settings.scss
@use
 'vuetify/settings' with (


  
$borders
:
 (


    
0
:
 0,


    
null
:
 thin,


    
thin
:
 thin,


    
sm
:
 1px,


    
md
:
 2px,


    
lg
:
 4px,


    
xl
:
 8px

  
)


);


Disable border class generation by setting the $borders variable to 
false
.
 src/styles/settings.scss
@use
 'vuetify/settings' with (


  
$borders
:
 false


);


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Border radius
Styles
Display
Styles
Content
Styles
Material color palette
Border radius
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/border-radius/#usage:














Border radius ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
Rounded corners
Pill and circle
Rounding by side
Rounding by corner
No rounding
Components
SASS variables
Sponsors
Support
#
Border Radius
Use border utilities to quickly style the border-radius of any element.
Report a Bug
Class
Properties
rounded
border-radius: 4px;
rounded-0
border-radius: 0;
rounded-sm
border-radius: 2px;
rounded-lg
border-radius: 8px;
rounded-xl
border-radius: 24px;
rounded-pill
border-radius: 9999px;
rounded-circle
border-radius: 50%;
rounded-shaped
border-radius: 24px 0
rounded-t
border-top-left-radius: 4px;
border-top-right-radius: 4px;
rounded-t-0
border-top-left-radius: 0;
border-top-right-radius: 0;
rounded-t-sm
border-top-left-radius: 2px;
border-top-right-radius: 2px;
rounded-t-lg
border-top-left-radius: 8px;
border-top-right-radius: 8px;
rounded-t-xl
border-top-left-radius: 24px;
border-top-right-radius: 24px;
rounded-t-pill
border-top-left-radius: 9999px;
border-top-right-radius: 9999px;
rounded-t-circle
border-top-left-radius: 50%;
border-top-right-radius: 50%;
rounded-t-shaped
border-top-left-radius: 24px; border-top-right-radius: 0;
rounded-te
border-top-right-radius: 4px;
rounded-te-0
border-top-right-radius: 0;
rounded-te-sm
border-top-right-radius: 2px;
rounded-te-lg
border-top-right-radius: 8px;
rounded-te-xl
border-top-right-radius: 24px;
rounded-te-pill
border-top-right-radius: 9999px;
rounded-te-circle
border-top-right-radius: 50%;
rounded-te-shaped
border-top-right-radius: 24px
border-top-left-radius: 0;
rounded-ts
border-top-left-radius: 4px;
rounded-ts-0
border-top-left-radius: 0;
rounded-ts-sm
border-top-left-radius: 2px;
rounded-ts-lg
border-top-left-radius: 8px;
rounded-ts-xl
border-top-left-radius: 24px;
rounded-ts-pill
border-top-left-radius: 9999px;
rounded-ts-circle
border-top-left-radius: 50%;
rounded-ts-shaped
border-top-left-radius: 24px; border-top-right-radius: 0;
rounded-e
border-inline-end-radius: 4px;
rounded-e-0
border-inline-end-radius: 0;
rounded-e-sm
border-inline-end-radius: 2px;
rounded-e-lg
border-inline-end-radius: 8px;
rounded-e-xl
border-inline-end-radius: 24px;
rounded-e-pill
border-inline-end-radius: 9999px;
rounded-e-circle
border-inline-end-radius: 50%;
rounded-e-shaped
border-inline-end-radius: 0; border-inline-start-radius: 24px;
rounded-b
border-bottom-left-radius: 4px;
border-bottom-right-radius: 4px;
rounded-b-0
border-bottom-left-radius: 0;
border-bottom-right-radius: 0;
rounded-b-sm
border-bottom-left-radius: 2px;
border-bottom-right-radius: 2px;
rounded-b-lg
border-bottom-left-radius: 8px;
border-bottom-right-radius: 8px;
rounded-b-xl
border-bottom-left-radius: 24px;
border-bottom-right-radius: 24px;
rounded-b-pill
border-bottom-left-radius: 9999px;
border-bottom-right-radius: 9999px;
rounded-b-circle
border-bottom-left-radius: 50%;
border-bottom-right-radius: 50%;
rounded-b-shaped
border-bottom-left-radius: 0; border-bottom-right-radius: 24px;
rounded-be
border-bottom-right-radius: 4px;
rounded-be-0
border-bottom-right-radius: 0;
rounded-be-sm
border-bottom-right-radius: 2px;
rounded-be-lg
border-bottom-right-radius: 8px;
rounded-be-xl
border-bottom-right-radius: 24px;
rounded-be-pill
border-bottom-right-radius: 9999px;
rounded-be-circle
border-bottom-right-radius: 50%;
rounded-be-shaped
border-bottom-right-radius: 24px; border-bottom-left-radius: 0;
rounded-bs
border-inline-start-radius: 4px;
rounded-bs-0
border-inline-start-radius: 0;
rounded-bs-sm
border-inline-start-radius: 2px;
rounded-bs-lg
border-inline-start-radius: 8px;
rounded-bs-xl
border-inline-start-radius: 24px;
rounded-bs-pill
border-inline-start-radius: 9999px;
rounded-bs-circle
border-inline-start-radius: 50%;
rounded-bs-shaped
border-inline-start-radius: 24px; border-inline-end-radius: 0;
rounded-s
border-inline-start-radius: 4px;
rounded-s-0
border-inline-start-radius: 0;
rounded-s-sm
border-inline-start-radius: 2px;
rounded-s-lg
border-inline-start-radius: 8px;
rounded-s-xl
border-inline-start-radius: 24px;
rounded-s-pill
border-inline-start-radius: 9999px;
rounded-s-circle
border-inline-start-radius: 50%;
rounded-s-shaped
border-inline-start-radius: 24px; border-inline-end-radius: 0;
ads via vuetify
#
Usage
The 
border-radius
 utilities allow you to quickly style the border-radius of any element.
#
Rounded corners
Use the 
rounded
, 
rounded-0
, 
rounded-sm
, 
rounded-lg
, and 
rounded-xl
 classes to set the border-radius of an element.
rounded-sm
rounded
rounded-md
rounded-lg
rounded-xl
#
Pill and circle
Use the 
rounded-pill
 and 
rounded-circle
 classes to create pill and circle shapes.
rounded-pill
rounded-circle
#
Rounding by side
Use the 
rounded-t-*
, 
rounded-b-*
, 
rounded-s-*
, and 
rounded-e-*
 classes to set the border-radius of an element on a specific side.
rounded-t-lg
rounded-e-lg
rounded-b-lg
rounded-s-lg
#
Rounding by corner
Use the 
rounded-te-*
, 
rounded-ts-*
, 
rounded-be-*
, and 
rounded-bs-*
 classes to set the border-radius of an element on a specific corner.
rounded-ts-lg
rounded-te-lg
rounded-be-lg
rounded-bs-lg
#
No rounding
Use the 
rounded-0
 class to remove the border-radius from an element.
Update Account
#
Components
When using the 
rounded
 property on components, omit the 
rounded-
 prefix. For example, use 
rounded="sm"
 instead of 
rounded-sm
.
Setting the 
rounded
 property applies a component specific border-radius class, such as 
v-sheet--rounded
. This is to ensure that basic rounded usage persists even if the utility classes are disabled.
Update Account
#
SASS variables
You can also use the following SASS variables to customize the border color and width:
$rounded
:
 
(

  
0
:
 0
,

  
'sm'
:
 
$border-radius-root
 
/
 2
,

  
null
:
 
$border-radius-root
,

  
'lg'
:
 
$border-radius-root
 
*
 2
,

  
'xl'
:
 
$border-radius-root
 
*
 6
,

  
'pill'
:
 9999px
,

  
'circle'
:
 50%

)
;


Disable border-radius class generation by setting the $rounded variable to 
false
.
 src/styles/settings.scss
@use
 'vuetify/settings' with (


  
$rounded
:
 false


);


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Text and typography
Styles
Sheets
Components
Buttons
Components
Borders
Content
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/content/#block-quote:














Content ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Block quote
Paragraphs
Code
Variables
Sponsors
Support
#
Content
Vuetify has custom styling for multiple standard elements.
Report a Bug
ads via vuetify
#
Block quote
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum maiores modi quidem veniam, expedita quis laboriosam, ullam facere adipisci, iusto, voluptate sapiente corrupti asperiores rem nemo numquam fuga ab at.
#
Paragraphs
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum maiores modi quidem veniam, expedita quis laboriosam, ullam facere adipisci, iusto, voluptate sapiente corrupti asperiores rem nemo numquam fuga ab at.
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum maiores modi quidem veniam, expedita quis laboriosam, ullam facere adipisci, iusto, voluptate sapiente corrupti asperiores rem nemo numquam fuga ab at.
#
Code
Example of an inline 
<code>
 element.
#
Variables
v
 = 
u
 * 
e
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Text and typography
Styles
Display
Styles
Spacing
Styles
Border radius
Cursor
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/cursor/#usage:














Cursor ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
SASS variables
Sponsors
Support
#
Cursor
Utilities for controlling the cursor styling when hovering over elements.
Report a Bug
Class
Properties
cursor-auto
cursor: auto;
cursor-default
cursor: default;
cursor-grab
cursor: grab;
cursor-grabbing
cursor: grabbing;
cursor-help
cursor: help;
cursor-move
cursor: move;
cursor-none
cursor: none;
cursor-not-allowed
cursor: not-allowed;
cursor-pointer
cursor: pointer;
cursor-progress
cursor: progress;
cursor-text
cursor: text;
cursor-wait
cursor: wait;
ads via vuetify
#
Usage
Apply custom cursor styling to a component or element.
auto
default
grab
grabbing
help
move
none
not-allowed
pointer
progress
text
wait
#
SASS variables
You can also use the following SASS variables to customize the border color and width:
 src/styles/settings.scss
@use
 
'vuetify/settings'
 
with
 
(

  
$utilities
:
 
(

    
"cursor"
:
 
(

      
property
:
 cursor
,

      
class
:
 cursor
,

      
values
:
 auto default pointer wait text move help not-allowed progress grab grabbing none
    
)

  
)


)
;


Disable the generation of 
cursor
 utility classes by overwriting the utilities value:
 src/styles/settings.scss
@use
 
'vuetify/settings'
 
with
 
(

  
$utilities
:
 
(

    
"cursor"
:
 
false
,

  
)
,


)
;


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Content
Styles
Spacing
Styles
Text and typography
Styles
Content
Display
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/display/#display:














Display ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Display
Visibility
Caveats
Display in print
Accessibility
Screen readers
Sponsors
Support
#
Display helpers
The display helpers allow you to control the display of content. This includes being conditionally visible based upon the current viewport, or the actual element display type.
Report a Bug
Class
Properties
d-none
display: none;
d-sm-none
display: none;
d-md-none
display: none;
d-lg-none
display: none;
d-xl-none
display: none;
d-xxl-none
display: none;
d-sm-flex
display: flex;
d-md-flex
display: flex;
d-lg-flex
display: flex;
d-xl-flex
display: flex;
d-xxl-flex
display: flex;
d-sm-inline
display: inline;
d-md-inline
display: inline;
d-lg-inline
display: inline;
d-xl-inline
display: inline;
d-xxl-inline
display: inline;
d-sm-inline-block
display: inline-block;
d-md-inline-block
display: inline-block;
d-lg-inline-block
display: inline-block;
d-xl-inline-block
display: inline-block;
d-xxl-inline-block
display: inline-block;
d-sm-table
display: table;
d-md-table
display: table;
d-lg-table
display: table;
d-xl-table
display: table;
d-xxl-table
display: table;
d-sm-table-cell
display: table-cell;
d-md-table-cell
display: table-cell;
d-lg-table-cell
display: table-cell;
d-xl-table-cell
display: table-cell;
d-xxl-table-cell
display: table-cell;
d-sm-table-row
display: table-row;
d-md-table-row
display: table-row;
d-lg-table-row
display: table-row;
d-xl-table-row
display: table-row;
d-xxl-table-row
display: table-row;
d-sm-flex
display: flex;
d-md-flex
display: flex;
d-lg-flex
display: flex;
d-xl-flex
display: flex;
d-xxl-flex
display: flex;
d-sm-inline-flex
display: inline-flex;
d-md-inline-flex
display: inline-flex;
d-lg-inline-flex
display: inline-flex;
d-xl-inline-flex
display: inline-flex;
d-xxl-inline-flex
display: inline-flex;
d-print-none
display: none;
d-print-inline
display: inline;
d-print-inline-block
display: inline-block;
d-print-block
display: block;
d-print-table
display: table;
d-print-table-cell
display: table-cell;
d-print-table-row
display: table-row;
d-print-flex
display: flex;
d-print-inline-flex
display: inline-flex;
d-sr-only
display: none;
d-sr-only-focusable
display: none;
ads via vuetify
Device
Code
Type
Range
Extra small
xs
Small to large phone
< 600px
Small
sm
Small to medium tablet
600px > < 960px
Medium
md
Large tablet to laptop
960px > < 1280px
Large
lg
Laptop to desktop
1280px > < 1920px
Extra large
xl
1080p to 1440p desktop
1920px > < 2560px
Extra extra large
xxl
4k and ultra-wide
> 2560px
 Specification
#
Display
Specify the element‚Äôs 
display
 property. These classes can be applied to all breakpoints from 
xs
 to 
xxl
. When using a base class,
.d-{value}
, it is inferred to be 
.d-xs-{value}
.
.d-{value}
 for 
xs
.d-{breakpoint}-{value}
 for 
sm
, 
md
, 
lg
, 
xl
, and 
xxl
The 
value
 property is one of:
none
inline
inline-block
block
table
table-cell
table-row
flex
inline-flex
When setting a specific breakpoint for a display helper class, it will apply to all screen widths from the designation and up. For example, 
d-lg-flex
 will apply to 
lg
, 
xl
 and 
xxl
 size screens.
 d-inline 
 d-inline 
 d-block 
 d-block 
#
Visibility
Conditionally display an element based upon the current 
viewport
. Breakpoint utility classes always apply from the bottom up. That means if you have 
.d-none
, it will apply to all breakpoints. However, 
.d-md-none
 will apply to only 
md
 and up.
Screen size
Class
Hidden on all
.d-none
Hidden only on xs
.d-none .d-sm-flex
Hidden only on sm
.d-sm-none .d-md-flex
Hidden only on md
.d-md-none .d-lg-flex
Hidden only on lg
.d-lg-none .d-xl-flex
Hidden only on xl
.d-xl-none .d-xxl-flex
Hidden only on xxl
.d-xxl-none
Visible on all
.d-flex
Visible only on xs
.d-flex .d-sm-none
Visible only on sm
.d-none .d-sm-flex .d-md-none
Visible only on md
.d-none .d-md-flex .d-lg-none
Visible only on lg
.d-none .d-lg-flex .d-xl-none
Visible only on xl
.d-none .d-xl-flex .d-xxl-none
Visible only on xxl
.d-none .d-xxl-flex
 hide on screens wider than lg 
 hide on screens smaller than lg 
Alternatively you can hide an element based upon the current 
viewport
 using lateral display helper classes. These classes can be applied using the following format 
hidden-{breakpoint}-{condition?}
The 
condition
 applies the class base on:
nothing - hide the element only on the specified breakpoint
and-down
 - hide the element on the specified breakpoint and down - 
sm
 through 
xl
 only
and-up
 - hide the element on the specified breakpoint and up - 
sm
 through 
xl
 only
hidden-{breakpoint}-and-up
 is equivalent to 
d-{breakpoint}-none
.
Media types
 can also be targeted using the 
only
 condition. Both 
hidden-screen-only
 and 
hidden-print-only
 are currently supported.
#
Caveats
It is important to note that using any of the display classes above will result in any display style previously added being overwritten. This is because of the classes using 
!important
 in their display styling.
#
Display in print
You can also change the display property when printing. Print utility classes can also be combined with none print display utilities.
 Screen Only (Hide on print only) 
 Print Only (Hide on screen only) 
 Hide up to large on screen, but always show on print 
#
Accessibility
#
Screen readers
Use the 
d-sr
 utility classes to conditionally hide content on all devices 
except
 screen readers.
d-sr-only
 visually hides elements but will still announce to 
screen readers
.
d-sr-only-focusable
 visually hides an element until it is focused. This is useful when implementing 
skip links
.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Text and typography
Styles
Resize
Directives
Display & Platform
Features
Cursor
Elevation
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/elevation/#usage:














Elevation ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
Examples
Props
Dynamic elevation
Sponsors
Support
#
Elevation
The elevation helpers allow you to control relative depth, or distance, between two surfaces along the 
z-axis
. There is a total of 25 elevation levels. You can set an element‚Äôs elevation by using the class 
elevation-{n}
, where 
n
 is a integer between 0-24 corresponding to the desired elevation.
Class
Properties
elevation-0
elevation: 0px;
elevation-1
elevation: 1px;
elevation-2
elevation: 2px;
elevation-3
elevation: 3px;
elevation-4
elevation: 4px;
elevation-5
elevation: 5px;
elevation-6
elevation: 6px;
elevation-7
elevation: 7px;
elevation-8
elevation: 8px;
elevation-9
elevation: 9px;
elevation-10
elevation: 10px;
elevation-11
elevation: 11px;
elevation-12
elevation: 12px;
elevation-13
elevation: 13px;
elevation-14
elevation: 14px;
elevation-15
elevation: 15px;
elevation-16
elevation: 16px;
elevation-17
elevation: 17px;
elevation-18
elevation: 18px;
elevation-19
elevation: 19px;
elevation-20
elevation: 20px;
elevation-21
elevation: 21px;
elevation-22
elevation: 22px;
elevation-23
elevation: 23px;
elevation-24
elevation: 24px;
#
Usage
The 
elevation
 helper classes allow you to assign a custom 
z-depth
 to any element.
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
#
Examples
#
Props
#
Dynamic elevation
Numerous components utilize the 
elevatable
 mixin and are given an 
elevation
 prop. For components that are not supported, you can dynamically change the class
 Prop based elevation 
 Class based elevation 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Cards
Components
Sheets
Components
Bottom navigation
Components
Display
Flex
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/flex/#enabling-flexbox:














Flex ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Enabling flexbox
Caveats
Flex shorthand
Flex direction
Flex justify
Flex align
Flex align self
Auto margins
Using align-items
Flex wrap
Flex order
Flex align content
Flex grow and shrink
Sponsors
Support
#
Flex
Control the layout of flex containers with alignment, justification and more with responsive flexbox utilities.
Report a Bug
Class
Properties
d-flex
display: flex;
d-inline-flex
display: inline-flex;
d-sm-flex
display: flex;
d-sm-inline-flex
display: inline-flex;
d-md-flex
display: flex;
d-md-inline-flex
display: inline-flex;
d-lg-flex
display: flex;
d-lg-inline-flex
display: inline-flex;
d-xl-flex
display: flex;
d-xl-inline-flex
display: inline-flex;
flex-fill
flex: 1 1 auto;
flex-sm-fill
flex: 1 1 auto;
flex-md-fill
flex: 1 1 auto;
flex-lg-fill
flex: 1 1 auto;
flex-xl-fill
flex: 1 1 auto;
flex-1-1
flex: 1 1 0%;
flex-sm-1-1
flex: 1 1 0%;
flex-md-1-1
flex: 1 1 0%;
flex-lg-1-1
flex: 1 1 0%;
flex-xl-1-1
flex: 1 1 0%;
flex-1-0
flex: 1 0 0%;
flex-sm-1-0
flex: 1 0 0%;
flex-md-1-0
flex: 1 0 0%;
flex-lg-1-0
flex: 1 0 0%;
flex-xl-1-0
flex: 1 0 0%;
flex-0-1
flex: 0 1 auto;
flex-sm-0-1
flex: 0 1 auto;
flex-md-0-1
flex: 0 1 auto;
flex-lg-0-1
flex: 0 1 auto;
flex-xl-0-1
flex: 0 1 auto;
flex-0-0
flex: 0 0 auto;
flex-sm-0-0
flex: 0 0 auto;
flex-md-0-0
flex: 0 0 auto;
flex-lg-0-0
flex: 0 0 auto;
flex-xl-0-0
flex: 0 0 auto;
flex-1-1-0
flex: 1 1 0%;
flex-sm-1-1-0
flex: 1 1 0%;
flex-md-1-1-0
flex: 1 1 0%;
flex-lg-1-1-0
flex: 1 1 0%;
flex-xl-1-1-0
flex: 1 1 0%;
flex-1-1-100
flex: 1 1 100%;
flex-sm-1-1-100
flex: 1 1 100%;
flex-md-1-1-100
flex: 1 1 100%;
flex-lg-1-1-100
flex: 1 1 100%;
flex-xl-1-1-100
flex: 1 1 100%;
flex-1-0-0
flex: 1 0 0%;
flex-sm-1-0-0
flex: 1 0 0%;
flex-md-1-0-0
flex: 1 0 0%;
flex-lg-1-0-0
flex: 1 0 0%;
flex-xl-1-0-0
flex: 1 0 0%;
flex-1-0-100
flex: 1 0 100%;
flex-sm-1-0-100
flex: 1 0 100%;
flex-md-1-0-100
flex: 1 0 100%;
flex-lg-1-0-100
flex: 1 0 100%;
flex-xl-1-0-100
flex: 1 0 100%;
flex-0-1-0
flex: 0 1 0%;
flex-sm-0-1-0
flex: 0 1 0%;
flex-md-0-1-0
flex: 0 1 0%;
flex-lg-0-1-0
flex: 0 1 0%;
flex-xl-0-1-0
flex: 0 1 0%;
flex-0-1-100
flex: 0 1 100%;
flex-sm-0-1-100
flex: 0 1 100%;
flex-md-0-1-100
flex: 0 1 100%;
flex-lg-0-1-100
flex: 0 1 100%;
flex-xl-0-1-100
flex: 0 1 100%;
flex-0-0-0
flex: 0 0 0%
flex-sm-0-0-0
flex: 0 0 0%
flex-md-0-0-0
flex: 0 0 0%
flex-lg-0-0-0
flex: 0 0 0%
flex-xl-0-0-0
flex: 0 0 0%
flex-0-0-100
flex: 0 0 100%;
flex-sm-0-0-100
flex: 0 0 100%;
flex-md-0-0-100
flex: 0 0 100%;
flex-lg-0-0-100
flex: 0 0 100%;
flex-xl-0-0-100
flex: 0 0 100%;
ga-0
gap: 0;
ga-1
gap: 4px;
ga-2
gap: 8px;
ga-3
gap: 12px;
ga-4
gap: 16px;
ga-5
gap: 20px;
ga-6
gap: 24px;
ga-7
gap: 28px;
ga-8
gap: 32px;
ga-9
gap: 36px;
ga-10
gap: 40px;
ga-11
gap: 44px;
ga-12
gap: 48px;
ga-13
gap: 52px;
ga-14
gap: 56px;
ga-15
gap: 60px;
ga-16
gap: 64px;
ga-sm-0
gap: 0;
ga-sm-1
gap: 4px;
ga-sm-2
gap: 8px;
ga-sm-3
gap: 12px;
ga-sm-4
gap: 16px;
ga-sm-5
gap: 20px;
ga-sm-6
gap: 24px;
ga-sm-7
gap: 28px;
ga-sm-8
gap: 32px;
ga-sm-9
gap: 36px;
ga-sm-10
gap: 40px;
ga-sm-11
gap: 44px;
ga-sm-12
gap: 48px;
ga-sm-13
gap: 52px;
ga-sm-14
gap: 56px;
ga-sm-15
gap: 60px;
ga-sm-16
gap: 64px;
ga-md-0
gap: 0;
ga-md-1
gap: 4px;
ga-md-2
gap: 8px;
ga-md-3
gap: 12px;
ga-md-4
gap: 16px;
ga-md-5
gap: 20px;
ga-md-6
gap: 24px;
ga-md-7
gap: 28px;
ga-md-8
gap: 32px;
ga-md-9
gap: 36px;
ga-md-10
gap: 40px;
ga-md-11
gap: 44px;
ga-md-12
gap: 48px;
ga-md-13
gap: 52px;
ga-md-14
gap: 56px;
ga-md-15
gap: 60px;
ga-md-16
gap: 64px;
ga-lg-0
gap: 0;
ga-lg-1
gap: 4px;
ga-lg-2
gap: 8px;
ga-lg-3
gap: 12px;
ga-lg-4
gap: 16px;
ga-lg-5
gap: 20px;
ga-lg-6
gap: 24px;
ga-lg-7
gap: 28px;
ga-lg-8
gap: 32px;
ga-lg-9
gap: 36px;
ga-lg-10
gap: 40px;
ga-lg-11
gap: 44px;
ga-lg-12
gap: 48px;
ga-lg-13
gap: 52px;
ga-lg-14
gap: 56px;
ga-lg-15
gap: 60px;
ga-lg-16
gap: 64px;
ga-xl-0
gap: 0;
ga-xl-1
gap: 4px;
ga-xl-2
gap: 8px;
ga-xl-3
gap: 12px;
ga-xl-4
gap: 16px;
ga-xl-5
gap: 20px;
ga-xl-6
gap: 24px;
ga-xl-7
gap: 28px;
ga-xl-8
gap: 32px;
ga-xl-9
gap: 36px;
ga-xl-10
gap: 40px;
ga-xl-11
gap: 44px;
ga-xl-12
gap: 48px;
ga-xl-13
gap: 52px;
ga-xl-14
gap: 56px;
ga-xl-15
gap: 60px;
ga-xl-16
gap: 64px;
flex-row
flex-direction: row;
flex-row-reverse
flex-direction: row-reverse;
flex-column
flex-direction: column;
flex-column-reverse
flex-direction: column-reverse;
flex-sm-row
flex-direction: row;
flex-sm-row-reverse
flex-direction: row-reverse;
flex-sm-column
flex-direction: column;
flex-sm-column-reverse
flex-direction: column-reverse;
flex-md-row
flex-direction: row;
flex-md-row-reverse
flex-direction: row-reverse;
flex-md-column
flex-direction: column;
flex-md-column-reverse
flex-direction: column-reverse;
flex-lg-row
flex-direction: row;
flex-lg-row-reverse
flex-direction: row-reverse;
flex-lg-column
flex-direction: column;
flex-lg-column-reverse
flex-direction: column-reverse;
flex-xl-row
flex-direction: row;
flex-xl-row-reverse
flex-direction: row-reverse;
flex-xl-column
flex-direction: column;
flex-xl-column-reverse
flex-direction: column-reverse;
justify-start
justify-content: flex-start;
justify-end
justify-content: flex-end;
justify-center
justify-content: center;
justify-space-between
justify-content: space-between;
justify-space-around
justify-content: space-around;
justify-space-evenly
justify-content: space-evenly;
justify-sm-start
justify-content: flex-start;
justify-sm-end
justify-content: flex-end;
justify-sm-center
justify-content: center;
justify-sm-space-between
justify-content: space-between;
justify-sm-space-around
justify-content: space-around;
justify-sm-space-evenly
justify-content: space-evenly;
justify-md-start
justify-content: flex-start;
justify-md-end
justify-content: flex-end;
justify-md-center
justify-content: center;
justify-md-space-between
justify-content: space-between;
justify-md-space-around
justify-content: space-around;
justify-md-space-evenly
justify-content: space-evenly;
justify-lg-start
justify-content: flex-start;
justify-lg-end
justify-content: flex-end;
justify-lg-center
justify-content: center;
justify-lg-space-between
justify-content: space-between;
justify-lg-space-around
justify-content: space-around;
justify-lg-space-evenly
justify-content: space-evenly;
justify-xl-start
justify-content: flex-start;
justify-xl-end
justify-content: flex-end;
justify-xl-center
justify-content: center;
justify-xl-space-between
justify-content: space-between;
justify-xl-space-around
justify-content: space-around;
justify-xl-space-evenly
justify-content: space-evenly;
align-start
align-items: flex-start;
align-end
align-items: flex-end;
align-center
align-items: center;
align-baseline
align-items: baseline;
align-stretch
align-items: stretch;
align-sm-start
align-items: flex-start;
align-sm-end
align-items: flex-end;
align-sm-center
align-items: center;
align-sm-baseline
align-items: baseline;
align-sm-stretch
align-items: stretch;
align-md-start
align-items: flex-start;
align-md-end
align-items: flex-end;
align-md-center
align-items: center;
align-md-baseline
align-items: baseline;
align-md-stretch
align-items: stretch;
align-lg-start
align-items: flex-start;
align-lg-end
align-items: flex-end;
align-lg-center
align-items: center;
align-lg-baseline
align-items: baseline;
align-lg-stretch
align-items: stretch;
align-xl-start
align-items: flex-start;
align-xl-end
align-items: flex-end;
align-xl-center
align-items: center;
align-xl-baseline
align-items: baseline;
align-xl-stretch
align-items: stretch;
align-self-start
align-self: flex-start;
align-self-end
align-self: flex-end;
align-self-center
align-self: center;
align-self-baseline
align-self: baseline;
align-self-auto
align-self: auto;
align-self-stretch
align-self: stretch;
align-self-sm-start
align-self: flex-start;
align-self-sm-end
align-self: flex-end;
align-self-sm-center
align-self: center;
align-self-sm-baseline
align-self: baseline;
align-self-sm-auto
align-self: auto;
align-self-sm-stretch
align-self: stretch;
align-self-md-start
align-self: flex-start;
align-self-md-end
align-self: flex-end;
align-self-md-center
align-self: center;
align-self-md-baseline
align-self: baseline;
align-self-md-auto
align-self: auto;
align-self-md-stretch
align-self: stretch;
align-self-lg-start
align-self: flex-start;
align-self-lg-end
align-self: flex-end;
align-self-lg-center
align-self: center;
align-self-lg-baseline
align-self: baseline;
align-self-lg-auto
align-self: auto;
align-self-lg-stretch
align-self: stretch;
align-self-xl-start
align-self: flex-start;
align-self-xl-end
align-self: flex-end;
align-self-xl-center
align-self: center;
align-self-xl-baseline
align-self: baseline;
align-self-xl-auto
align-self: auto;
align-self-xl-stretch
align-self: stretch;
flex-sm-nowrap
flex-wrap: nowrap;
flex-sm-wrap
flex-wrap: wrap;
flex-sm-wrap-reverse
flex-wrap: wrap-reverse;
flex-md-nowrap
flex-wrap: nowrap;
flex-md-wrap
flex-wrap: wrap;
flex-md-wrap-reverse
flex-wrap: wrap-reverse;
flex-lg-nowrap
flex-wrap: nowrap;
flex-lg-wrap
flex-wrap: wrap;
flex-lg-wrap-reverse
flex-wrap: wrap-reverse;
flex-xl-nowrap
flex-wrap: nowrap;
flex-xl-wrap
flex-wrap: wrap;
flex-xl-wrap-reverse
flex-wrap: wrap-reverse;
order-first
order: -1;
order-0
order: 0;
order-1
order: 1;
order-2
order: 2;
order-3
order: 3;
order-4
order: 4;
order-5
order: 5;
order-6
order: 6;
order-7
order: 7;
order-8
order: 8;
order-9
order: 9;
order-10
order: 10;
order-11
order: 11;
order-12
order: 12;
order-last
order: 13;
order-sm-first
order: -1;
order-sm-0
order: 0;
order-sm-1
order: 1;
order-sm-2
order: 2;
order-sm-3
order: 3;
order-sm-4
order: 4;
order-sm-5
order: 5;
order-sm-6
order: 6;
order-sm-7
order: 7;
order-sm-8
order: 8;
order-sm-9
order: 9;
order-sm-10
order: 10;
order-sm-11
order: 11;
order-sm-12
order: 12;
order-sm-last
order: 13;
order-md-first
order: -1;
order-md-0
order: 0;
order-md-1
order: 1;
order-md-2
order: 2;
order-md-3
order: 3;
order-md-4
order: 4;
order-md-5
order: 5;
order-md-6
order: 6;
order-md-7
order: 7;
order-md-8
order: 8;
order-md-9
order: 9;
order-md-10
order: 10;
order-md-11
order: 11;
order-md-12
order: 12;
order-md-last
order: 13;
order-lg-first
order: -1;
order-lg-0
order: 0;
order-lg-1
order: 1;
order-lg-2
order: 2;
order-lg-3
order: 3;
order-lg-4
order: 4;
order-lg-5
order: 5;
order-lg-6
order: 6;
order-lg-7
order: 7;
order-lg-8
order: 8;
order-lg-9
order: 9;
order-lg-10
order: 10;
order-lg-11
order: 11;
order-lg-12
order: 12;
order-lg-last
order: 13;
order-xl-first
order: -1;
order-xl-0
order: 0;
order-xl-1
order: 1;
order-xl-2
order: 2;
order-xl-3
order: 3;
order-xl-4
order: 4;
order-xl-5
order: 5;
order-xl-6
order: 6;
order-xl-7
order: 7;
order-xl-8
order: 8;
order-xl-9
order: 9;
order-xl-10
order: 10;
order-xl-11
order: 11;
order-xl-12
order: 12;
order-xl-last
order: 13;
align-content-start
align-content: flex-start;
align-content-end
align-content: flex-end;
align-content-center
align-content: center;
align-content-space-between
align-content: space-between;
align-content-space-around
align-content: space-around;
align-content-space-evenly
align-content: space-evenly;
align-content-stretch
align-content: stretch;
align-content-sm-start
align-content: flex-start;
align-content-sm-end
align-content: flex-end;
align-content-sm-center
align-content: center;
align-content-sm-space-between
align-content: space-between;
align-content-sm-space-around
align-content: space-around;
align-content-sm-space-evenly
align-content: space-evenly;
align-content-sm-stretch
align-content: stretch;
align-content-md-start
align-content: flex-start;
align-content-md-end
align-content: flex-end;
align-content-md-center
align-content: center;
align-content-md-space-between
align-content: space-between;
align-content-md-space-around
align-content: space-around;
align-content-md-space-evenly
align-content: space-evenly;
align-content-md-stretch
align-content: stretch;
align-content-lg-start
align-content: flex-start;
align-content-lg-end
align-content: flex-end;
align-content-lg-center
align-content: center;
align-content-lg-space-between
align-content: space-between;
align-content-lg-space-around
align-content: space-around;
align-content-lg-space-evenly
align-content: space-evenly;
align-content-lg-stretch
align-content: stretch;
align-content-xl-start
align-content: flex-start;
align-content-xl-end
align-content: flex-end;
align-content-xl-center
align-content: center;
align-content-xl-space-between
align-content: space-between;
align-content-xl-space-around
align-content: space-around;
align-content-xl-space-evenly
align-content: space-evenly;
align-content-xl-stretch
align-content: stretch;
flex-nowrap
flex-wrap: nowrap;
flex-wrap
flex-wrap: wrap;
flex-wrap-reverse
flex-wrap: wrap-reverse;
flex-grow-0
flex-grow: 0;
flex-grow-1
flex-grow: 1;
flex-shrink-0
flex-shrink: 0;
flex-shrink-1
flex-shrink: 1;
flex-sm-grow-0
flex-grow: 0;
flex-md-grow-0
flex-grow: 0;
flex-lg-grow-0
flex-grow: 0;
flex-xl-grow-0
flex-grow: 0;
flex-sm-grow-1
flex-grow: 1;
flex-md-grow-1
flex-grow: 1;
flex-lg-grow-1
flex-grow: 1;
flex-xl-grow-1
flex-grow: 1;
flex-sm-shrink-0
flex-shrink: 0;
flex-md-shrink-0
flex-shrink: 0;
flex-lg-shrink-0
flex-shrink: 0;
flex-xl-shrink-0
flex-shrink: 0;
flex-sm-shrink-1
flex-shrink: 1;
flex-md-shrink-1
flex-shrink: 1;
flex-lg-shrink-1
flex-shrink: 1;
flex-xl-shrink-1
flex-shrink: 1;
ads via vuetify
#
Enabling flexbox
Using 
display
 utilities you can turn any element into a flexbox container transforming 
direct children elements
 into flex items. Using additional flex property utilities, you can customize their interaction even further.
 I'm a single element in a flexbox container! 
 I'm a single element in an inline flexbox container! 
You can also customize flex utilities to apply based upon various breakpoints.
#
Caveats
It is important to note that using any of the display classes above will result in any display style previously added being overwritten. This is because of the classes using 
!important
 in their display styling.
#
Flex shorthand
The flex utility classes can be used to modify the 
flex
 css property. This makes it easy to position flex items within a flex container.
 I'm an element in an inline flexbox container! 
 I'm a single element in an inline flexbox container! 
 I'm a single element in an inline flexbox container! 
#
Flex direction
By default, 
d-flex
 applies 
flex-direction: row
 and can generally be omitted. However, there may be situations where you need to explicitly define it.
Flex item 1
Flex item 2
Flex item 3
Flex item 1
Flex item 2
Flex item 3
The 
flex-column
 and 
flex-column-reverse
 utility classes can be used to change the orientation of the flexbox container.
Flex item 1
Flex item 2
Flex item 3
Flex item 1
Flex item 2
Flex item 3
#
Flex justify
The 
justify-content
 flex setting can be changed using the flex justify classes. This by default will modify the flexbox items on the 
x-axis
 but is reversed when using 
flex-direction: column
, modifying the 
y-axis
. Choose from 
start
 (browser default), 
end
, 
center
, 
space-between
, 
space-around
, or 
space-evenly
.
 justify-start 
 justify-start 
 justify-start 
 justify-end 
 justify-end 
 justify-end 
 justify-center 
 justify-center 
 justify-center 
 justify-space-between 
 justify-space-between 
 justify-space-between 
 justify-space-around 
 justify-space-around 
 justify-space-around 
 justify-space-evenly 
 justify-space-evenly 
 justify-space-evenly 
#
Flex align
The 
align-items
 flex setting can be changed using the flex align classes. This by default will modify the flexbox items on the 
y-axis
 but is reversed when using 
flex-direction: column
, modifying the 
x-axis
. Choose from 
start
, 
end
, 
center
, 
baseline
, or 
stretch
 (browser default).
 align-start 
 align-start 
 align-start 
 align-end 
 align-end 
 align-end 
 align-center 
 align-center 
 align-center 
 align-baseline 
 align-baseline 
 align-baseline 
 align-stretch 
 align-stretch 
 align-stretch 
#
Flex align self
The 
align-self
 flex setting can be changed using the flex align-self classes. This by default will modify individual flexbox items across the 
y-axis
 but is reversed when using 
flex-direction: column
, modifying the 
x-axis
. Choose from 
start
, 
end
, 
center
, 
baseline
, 
stretch
, or 
auto
 (browser default, applies align-items property from flex container).
Flex item
align-self-start
Flex item
Flex item
align-self-end
Flex item
Flex item
align-self-center
Flex item
Flex item
align-self-baseline
Flex item
Flex item
align-self-auto
Flex item
Flex item
align-self-stretch
Flex item
#
Auto margins
Using the margin helper classes in a flexbox container, you can control the positioning of flex items on the 
x-axis
 or 
y-axis
 when using 
flex-row
 or 
flex-column
 respectively.
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
#
Using align-items
Mixing 
flex-direction: column
 and 
align-items
, you can utilize 
.mt-auto
 and 
.mb-auto
 helper classes to adjust flex item positioning.
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
#
Flex wrap
By default 
.d-flex
 does not provide any wrapping (behaves similarly to 
flex-wrap: nowrap
). This can be modified by applying flex-wrap helper classes in the format 
flex-{condition}
 where condition can be 
nowrap
, 
wrap
, or 
wrap-reverse
.
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 1
 Flex item 2
 Flex item 3
 Flex item 4
 Flex item 5
 Flex item 6
 Flex item 7
 Flex item 8
 Flex item 9
 Flex item 10
 Flex item 11
 Flex item 12
 Flex item 13
 Flex item 14
 Flex item 15
 Flex item 16
 Flex item 17
 Flex item 18
 Flex item 19
 Flex item 20
 Flex item 1
 Flex item 2
 Flex item 3
 Flex item 4
 Flex item 5
 Flex item 6
 Flex item 7
 Flex item 8
 Flex item 9
 Flex item 10
 Flex item 11
 Flex item 12
 Flex item 13
 Flex item 14
 Flex item 15
 Flex item 16
 Flex item 17
 Flex item 18
 Flex item 19
 Flex item 20
These helper classes can also be applied in the format 
flex-{breakpoint}-{condition}
 to create more responsive variations based on breakpoints. The following combinations are available:
#
Flex order
You can change the visual order of flex items with the 
order
 utilities.
 First flex item 
 Second flex item 
 Third flex item 
#
Flex align content
The 
align-content
 flex setting can be changed using the flex align-content classes. This by default will modify the wrapped flexbox content across the 
y-axis
 but is reversed when using 
flex-direction: column
, modifying the 
x-axis
. Choose from 
start
, 
end
, 
center
, 
space-between
, 
space-around
, 
space-evenly
 or 
stretch
 (browser default).
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
 Flex item 
#
Flex grow and shrink
Vuetify has helper classes for applying grow and shrink manually. These can be applied by adding the helper class in the format 
flex-{condition}-{value}
, where condition can be either 
grow
 or 
shrink
 and value can be either 
0
 or 
1
. The condition 
grow
 will permit an element to grow to fill available space, whereas 
shrink
 will permit an element to shrink down to only the space needs for its contents. However, this will only happen if the element must shrink to fit their container such as a container resize or being effected by a 
flex-grow-1
. The value 
0
 will prevent the condition from occurring whereas 
1
 will permit the condition. The following classes are available:
 I'm 2 column wide 
 I'm 1 column wide and I grow to take all the space 
 I'm 5 column wide and I shrink if there's not enough space 
These helper classes can also be applied in the format 
flex-{breakpoint}-{condition}-{state}
 to create more responsive variations based on breakpoints. The following combinations are available:
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Display
Styles
Grids
Components
CSS Reset
Styles
Elevation
Float
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/float/#overview:














Float ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Overview
Classes
Responsive
Sponsors
Support
#
Float
Applies a custom float across any breakpoint with responsive float utilities.
Report a Bug
Class
Properties
float-left
float: left;
float-right
float: right;
float-start
float: start;
float-end
float: end;
float-none
float: none;
float-sm-left
float: left;
float-sm-right
float: right;
float-sm-start
float: start;
float-sm-end
float: end;
float-sm-none
float: none;
float-md-left
float: left;
float-md-right
float: right;
float-md-start
float: start;
float-md-end
float: end;
float-md-none
float: none;
float-lg-left
float: left;
float-lg-right
float: right;
float-lg-start
float: start;
float-lg-end
float: end;
float-lg-none
float: none;
float-xl-left
float: left;
float-xl-right
float: right;
float-xl-start
float: start;
float-xl-end
float: end;
float-xl-none
float: none;
ads via vuetify
#
Overview
Float utility classes apply floating based upon the current viewport size using the 
CSS float property
.
Device
Code
Type
Range
Extra small
xs
Small to large phone
< 600px
Small
sm
Small to medium tablet
600px > < 960px
Medium
md
Large tablet to laptop
960px > < 1280px
Large
lg
Laptop to desktop
1280px > < 1920px
Extra large
xl
1080p to 1440p desktop
1920px > < 2560px
Extra extra large
xxl
4k and ultra-wide
> 2560px
 Specification
#
Classes
Easily toggle a float with a class:
 Float left on all viewport sizes 
 Float right on all viewport sizes 
 Don't float on all viewport sizes 
#
Responsive
Floats can also be applied on a per breakpoint (viewport) basis.
 Float left on viewports sized SM (small) or wider 
 Float left on viewports sized MD (medium) or wider 
 Float left on viewports sized LG (large) or wider 
 Float left on viewports sized XL (extra-large) or wider 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Text and typography
Styles
Transitions
Styles
Content
Styles
Flex
Opacity
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/opacity/#usagehttps://vuetifyjs.com/en/styles/overflow/#how-it-works:














Opacity ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
Hover
SASS variables
Sponsors
Support
#
Opacity
Utilities for controlling the opacity of elements in your application.
Report a Bug
This feature was introduced in 
v3.6.0 (Nebula)
Class
Properties
opacity-0
opacity: 0;
opacity-10
opacity: .1;
opacity-20
opacity: .2;
opacity-30
opacity: .3;
opacity-40
opacity: .4;
opacity-50
opacity: .5;
opacity-60
opacity: .6;
opacity-70
opacity: .7;
opacity-80
opacity: .8;
opacity-90
opacity: .9;
opacity-100
opacity: 1;
opacity-hover
opacity: var(‚Äìv-hover-opacity);
opacity-focus
opacity: var(‚Äìv-focus-opacity);
opacity-selected
opacity: var(‚Äìv-selected-opacity);
opacity-activated
opacity: var(‚Äìv-activated-opacity);
opacity-pressed
opacity: var(‚Äìv-pressed-opacity);
opacity-dragged
opacity: var(‚Äìv-dragged-opacity);
#
Usage
The 
opacity
 utilities allow you to quickly change the opacity of any element.
opacity-100
opacity-80
opacity-60
opacity-40
opacity-20
#
Hover
Using the 
v-hover
 component, conditionally apply an opacity class when the element is hovered over.
#
SASS variables
You can also use the following SASS variables to customize the opacity color and width:
 src/styles/settings.scss
@use
 'vuetify/settings' with (


  
$opacities
:
 (


    
hover
:
 var(--v-hover-opacity),


    
focus
:
 var(--v-focus-opacity),


    
selected
:
 var(--v-selected-opacity),


    
activated
:
 var(--v-activated-opacity),


    
pressed
:
 var(--v-pressed-opacity),


    
dragged
:
 var(--v-dragged-opacity),


    
0
:
 0,


    
10
:
 .1,


    
20
:
 .2,


    
30
:
 .3,


    
40
:
 .4,


    
50
:
 .5,


    
60
:
 .6,


    
70
:
 .7,


    
80
:
 .8,


    
90
:
 .9,


    
100
:
 1

  
)


);


Disable opacity class generation by setting the $opacities variable to 
false
.
 src/styles/settings.scss
@use
 'vuetify/settings' with (


  
$opacities
:
 false


);


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Display
Styles
Content
Styles
Float
Overflow
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/position/#usage:














Position ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
Static
Relative
Absolute
Fixed
Sticky
SASS Variables
Sponsors
Support
#
Position
Utilities for controlling the positioning of elements in your application.
Report a Bug
Class
Properties
position-static
position: static;
position-relative
position: relative;
position-absolute
position: absolute;
position-fixed
position: fixed;
position-sticky
position: sticky;
top-0
top: 0;
right-0
right: 0;
bottom-0
bottom: 0;
left-0
left: 0;
ads via vuetify
#
Usage
The 
position
 utilities allow you to quickly style the positioning of any element. These classes can be used to apply the 
position
 and 
top
, 
right
, 
bottom
, and 
left
 properties to an element.
#
Static
The default position value for all elements is 
static
. This means that the element is positioned according to the normal flow of the document. The 
top
, 
right
, 
bottom
, 
left
 properties have no effect on a statically positioned element.
Static parent
 Absolute child 
#
Relative
The 
position-relative
 class allows you to position an element relative to its normal position in the document. This means that the 
top
, 
right
, 
bottom
, and 
left
 properties can be used to move the element from its normal position.
Relative parent
 Absolute child 
#
Absolute
The 
position-absolute
 class allows you to position an element relative to its closest positioned ancestor. If no positioned ancestor is found, the element is positioned relative to the document body.
With static child
Relative parent
Static parent
 Static child 
 Static sibling 
With absolute child
Relative parent
Static parent
 Absolute child 
 Static sibling 
#
Fixed
The 
position-fixed
 class allows you to position an element relative to the viewport. This means that the element will stay in the same position even when the page is scrolled.
 Fixed child 
Relative parent
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
#
Sticky
The 
position-sticky
 class allows you to position an element based on the user‚Äôs scroll position. The element is treated as 
relative
 until it crosses a specified threshold, at which point it is treated as 
fixed
.
Relative parent
 Sticky header 1
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Sticky header 2
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Sticky header 3
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Sticky header 4
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Sticky header 5
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
 Static child 
#
SASS Variables
Disable position class generation by setting $position, $top, $right, $bottom, and $left to 
false
.
 src/styles/settings.scss
@use
 
'vuetify/settings'
 
with
 
(

  
$utilities
:
 
(

    
position
:
 
false
,

    
top
:
 
false
,

    
right
:
 
false
,

    
bottom
:
 
false
,

    
left
:
 
false

  
)


)
;


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Display
Styles
Spacing
Styles
Flex
Styles
Overflow
Sizing
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/sizing/#usage:














Sizing ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
Height
Width
SASS Variables
Sponsors
Support
#
Sizing
Sizing utility classes are used to modify the dimensions of an element.
Report a Bug
Class
Description
h-auto
height: auto
h-screen
height: 100vh
h-0
height: 0
h-25
height: 25%
h-50
height: 50%
h-75
height: 75%
h-100
height: 100%
fill-height
height: 100%
height-screen
height: 100dvh
w-auto
width: auto
w-0
width: 0
w-33
width: 33%
w-25
width: 25%
w-50
width: 50%
w-66
width: 66%
w-75
width: 75%
w-100
width: 100%
ads via vuetify
#
Usage
The sizing utility classes allow you to quickly style the dimensions of any element. These classes can be used to apply the 
height
 and 
width
 properties to an element.
#
Height
Specify the 
height
 property of 
block level elements
 with a utility class. The following classes are applied using the format 
.{prefix}-{size}
 ; where 
prefix
 is 
h
 and 
size
 is the value.
.h-25
.h-50
.h-75
.h-100
#
Width
Specify the 
width
 property of 
block level elements
 with a utility class. The following classes are applied using the format 
.{prefix}-{size}
 ; where 
prefix
 is 
w
 and 
size
 is the value.
| Class | Description |
.w-25
.w-33
.w-50
.w-66
.w-75
.w-100
#
SASS Variables
You can also use the following SASS variables to customize the generated height and width classes:
 src/styles/settings.scss
@use
 
'vuetify/settings'
 
with
 
(

  
$utilities
:
 
(

    
"fill-height"
:
 
(

      
property
:
 height
,

      
class
:
 fill
,

      
values
:
 
(

        
height
:
 100%
      
)

    
)
,

    
"height"
:
 
(

      
property
:
 height
,

      
responsive
:
 
true
,

      
class
:
 h
,

      
values
:
 
(

        
auto
:
 auto
,

        
screen
:
 100vh
,

        
0
:
 0
,

        
25
:
 25%
,

        
50
:
 50%
,

        
75
:
 75%
,

        
100
:
 100%
      
)

    
)
,

    
"height-screen"
:
 
(

      
property
:
 height
,

      
class
:
 h
,

      
values
:
 
(

        
screen
:
 100dvh
      
)

    
)
,

    
"width"
:
 
(

      
property
:
 width
,

      
responsive
:
 
true
,

      
class
:
 w
,

      
values
:
 
(

        
auto
:
 auto
,

        
0
:
 0
,

        
25
:
 25%
,

        
33
:
 33%
,

        
50
:
 50%
,

        
66
:
 66%
,

        
75
:
 75%
,

        
100
:
 100%
      
)

    
)

  
)


)
;


Disable height/width class generation by setting the the fill-height, height, height-screen, and, width variables to 
false
.
 src/styles/settings.scss
@use
 
'vuetify/settings'
 
with
 
(

  
$utilities
:
 
(

    
"fill-height"
:
 
false
,

    
"height"
:
 
false
,

    
"height-screen"
:
 
false
,

    
"width"
:
 
false

  
)


)
;


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Content
Styles
Flex
Styles
Text and typography
Styles
Position
Spacing
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/spacing/#how-it-works:














Spacing ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
How it works
Examples
Breakpoints
Horizontal
Gap
Negative margin
Sponsors
Support
#
Spacing
Update your layout without creating new classes. Spacing helpers are useful for modifying the padding and margin of an element.
Report a Bug
Use the playground to get a feel for what the different helper classes can do. For an explanation of 
how they work
, see the How it works section below.
p
Padding
Padding
a
Size
Size
6
m
Margin
Margin
a
Size
Size
2
Use the controls above to try out the different spacing helpers.
#
How it works
The helper classes apply 
margin
, 
padding
, or 
gap
 to an element ranging from 
0 to 16
. Each size increment was designed to align with common Material Design spacings. These classes can be applied using the following format 
{property}{direction}-{size}
.
The 
property
 applies the type of spacing:
m
 - applies 
margin
p
 - applies 
padding
g
 - applies 
gap
The 
direction
 designates the side the property applies to:
t
 - applies the spacing for 
margin-top
 and 
padding-top
b
 - applies the spacing for 
margin-bottom
 and 
padding-bottom
l
 - applies the spacing for 
margin-left
 and 
padding-left
r
 - applies the spacing for 
margin-right
, 
padding-right
, and 
row-gap
s
 - applies the spacing for 
margin-left
/
padding-left
 
(in LTR mode)
 and 
margin-right
/
padding-right
 
(in RTL mode)
e
 - applies the spacing for 
margin-right
/
padding-right
 
(in LTR mode)
 and 
margin-left
/
padding-left
 
(in RTL mode)
x
 - applies the spacing for margin and padding 
*-left
 and 
*-right
y
 - applies the spacing for margin and padding 
*-top
 and 
*-bottom
a
 - applies the spacing for 
margin
, 
padding
 and 
gap
 in all directions
c
 - applies the spacing for 
column-gap
The 
size
 controls the increment of the property in 4px intervals:
0
 - eliminates all 
margin
, 
padding
 or 
gap
 by setting it to 
0
1
 - sets 
margin
, 
padding
 or 
gap
 to 4px
2
 - sets 
margin
, 
padding
 or 
gap
 to 8px
3
 - sets 
margin
, 
padding
 or 
gap
 to 12px
4
 - sets 
margin
, 
padding
 or 
gap
 to 16px
5
 - sets 
margin
, 
padding
 or 
gap
 to 20px
6
 - sets 
margin
, 
padding
 or 
gap
 to 24px
7
 - sets 
margin
, 
padding
 or 
gap
 to 28px
8
 - sets 
margin
, 
padding
 or 
gap
 to 32px
9
 - sets 
margin
, 
padding
 or 
gap
 to 36px
10
 - sets 
margin
, 
padding
 or 
gap
 to 40px
11
 - sets 
margin
, 
padding
 or 
gap
 to 44px
12
 - sets 
margin
, 
padding
 or 
gap
 to 48px
13
 - sets 
margin
, 
padding
 or 
gap
 to 52px
14
 - sets 
margin
, 
padding
 or 
gap
 to 56px
15
 - sets 
margin
, 
padding
 or 
gap
 to 60px
16
 - sets 
margin
, 
padding
 or 
gap
 to 64px
n1
 - sets 
margin
 to -4px
n2
 - sets 
margin
 to -8px
n3
 - sets 
margin
 to -12px
n4
 - sets 
margin
 to -16px
n5
 - sets 
margin
 to -20px
n6
 - sets 
margin
 to -24px
n7
 - sets 
margin
 to -28px
n8
 - sets 
margin
 to -32px
n9
 - sets 
margin
 to -36px
n10
 - sets 
margin
 to -40px
n11
 - sets 
margin
 to -44px
n12
 - sets 
margin
 to -48px
n13
 - sets 
margin
 to -52px
n14
 - sets 
margin
 to -56px
n15
 - sets 
margin
 to -60px
n16
 - sets 
margin
 to -64px
auto
 - sets the spacing to 
auto
#
Examples
#
Breakpoints
Vuetify comes with a 12 point grid system built using Flexbox. Spacing is used to create specific layouts within an application‚Äôs content. It consists of 5 media breakpoints used to target specific screen sizes or orientations: 
xs
, 
sm
, 
md
, 
lg
 and 
xl
. The default resolutions are defined below in the 
Viewport Breakpoints
 table and can be modified by customizing the 
breakpoint service config
.
Device
Code
Type
Range
Extra small
xs
Small to large phone
< 600px
Small
sm
Small to medium tablet
600px > < 960px
Medium
md
Large tablet to laptop
960px > < 1280px
Large
lg
Laptop to desktop
1280px > < 1920px
Extra large
xl
1080p to 1440p desktop
1920px > < 2560px
Extra extra large
xxl
4k and ultra-wide
> 2560px
 Specification
The helper classes apply 
margin
 or 
padding
 at a given breakpoint. These classes can be applied using the following format: 
{property}{direction}-{breakpoint}-{size}
. This does not apply to 
xs
 as it is inferred; e.g. 
ma-xs-2
 equals 
ma-2
.
 Adjust screen size to see spacing changes 
#
Horizontal
Margin helper classes let you easily center content horizontally.
 Centered 
#
Gap
Use the gap helper classes to easily apply a gap between content.
 Gapped 
 Gapped 
 Gapped 
 Gapped 
 Gapped 
 Gapped 
 Gapped 
 Gapped 
#
Negative margin
Margin can also be applied negatively at the same 
1 to 16
 intervals.
This card has negative top margin applied
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Elevation
Styles
Content
Styles
Grids
Components
Sizing
Text and typography
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/styles/text-and-typography/#typography:














Text and typography ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Typography
Breakpoints
Font emphasis
Text
Alignment
Decoration
Opacity
Transform
Wrapping and overflow
RTL Alignment
Sponsors
Support
#
Text and typography
Control text size, alignment, wrapping, overflow, transforms and more. By default, Vuetify uses the Material Design specification 
Roboto Font
.
Report a Bug
Design Specification
Class
Properties
text-h1
font-size: 6rem;
font-weight: 300;
line-height: 1;
letter-spacing: -0.015625em
text-h2
font-size: 3.75rem;
font-weight: 300;
line-height: 1;
letter-spacing: -0.0083333333em;
text-h3
font-size: 3rem;
font-weight: 400;
line-height: 1.05;
letter-spacing: normal;
text-h4
font-size: 2.125rem;
font-weight: 400;
line-height: 1.175;
letter-spacing: 0.0073529412em;
text-h5
font-size: 1.5rem;
font-weight: 400;
line-height: 1.333;
line-height: normal;
text-h6
font-size: 1.25rem;
font-weight: 500;
line-height: 1.6;
letter-spacing: 0.0125em;
text-subtitle-1
font-size: 1rem;
font-weight: normal;
line-height: 1.75;
letter-spacing: 0.009375em;
text-subtitle-2
font-size: 0.875rem;
font-weight: 500;
line-height: 1.6;
letter-spacing: 0.0071428571em;
text-body-1
font-size: 1rem;
font-weight: 400;
line-height: 1.5;
letter-spacing: 0.03125em;
text-body-2
font-size: font-size: 0.875rem;
font-weight: 400;
line-height: 1.425;
letter-spacing: 0.0178571429em;
text-button
font-size: 0.875rem;
font-weight: 500;
line-height: 2.6;
letter-spacing: 0.0892857143em;
text-transform: uppercase;
text-caption
font-size: 0.75rem;
font-weight: 400;
line-height: 1.667;
letter-spacing: 0.0333333333em;
text-overline
font-size: 0.75rem;
font-weight: 500;
line-height: 2.667;
letter-spacing: 0.1666666667em;
text-transform: uppercase;
text-high-emphasis
color: rgba(var(‚Äìv-theme-on-background), var(‚Äìv-high-emphasis-opacity));
text-medium-emphasis
color: rgba(var(‚Äìv-theme-on-background), var(‚Äìv-medium-emphasis-opacity));
text-disabled
color: rgba(var(‚Äìv-theme-on-background), var(‚Äìv-disabled-opacity));
text-uppercase
text-transform: uppercase;
text-lowercase
text-transform: lowercase;
text-capitalize
text-transform: capitalize;
text-start
text-align: start;
text-center
text-align: center;
text-end
text-align: end;
text-justify
text-align: justify;
text-left
text-align: left;
text-right
text-align: right;
text-truncate
overflow: hidden;
text-overflow: ellipsis;
white-space: nowrap;
text-no-wrap
white-space: nowrap;
text-break
overflow-wrap: break-word;
text-decoration-none
text-decoration: none;
text-decoration-overline
text-decoration: overline;
text-decoration-underline
text-decoration: underline;
text-decoration-line-through
text-decoration: line-through;
font-weight-black
font-weight: 900;
font-weight-bold
font-weight: 700;
font-weight-medium
font-weight: 500;
font-weight-regular
font-weight: 400;
font-weight-light
font-weight: 300;
font-weight-thin
font-weight: 100;
font-italic
font-style: italic;
text-{breakpoint}-h1
Set the font size for the specified breakpoint.
text-{breakpoint}-h2
Set the font size for the specified breakpoint.
text-{breakpoint}-h3
Set the font size for the specified breakpoint.
text-{breakpoint}-h4
Set the font size for the specified breakpoint.
text-{breakpoint}-h5
Set the font size for the specified breakpoint.
text-{breakpoint}-h6
Set the font size for the specified breakpoint.
text-{breakpoint}-subtitle-1
Set the font size for the specified breakpoint.
text-{breakpoint}-subtitle-2
Set the font size for the specified breakpoint.
text-{breakpoint}-body-1
Set the font size for the specified breakpoint.
text-{breakpoint}-body-2
Set the font size for the specified breakpoint.
text-{breakpoint}-button
Set the font size for the specified breakpoint.
text-{breakpoint}-caption
Set the font size for the specified breakpoint.
text-{breakpoint}-overline
Set the font size for the specified breakpoint.
ads via vuetify
#
Typography
Control the size and style of text using the Typography helper classes. These values are based upon the 
Material Design type specification
.
Heading 1
Class
text-h1
Heading 2
Class
text-h2
Heading 3
Class
text-h3
Heading 4
Class
text-h4
Heading 5
Class
text-h5
Heading 6
Class
text-h6
Subtitle 1
Class
text-subtitle-1
Subtitle 2
Class
text-subtitle-2
Body 1
Class
text-body-1
Body 2
Class
text-body-2
Button
Class
text-button
Caption
Class
text-caption
Overline
Class
text-overline
#
Breakpoints
All of the typography classes support the responsive breakpoints seen in other parts of the framework. The base class 
.text-{value}
 corresponds to the 
xsAndUp
 breakpoint, while the classes 
.text-{breakpoint}-{value}
 can be used for the rest of the breakpoints (
sm
, 
md
, 
lg
 and 
xl
).
The following example shows a slightly contrived example of how one can use the different classes to effect:
Title
 Body text 
#
Font emphasis
Material design, by default, supports 
100, 300, 400, 500, 700, 900
 font weights and italicized text.
 Black text. 
 Bold text. 
 Medium weight text. 
 Normal weight text. 
 Light weight text. 
 Thin weight text. 
 Italic text. 
#
Text
#
Alignment
Alignment helper classes allow you to easily re-align text.
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
The alignment classes also support responsive breakpoints.
 Left aligned on all viewport sizes. 
 Center aligned on all viewport sizes. 
 Right aligned on all viewport sizes. 
 Left aligned on viewports SM (small) or wider. 
 Left aligned on viewports MD (medium) or wider. 
 Left aligned on viewports LG (large) or wider. 
 Left aligned on viewports XL (extra-large) or wider. 
#
Decoration
Remove text decoration with the 
.text-decoration-none
 class or add an 
overline, underline or line-through
 by using 
.text-decoration-overline
, 
.text-decoration-underline
, and 
.text-decoration-line-through
.
 Non-underlined link 
 Line-through text 
 Overline text 
 Underline text 
#
Opacity
Opacity helper classes allow you to easily adjust the emphasis of text. 
text-high-emphasis
 has the same opacity as default text. 
text-medium-emphasis
 is used for hints and helper text. De-emphasize text with 
text-disabled
.
 High-emphasis has an opacity of 87% in light theme and 100% in dark. 
 Medium-emphasis text and hint text have opacities of 60% in light theme and 70% in dark. 
 Disabled text has an opacity of 38% in light theme and 50% in dark. 
#
Transform
Text can be transformed with text capitalization classes.
 Lowercased text. 
 Uppercased text. 
 capitalized text. 
Text breaking and the removal of 
text-transform
 is also possible. In the first example, the 
text-transform: uppercase
 custom class is overwritten and allows the text casing to remain. In the second example, we break up a longer word to fit the available space.
 Random TEXT cApitaLization 
 SUBDERMATOGLYPHIC 
#
Wrapping and overflow
You can prevent wrapping text with the 
.text-no-wrap
 utility class.
 This text should overflow the parent. 
Longer content can be truncated with a text ellipsis using the 
.text-truncate
 utility class.
Requires
 
display: inline-block
 
or
 
display: block
.
 Suspendisse faucibus, nunc et pellentesque egestas, lacus ante convallis tellus. 
#
RTL Alignment
When using 
RTL
, you may want to keep the alignment regardless of current text direction. This can be achieved by setting the direction to either 
left
 or 
right
.
If instead you want the alignment to respond to the current text direction, use 
start
 and 
end
.
 Agnostic RTL Alignment 
 Left aligned text, irrespective of RTL or LTR. 
 Right aligned text, irrespective of RTL or LTR. 
 Responsive RTL Alignment 
 Left aligned text on LTR and right aligned on RTL. 
 Right aligned text on LTR and left aligned on RTL. 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Display
Styles
Content
Styles
Internationalization (i18n)
Features
Spacing
All Components
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/all/#containment:














All Vuetify Components ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Containment
Navigation
Form inputs and controls
Layouts
Selection
Data and display
Feedback
Images and icons
Pickers
Providers
Miscellaneous
Sponsors
Support
#
Components
Vuetify Components are interactive building blocks for creating user interfaces.
#
Containment
Containment components wrap other components and provide additional functionality. They are typically used to provide a consistent layout or styling.
Button component
The button component allows users to take actions or make choices with a single tap
Card components
The card component is a versatile and enhanced sheet of paper that provides a simple interface for headings, text, images, and actions
List components
The list component is a display interface for items
Chip component
Chips are useful for displaying small pieces of information
Divider components
Dividers are used to separate content into distinct sections or groups
Expansion panel components
Expansion panels are used to reveal additional content in a compact manner
Menu component
The menu component is used to display a list of actions that the user can make
Dialog component
The dialog component informs a user about a specific task and may contain critical information
Bottom sheet component
The bottom sheet component elevates content from the bottom of the screen
Overlay component
The overlay component is used to display a custom scrim that sits on top of the application
Toolbar components
Toolbars are used to label a content area and / or display a list of actions that the user can make
Tooltip component
Tooltips provide additional information about an element when the user hovers over it
Sheet component
The sheet component is a simple piece of paper that can be used to style and customize a block of content
#
Navigation
Navigation components are used to navigate between different views or pages.
App bars
The app bar is used for top level navigation items and current page actions
FABs
The floating action button is used for a promoted actions within an application
Navigation drawers
Navigation drawers contain primary application navigation links
Pagination component
The Pagination component is used to separate long sets of data
Bottom navigation
The bottom navigation component is used for displaying navigation links on mobile
Breadcrumbs components
Breadcrumbs are navigational helpers for router pages
Footer component
The footer component is a simple navigation area with inner site links
Speed dials
The speed dial component is a floating action button that can reveal additional actions when clicked
System bar
The system bar component shows application information with iconography, time, and more
Tabs components
Tabs are used to organize content into different sections that can be viewed independently
#
Form inputs and controls
Form components are used to collect user input in a variety of ways.
Autocomplete component
Autocompletes are used to provide suggestions to the user as they type into a field
Combobox components
The combobox component is used to select a value from a list of options with the ability to enter a custom value
Text field
The text field component accepts textual input from users and is a replacement for the native text input element
Checkbox components
The checkbox component is a replacement for the native input checkbox
Switch components
The switch component is an alternately styled checkbox
Radio button
The radio component is a replacement for its native counterpart
File input
The file input component is used to select files from the user‚Äôs device and is a replacement for the native file input element
Form component
The form component is used to wrap form elements and provide a consistent styling and a single source for validation
Inputs component
Create custom inputs that can be used with the v-model directive
Labs Component
Number input component
The number input component is used for collecting numerical data from the user
OTP Input component
The OTP input component is used for MFA authentication via input field
Select component
The select component is used to select a value from a list of options and is a replacement for the native select element
Slider component
Sliders are used to select a value from a range of values by moving a slider thumb and are a replacement for the native input range element
Range slider
Range sliders are regular sliders with the ability to select in a range
Textarea component
The textarea component is a replacement for the native textarea element
#
Layouts
Layout components are used to create responsive layouts.
grids
The grid component is used to create responsive layouts
#
Selection
These components allow a user to select one or multiple items from a list of options.
Carousel component
Carousels are used to display multiple forms of visual content
Button group
Button groups are used to select between multiple options using the button component
Chip group
Chip group is a wrapper component that makes chips interactive and allows them to be selected
Window components
The window component is used to display a block of content based upon a model
Stepper components
The stepper component is a linear progress control used to break lengthy forms into smaller logical sections
#
Data and display
These components are used to display data and information in a variety of ways.
Confirm edit component
The confirm edit component is used to confirm changes to data
Data iterator component
The data iterator component provides an easy interface for paginating and sorting data
Data table component
Data tables are used to display large amounts of data in a small amount of space
Infinite scroll component
The Infinite scroll component is a container that loads more items when scrolling
Server side table component
Server side data tables are intended to be used with a server side data source
Sparkline component
The sparkline component creates beautiful and expressive simple graphs for displaying numerical data
Virtual Data table component
The virtual data table component is used to display very large subsets of data
Table component
The table component is a barebones table for manually displaying data and is a replacement for the native table element
Virtual scroll component
The virtual scroller component makes it possible to render large amounts of data without sacrificing performance
#
Feedback
These components are used to provide feedback to the user within content, over content, or in response to user actions.
Alert component
Alerts convey important information to the user
Badge component
Badges superscript or subscript an avatar-like icon or text onto content.
Banner component
Banners are used to communicate important information to the user
Empty state component
The empty state component is used to indicate that a page or area on a page has no content.
Skeleton loader component
Displays a content, enhancing perceived performance during data-fetching & rendering
Snackbar component
The snackbar component is used to display a message to the user that hovers over existing content
Rating component
Ratings are useful for collecting user feedback
Timeline components
Timeline components are used to display a list of events in chronological order
Hover component
The hover component is a wrapper component that allows you to react to hover events
Progress circular component
Circular progress‚Äôs are a visual indicator of numerical data in a circle
Progress linear component
The linear progress component is used to display numerical data in a horizontal line
#
Images and icons
This subset of components are used to display media in a variety of ways.
Aspect ratios component
The aspect ratio component enforces a defined ratio
Avatar component
Avatars are used in numerous components to display avatars and profile pictures
Icon component
The icon component is an reusable component that can be used to display icons
Image component
The image component provides a flexible interface for displaying images
Parallax component
Creates a 3d effect that makes an image appear to move slower than the foreground
#
Pickers
These components are used to select a value from a specifically styled set of options.
Color picker component
The color picker component is used to select a color from a palette
Date picker component
The date picker component is used to select a single date from a calendar month / year.
#
Providers
Defaults provider component
The defaults provider component is used to set default values for all components within a template
Locale provider component
The locale provider component allows you to change the language of all components within its slot
Theme provider component
The theme provider component allows you to change the theme of all children components
#
Miscellaneous
These components don‚Äôt fit into a traditional category and are used for a variety of purposes.
Lazy component
The lazy component is a wrapper component that prevents the rendering of its child components until it is visible in the viewport
No ssr component
This component is used to prevent the rendering of its child components on the server
This page is under 
design
 construction and will be updated with the missing images over time.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Text and typography
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/explorer/:








































API Explorer ‚Äî Vuetify




Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Sponsors
Support
#
API Explorer
Quickly search the Vuetify API for components, directives, and composables
 API Properties will appear here 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
All Components
Application
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/application/#api:














Application ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
API
Guide
Theme
Sponsors
Support
#
Application
The 
v-app
 component is an optional feature that serves as the root layout component as well as providing an easy way to control the theme used at the root level.
Report a Bug
#
API
Component
Description
v-app
Primary Component
v-main
Content area
Toggle Inline API
#
Guide
In Vuetify, the 
v-app
 component is a convenient way to dynamically modify your application‚Äôs current theme and provide an entry point for your layouts. When an application is mounted, each layout child registers itself with the closest layout parent and is then automatically placed in your window.
More information on how to interact with the root sizing and styling is on the 
Application
 page.
When placing your application level components, the order matters. Elements are stacked based on when they register and are rendered in the DOM after the first 
nextTick
 (to account for suspense). Layouts utilize 
suspense
 to allow all layout components to register before rendering the initial layout.
The following example demonstrates how the 
v-app-bar
 component takes priority over 
v-navigation-drawer
 because of its rendering order:
<
template
>


<
v-responsive
 
class
=
"
border rounded
"
 
max-height
=
"
300
"
>


<
v-app
>


<
v-app-bar
 
title
=
"
App bar
"
>
</
v-app-bar
>


<
v-navigation-drawer
>


<
v-list
>


<
v-list-item
 
title
=
"
Navigation drawer
"
>
</
v-list-item
>


</
v-list
>


</
v-navigation-drawer
>


<
v-main
>


<
v-container
>


<
h1
>
Main Content
</
h1
>


</
v-container
>


</
v-main
>


</
v-app
>


</
v-responsive
>


</
template
>
App bar
Navigation drawer
Main Content
If we swap 
v-app-bar
 and 
v-navigation-drawer
, the registration order changes and the layout system layers the two components differently.
<
template
>


<
v-responsive
 
class
=
"
border rounded
"
 
max-height
=
"
300
"
>


<
v-app
>


<
v-navigation-drawer
>


<
v-list
>


<
v-list-item
 
title
=
"
Navigation drawer
"
>
</
v-list-item
>


</
v-list
>


</
v-navigation-drawer
>


<
v-app-bar
 
title
=
"
App bar
"
>
</
v-app-bar
>


<
v-main
>


<
v-container
>


<
h1
>
Main Content
</
h1
>


</
v-container
>


</
v-main
>


</
v-app
>


</
v-responsive
>


</
template
>
Navigation drawer
App bar
Main Content
#
Theme
The 
v-app
 component makes it easy to enable one of your application defined themes. By default, Vuetify comes with 2 themes, 
light
 and 
dark
. Each one is a collection of various colors used to style each individual component. Because 
v-app
 acts as an interface for 
theme
 functionality, you have the ability to change it dynamically within your template.
The following example demonstrates how to use the 
theme
 prop to toggle the theme from dark to light.
<
template
>


<
v-responsive
 
class
=
"
border rounded
"
 
max-height
=
"
300
"
>


<
v-app
 
:theme
=
"
theme
"
>


<
v-app-bar
 
class
=
"
px-3
"
>


<
v-spacer
>
</
v-spacer
>


<
v-btn


:prepend-icon
=
"
theme === 'light' ? 'mdi-weather-sunny' : 'mdi-weather-night'
"


text
=
"
Toggle Theme
"


slim


@click
=
"
onClick
"


>
</
v-btn
>


</
v-app-bar
>


<
v-main
>


<
v-container
>


<
h1
>
Main Content
</
h1
>


</
v-container
>


</
v-main
>


</
v-app
>


</
v-responsive
>


</
template
>
Toggle Theme
Main Content
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Theme
Features
App bars
Components
Navigation drawers
Components
Bottom sheets
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/bottom-sheets/#usage:














Bottom sheet component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
Model
Inset
Slots
Examples
Music Player
Open In List
Sponsors
Support
#
Bottom sheets
The bottom sheet is a modified 
v-dialog
 that slides from the bottom of the screen, similar to a 
v-bottom-navigation
.
Report a Bug
Open issues
View on GitHub
Design Specification
ads via vuetify
This feature was introduced in 
v3.4.0 (Blackguard)
#
Usage
Whereas a bottom navigation component is for buttons and specific application level actions, a bottom sheet is meant to contain anything.
 Default 
Inset
Click Me
<
v-bottom-sheet
>


<
template
 
v-slot:
activator
=
"
{ props }
"
>


<
v-btn
 
v-bind
=
"
props
"
 
text
=
"
Click Me
"
>
</
v-btn
>


</
template
>


<
v-card


title
=
"
Bottom Sheet
"


text
=
"
Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ut, eos? Nulla aspernatur odio rem, culpa voluptatibus eius debitis dolorem perspiciatis asperiores sed consectetur praesentium! Delectus et iure maxime eaque exercitationem!
"


>
</
v-card
>


</
v-bottom-sheet
>
#
API
Component
Description
v-bottom-sheet
Primary Component
Toggle Inline API
#
Anatomy
The recommended components to use inside of a 
v-bottom-sheet
 are:
v-card
v-list
v-sheet
Element / Area
Description
1. Container
The bottom sheet is a dialog that animates from the bottom of the screen
#
Guide
The 
v-bottom-sheet
 component is a modified 
v-dialog
 that slides from the bottom of the screen. It is used for elevating content above other elements in a dialog style fashion. The bottom sheet can be controlled using the 
v-model
 prop or through the 
activator
 slot.
The following code snippet is an example of a basic 
v-bottom-sheet
 component:
<
v-bottom-sheet
>

  
<
v-card

    
title
=
"
Bottom Sheet
"

    
text
=
"
Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ut, eos? Nulla aspernatur odio rem, culpa voluptatibus eius debitis.
"

  
>
</
v-card
>


</
v-bottom-sheet
>


#
Props
The 
v-bottom-sheet
 component has access to all of the props available in 
v-dialog
.
#
Model
The 
v-model
 (or 
model-value
) controls the visibility of the bottom sheet:
Click Me
This also works in tandem with the 
activator
 slot.
#
Inset
With the 
inset
 prop, reduce the maximum width of the content area on desktop to 70%. This can be further reduced manually using the 
width
 prop.
Click Me
#
Slots
The 
v-bottom-sheet
 component has access to all of the slots available in 
v-dialog
.
Slot
Description
1. Default
The default slot
2. Activator
The activator slot is used to open the bottom sheet
The 
activator
 slot is not required when using the 
v-model
 prop.
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-bottom-sheet
 component.
#
Music Player
Using a inset bottom sheet, you can make practical components such as this simple music player.
Click Me
#
Open In List
By combining a functional list into a bottom sheet, you can create a simple ‚Äòopen in‚Äô component.
Click Me
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Dialogs
Components
Lists
Components
Menus
Components
Application
Buttons
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/buttons/#usage:














Button component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
Density
Size
Block
Rounded
Elevation
Ripple
Variants
Icon
Loaders
Inside of bars
Slots
Icon color
Custom loader
Examples
Discord event
Survey group
Tax form confirmation
Dialog action
Cookie settings
Readonly buttons
Global Configuration
Aliasing
SASS Variables
Defaults Side Effects
Banners
Bottom navigation
Button groups
Cards
Snackbars
Toolbars and AppBars
Accessibility
ARIA Attributes
Keyboard Navigation
Accessible Labels
Touch Target Size
Sponsors
Support
#
Buttons
The 
v-btn
 component replaces the standard html button with a material design theme and a multitude of options. Any color helper class can be used to alter the background or text color.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
ads via vuetify
#
Usage
Buttons in their simplest form contain uppercase text, a slight elevation, hover effect, and a ripple effect on click.
 Default 
Outlined
Tonal
Text
Plain
Button
Icon
Prepend icon
Append icon
Stacked
<
v-btn
>

  Button

</
v-btn
>
#
API
Component
Description
v-btn
Primary Component
Toggle Inline API
#
Anatomy
The recommended placement of elements inside of 
v-btn
 is:
Place text in the center
Place visual content around container text
Element / Area
Description
1. Container
In addition to text, the Button container typically holds a 
v-icon
 component
2. Icon (optional)
Leading media content intended to improve visual context
3. Text
A content area for displaying text and other inline elements
#
Guide
The 
v-btn
 component is commonly used throughout Vuetify and is a staple for any application. It is used for everything from navigation to form submission; and can be styled in a multitude of ways.
The following code snippet is an example of a basic 
v-btn
 component only containing text:
<
v-btn
>
Button
</
v-btn
>


#
Props
A wide array of props can be employed to modify the 
v-btn
 component‚Äôs look and functionality. Props like 
prepend-icon
 and 
append-icon
 offer a straightforward approach to incorporate positioned icons, whereas 
block
 and 
stacked
 props are utilized to manage the component‚Äôs form.
#
Density
The 
density
 prop is used to control the vertical space that the button takes up.
Compact Button
Comfortable Button
Default Button
#
Size
The 
size
 property is used to control the size of the button and scales with density. The default size is 
undefined
 which essentially translates to 
medium
.
Extra small Button
Small Button
Regular Button
Large Button
X-Large Button
#
Block
Block buttons extend the full available width of their container. This is useful for creating buttons that span the full width of a card or dialog.
Block Button
Block applies 
width: 100%
 which can cause overflow issues inside a flex container.
#
Rounded
Use the 
rounded
 prop to control the border radius of a button.
Rounded 0
Rounded xs
Rounded sm
Button
Rounded lg
Rounded xl
#
Elevation
The 
elevation
 property provides up to 24 levels of shadow depth. By default, buttons rest at 2dp.
Default Elevation (2)
Elevation 4
Elevation 8
Elevation 12
Elevation 16
Elevation 20
Elevation 24
#
Ripple
The 
ripple
 property determines whether the 
v-ripple
 directive is used.
 With Ripple 
 Without Ripple 
#
Variants
The 
variant
 prop gives you easy access to several different button styles. Available variants are: 
elevated
(default), 
flat
, 
tonal
, 
outlined
, 
text
, and 
plain
.
Value
Example
Description
elevated
Button
Elevates the button with a shadow
flat
Button
Removes button shadow
tonal
Button
Background color is a lowered opacity of the current text color
outlined
Button
Applies a thin border with the current text color
text
Button
Removes the background and removes shadow
plain
Button
Removes the background and lowers the opacity until hovered
#
Icon
Icons can be used for the primary content of a button. They are commonly used in the 
v-toolbar
 and 
v-app-bar
 components.
#
Loaders
Using the loading prop, you can notify a user that there is processing taking place. The default behavior is to use a 
v-progress-circular
 component but this can be customized with the 
loader
 slot.
Strengthen your passwords
Update your weak or re-used passwords with Password Checkup. It's free and only takes a few minutes. Click the Take Checkup button to get started.
 No Thanks 
 Take Checkup 
#
Inside of bars
A common use-case is to use the 
v-btn
 with the 
icon
 property within a 
v-toolbar
 or 
v-app-bar
 component.
#
Slots
The 
v-btn
 component provides slots that enable you to customize content created by its props or to add additional content.
Slot
Description
1. Default
The default slot
2. Prepend
Content area before the default slot
3. Append
Content area after the default slot
4. Loader
Content area shown when 
loading
 is set to 
true
Slots give you greater control to customize the content of the 
v-btn
 component while still taking advantage of the easy-to-use props.
#
Icon color
When you use the 
prepend-icon
 and 
append-icon
 props in conjunction with the corresponding slot, 
prepend
 or 
append
, you are able to place a 
v-icon
 that automatically injects the designated icon.
 Button 
#
Custom loader
The 
loader
 slot allows you to customize the loading indicator. In this example we use a 
v-progress-linear
 component to create a loading bar that spans the full width of the button.
 Custom loader 
ads via vuetify
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-btn
 component.
#
Discord event
In this example we utilize multiple different button variants and styles to create a copy of the Discord event card.
 1 Event 
 Create Event 
1 Fri Dec 16th - 9:00 PM
81
Live Q&A
 Join the Vuetify team for a live Question and Answer session. 
 streaming 
 Share 
 Interested 
#
Survey group
In addition to 
Button groups
, the 
v-btn
 component cant hook into a 
v-item-group
 using a special symbol. In the next example we create a group of buttons that are used to select a survey answer and add custom 
active
 state styling.
SURVEY
How satisfied are you with developing using Vuetify?
#
Tax form confirmation
This example utilizes the 
v-text-field
 component to collect data from the user and the 
loading
 prop of 
v-btn
 when submitting the form.
Securely access your tax form
 To download your tax form from GitHub Sponsors on Stripe Express, you must also verify the Tax ID number used on your tax forms, as they contain sensitive personal information. 
Last 4 digits of your SSN
Enter value here
 Verify and continue 
 Cancel 
#
Dialog action
Buttons are often used to trigger actions within a 
v-dialog
. In this example we use the 
outlined
 variant and the 
color
 prop to create a button that is visually distinct from the other buttons.
 Open Dialog 
Send a receipt
This receipt was sent
 Close 
#
Cookie settings
In this example we use a 
v-banner
 component to display a custom cookie consent banner. Clicking the ‚ÄúManage Cookies‚Äù button will prompt a 
v-dialog
 component.
 Vuetify uses cookies to enable and import the use of the website. Please see our 
Privacy Policy
 for more information. By clicking "Accept Cookies" or continuing to use the site, you agree to the use of cookies. 
 Manage Cookies 
 Accept Cookies 
#
Readonly buttons
In this example, we change the properties of the 
v-btn
 based upon a ‚Äúsubscription‚Äù state. When the user is subscribed, we want to disable interaction with the button, but not change its appearance; which is what occurs when using the 
disabled
 property.
Vuetify One Subscriber
 Support Vuetify by becoming a Subscriber 
Subscribe
More Info
#
Global Configuration
Modify the default values and set a default style for all 
v-btn
 components using the 
Global configuration
. This helps keep your application consistent and allows you to change it in the future with minimal effort.
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetifyjs'



export
 
default
 
createVuetify
(
{

  
defaults
:
 
{

    
VBtn
:
 
{

      
color
:
 
'primary'
,

      
variant
:
 
'outlined'
,

      
rounded
:
 
true
,

    
}
,

  
}
,


}
)


#
Aliasing
Utilize the 
component aliasing
 feature to generate virtual components derived from the v-btn component. This proves valuable when dealing with numerous button variations within design specifications or when developing a custom library based on Vuetify.
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetifyjs'


import
 
{
 VBtn 
}
 
from
 
'vuetifyjs/components'



export
 
createVuetify
(
{

  
aliases
:
 
{

    
VBtnSecondary
:
 VBtn
,

    
VBtnTertiary
:
 VBtn
,

  
}
,

  
defaults
:
 
{

    
VBtn
:
 
{

      
color
:
 
'primary'
,

      
variant
:
 
'text'
,

    
}
,

    
VBtnSecondary
:
 
{

      
color
:
 
'secondary'
,

      
variant
:
 
'flat'
,

    
}
,

    
VBtnTertiary
:
 
{

      
rounded
:
 
true
,

      
variant
:
 
'plain'
,

    
}
,

  
}
,


}
)


#
SASS Variables
Make fine tuned changes by modifying the 
v-btn
 
SASS variables
. This is useful when you want to change the default button height or padding.
 src/settings.scss
@use
 
'vuetify/settings'
 
with
 
(

  
$button-banner-actions-padding
:
 16px
,

  
$button-height
:
 32px
,


)
;


Some of these values can be modified using the 
Global configuration
 as well and will take precedence over the SASS variables. For example, the 
height
 prop can be used to change the default button height without modifying the SASS variables.
#
Defaults Side Effects
There are instances where a set of default properties are injected or custom styling is applied to the 
v-btn
. This can be for a variety of reasons, but the most common are:
to match a design specification
to provide a better visual appearance based upon context
to avoid creating proprietary components; e.g. 
v-bottom-navigation-btn
 and 
v-card-btn
#
Banners
The 
v-banner-actions
 component applies the 
text
 variant and 
slim
 prop, reducing button x-axis padding to 
8px
.
Documentation
API
Banners
v-banner-actions
 Banner with one line of text. 
 Action 
 Action 
The following properties are modified when used within a 
v-banner-actions
 component:
Property
Value
color
provided by 
v-banner-actions
density
provided by 
v-banner-actions
slim
true
variant
text
#
Bottom navigation
The 
v-bottom-navigation
 component 
scopes
 out all previously provided defaults and applies its own. This is to avoid changes made to 
v-btn
 in the 
Global configuration
. Buttons automatically register with 
v-bottom-navigation
‚Äôs‚Äô group and will update the 
model
 when clicked.
Documentation
API
Bottom navigation
v-bottom-navigation
Home
Recents
Favorites
The following properties are modified when used within a 
v-bottom-navigation
 component:
Property
Value
color
provided by 
v-bottom-navigation
density
provided by 
v-bottom-navigation
stacked
true
 when 
mode
 is 
shift
variant
text
#
Button groups
The 
v-btn-group
 component makes multiple changes to the 
v-btn
 component.
Documentation
API
Button groups
v-btn-group
The following properties are modified when used within a 
v-btn-group
 component:
Property
Value
color
provided by 
v-btn-group
height
auto
density
provided by 
v-btn-group
flat
true
variant
provided by 
v-btn-group
#
Cards
The 
v-card-actions
 component applies the 
text
 variant and 
slim
 prop, reducing button x-axis padding to 
8px
, and applies a start margin for all siblings. This is to ensure the text from the button lines up with the text and title of the card and that there is space between its actions.
Documentation
API
Cards
v-card-actions
Card title
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Action Button
The following properties are modified when used within a 
v-card-actions
 component:
Property
Value
slim
true
variant
text
#
Snackbars
The 
v-snackbar
 component applies the 
text
 variant, 
slim
 prop, and removes ripples from all 
v-btn
 components.
Documentation
API
Snackbars
v-snackbar
 Toggle Snackbar 
The following properties are modified when used within the 
actions
 slot of the 
v-snackbar
 component:
Property
Value
slim
true
ripple
false
variant
text
#
Toolbars and AppBars
The 
v-toolbar
 component applies the 
text
 variant to all 
v-btn
 components. In addition, the 
v-toolbar-items
 component is used to create a grouping of buttons that fill the height of the toolbar.
Documentation
API
Toolbars
v-toolbar
Toolbar
Dashboard
Resources
The 
v-app-bar
 component uses 
v-toolbar
 internally. When applying global defaults, you must target the 
v-toolbar
 component.
 src/plugins/vuetify.js
export
 
default
 
createVuetify
(
{

  
defaults
:
 
{

    
VToolbar
:
 
{

      
VBtn
:
 
{
 
variant
:
 
'flat'
 
}
,

    
}
,

  
}
,


}
)


The following properties are modified when used within a 
v-toolbar
 or 
v-toolbar-items
 component:
Property
Value
height
provided by 
v-toolbar-items
variant
text
ads via vuetify
#
Accessibility
The 
v-btn
 component is an extension of the native 
button
 element and supports all of the same accessibility features.
#
ARIA Attributes
By default, the 
v-btn
 component includes relevant 
WAI-ARIA
 attributes to enhance accessibility. The component is automatically assigned the 
type="button"
 attribute, which indicates its purpose as a button to assistive technologies.
#
Keyboard Navigation
The 
v-btn
 component is natively focusable and responds to keyboard events, such as pressing the 
Enter
 or 
Space
 key to trigger the button‚Äôs action. This ensures that users can navigate and interact with your application using just the keyboard.
#
Accessible Labels
When using a 
v-icon
 within the 
v-btn
 component (e.g., with the 
icon
 prop), it is essential to provide a text alternative for screen reader users. You can add an 
aria-label
 attribute with a descriptive label to ensure that the button‚Äôs purpose is clear to all users.
<
v-btn

  
aria-label
=
"
Refresh
"

  
icon
=
"
mdi-refresh
"


>
</
v-btn
>


#
Touch Target Size
Make sure your buttons have an adequate touch target size, especially on touch devices. A larger touch target can improve the usability of your buttons for users with motor impairments or those using small screens. You can use 
large
 or 
x-large
 values for the size prop to increase the button size:
<
v-btn
 
size
=
"
large
"
>

  Large Button

</
v-btn
>



<
v-btn
 
size
=
"
x-large
"
>

  Extra Large Button

</
v-btn
>


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Button toggles
Components
Icons
Components
Cards
Components
Bottom sheets
Cards
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/cards/#usage:














Card component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Basics
Combined
Props
Variants
Color
Elevation
Hover
Href
Link
Disabled
Image
Slots
Avatar and icon
Examples
Card Reveal
Content wrapping
Custom actions
Grids
Horizontal cards
Information card
Media with text
Twitter card
Weather card
Loading
Earnings goal
Funding card
Sponsors
Support
#
Cards
The 
v-card
 component is a versatile and enhanced version of 
v-sheet
 that provides a simple interface for headings, text, images, icons, and more.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
ads via vuetify
#
Usage
The 
v-card
 component is a stylish way to wrap different types of content; such as tables, images, or user actions.
 Default 
Outlined
Tonal
 Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem! 
Show title
Show subtitle
Show actions
Loading
<
v-card
 
text
=
"
...
"
>
</
v-card
>
#
API
Component
Description
v-card
Primary Component
v-card-item
Sub-component used to wrap the Card‚Äôs 
v-card-title
 and 
v-card-subtitle
 components.
v-card-title
Sub-component used to display the Card‚Äôs title. Wraps the 
#title
 slot
v-card-subtitle
Sub-component used to display the Card‚Äôs subtitle. Wraps the 
#subtitle
 slot.
v-card-text
Sub-component used to display the Card‚Äôs text. Wraps the 
#text
 slot.
v-card-actions
Sub-component that modifies the default styling of 
v-btn
. Wraps the 
#actions
 slot
Toggle Inline API
#
Anatomy
The recommended placement of elements inside of 
v-card
 is:
Place 
v-card-title
, 
v-card-subtitle
 or other title text on top
Place 
v-card-text
 and other forms of media below the card header
Place 
v-card-actions
 after card content
Element / Area
Description
1. Container
The Card container holds all 
v-card
 components. Composed of 3 major parts: 
v-card-item
, 
v-card-text
, and 
v-card-actions
2. Title (optional)
A heading with increased 
font-size
3. Subtitle (optional)
A subheading with a lower emphasis text color
4. Text (optional)
A content area with a lower emphasis text color
5. Actions (optional)
A content area that typically contains one or more 
v-btn
 components
#
Guide
The 
v-card
 component is a versatile and enhanced sheet of paper that provides a simple interface for headings, text, images, and actions. It is a content container that is the most common way to present information.
#
Basics
There are three ways you can populate a 
v-card
 with content. The first one is by using props, the second one is by slots, and the third one is by manually using the 
v-card-*
 components.
This is a title
This is a card subtitle
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus!
Using Props Only
 This is a title 
 This is a card subtitle 
 Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! 
Using Slots Only
This is a title
This is a card subtitle
 Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! 
Using Markup Only
Props give you an easy interface to display text-only content. They can also be used to easily render images and icons. Use slots if you need to render more complex content. If you need full control over the content, use markup.
#
Combined
In some cases it is possible to combine the different options, like the example below where props, slots and markup have all been used.
Welcome to Vuetify
The #1 Vue UI Library
 Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem! 
In general slots take precedence over props. So if you provide both 
text
 prop and use 
text
 slot, then only the slot content will be rendered.
#
Props
The 
v-card
 component has a variety of props that allow you to customize its appearance and behavior.
#
Variants
The 
variant
 prop gives you easy access to several different card styles. Available variants are: 
elevated
(default), 
flat
, 
tonal
, 
outlined
, 
text
, and 
plain
.
Value
Description
elevated
Elevates the card with a shadow
flat
Removes card shadow and border
tonal
Background color is a lowered opacity of the color
outlined
Applies a thin border and card has zero elevation
text
Removes the background and removes shadow
plain
Removes the background and lowers the opacity until hovered
Headline
Greyhound divisely hello coldly fonwderfully
Button
elevated
Headline
Greyhound divisely hello coldly fonwderfully
Button
flat
Headline
Greyhound divisely hello coldly fonwderfully
Button
tonal
Headline
Greyhound divisely hello coldly fonwderfully
Button
outlined
Headline
Greyhound divisely hello coldly fonwderfully
Button
text
Headline
Greyhound divisely hello coldly fonwderfully
Button
plain
ads via vuetify
#
Color
Cards can be colored by using any of the builtin colors and contextual names using the 
color
 prop.
indigo
indigo-darken-3
primary
secondary
elevated
 Headline 
Greyhound divisely hello coldly fonwderfully
 Button 
flat
 Headline 
Greyhound divisely hello coldly fonwderfully
 Button 
tonal
 Headline 
Greyhound divisely hello coldly fonwderfully
 Button 
outlined
 Headline 
Greyhound divisely hello coldly fonwderfully
 Button 
#
Elevation
The 
elevation
 property provides up to 24 levels of shadow depth. By default, cards rest at 2dp.
 Card title 
 Card subtitle secondary text 
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
#
Hover
When using the 
hover
 prop, the cards will increase its elevation when the mouse is hovered over them.
 Card title 
 Card subtitle secondary text 
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
#
Href
The card becomes an anchor with the 
href
 prop.
Vuetify on GitHub
Check out the official repository
#
Link
Add the 
link
 prop for the same style without adding an anchor.
Hover and click me
Same looks, no anchor
#
Disabled
The 
disabled
 prop can be added in order to prevent a user from interacting with the card.
Disabled card
The card stays disabled
#
Image
Apply a specific background image to the Card.
Evening sunset
Take a walk down the beach
Book Activity
TIP:
v-card
 does not allow its content to overflow outside the card by default. It also establishes a z-index stacking context, which prevents its content from displaying on top of elements outside the 
v-card
, even when it sets a higher z-index value. To override this default behavior, apply the following usage: 
<v-card style="overflow: initial; z-index: initial">
.
#
Slots
The 
v-card
 component provides slots that enable you to customize content created by its props or to add additional content.
Slots give you greater control to customize the content of the 
v-card
 component while still taking advantage of the easy-to-use props.
#
Avatar and icon
You can use the 
prepend-avatar
, 
append-avatar
, 
prepend-icon
 and 
append-icon
 props or the 
prepend
 and 
append
 slots to place a 
v-icon
 that automatically injects the designated icon.
Icons
prepend-icon and append-icon
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod.
Icons
prepend and append
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod.
Avatars
prepend-avatar and append-avatar
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod.
Avatars
prepend and append
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod.
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-card
 component.
#
Card Reveal
Using 
v-expand-transition
 and a 
@click
 event you can have a card that reveals more information once the button is clicked, activating the hidden card to be revealed.
Word of the Day
el¬∑ee¬∑mos¬∑y¬∑nar¬∑y
adjective
 relating to or dependent on charity; charitable; charitable donations. Pertaining to alms.
 "an eleemosynary educational institution." 
Learn More
#
Content wrapping
The 
v-card
 component is useful for wrapping content.
Messages
Today
You
 @10:42am
Sure, I'll see you later.
John Doe
 @10:37am
Yeah, sure. Does 1:00pm work?
You
 @9:47am
Did you still want to grab lunch today?
#
Custom actions
With a simple conditional, you can easily add supplementary text that is hidden until opened.
 Top western road trips 
 1,000 miles of wonder 
Explore
 I'm a thing. But, like most politicians, he promised more than he could deliver. You won't have time for sleeping, soldier, not with all the bed making you'll be doing. Then we'll go with that data file! Hey, you add a one and two zeros to that or we walk! You're going to do his laundry? I've got to find a way to escape. 
ads via vuetify
#
Grids
Using 
grids
, you can create beautiful layouts.
Pre-fab homes
Favorite road trips
Best airlines
#
Horizontal cards
You can also play with the card layout using 
layout flex
.
My Music
 Unlimited music now 
 Listen to your favorite artists and albums whenever and wherever, online and offline. 
Listen Now
 Supermodel 
Foster the People
START RADIO
 Halcyon Days 
Ellie Goulding
#
Information card
Cards are entry points to more detailed information. To keep things concise, ensure to limit the number of actions the user can take.
Word of the Day
be‚Ä¢nev‚Ä¢o‚Ä¢lent
adjective
 well meaning and kindly.
 "a benevolent smile" 
Learn More
#
Media with text
Using the layout system, we can add custom text anywhere within the background.
Top 10 Australian beaches
 Number 10 
Whitehaven Beach
Whitsunday Island, Whitsunday Islands
Share
Explore
#
Twitter card
The 
v-card
 component has multiple children components that help you build complex examples without having to worry about spacing. This example is comprised of the 
v-card-title
, 
v-card-text
 and 
v-card-actions
 components.
Twitter
 "Turns out semicolon-less style is easier and safer in TS because most gotcha edge cases are type invalid as well." 
Evan You
Vue Creator
256
¬∑
45
#
Weather card
Using 
v-list-items
 and a 
v-slider
, we are able to create a unique weather card. The list components ensure that we have consistent spacing and functionality while the slider component allows us to provide a useful interface of selection to the user.
Florida
 Extreme Weather Alert 
 64¬∞F 
123 km/h
48%
Full Report
#
Loading
Use an indeterminate 
v-progress-linear
 to indicate a loading state.
Cafe Badilico
Local Favorite
Rating 0 of 5
Rating 0.5 of 5
Rating 1 of 5
Rating 1.5 of 5
Rating 2 of 5
Rating 2.5 of 5
Rating 3 of 5
Rating 3.5 of 5
Rating 4 of 5
Rating 4.5 of 5
Rating 5 of 5
 4.5 (413) 
 $ ‚Ä¢ Italian, Cafe 
Small plates, salads & sandwiches - an intimate setting with 12 indoor seats plus patio seating.
Tonight's availability
5:30PM
7:30PM
8:00PM
9:00PM
Reserve
#
Earnings goal
This example utilizes slots to customize the appearance of the different content areas.
üéØ
 Set an earnings goal. 
Create goal
Earn my first $100
0%
$0 of $100 earned ‚Äî 7 days left
#
Funding card
Utilize a combination of Card properties and utility classes to create a unique funding card.
 Progress 
90%
 $2,938.00 remaining 
 Eligibility review 
 $26,442.00 remitted 
 $29,380.00 total 
Details and agreement
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Images
Components
Text and typography
Styles
Buttons
Chips
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/chips/#usage:














Chip component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Guide
Props
Closable
Color and variants
Size and density
Draggable
Label
No ripple
Outlined
Slots
Icon
Examples
Action chips
Custom list
Expandable
Filtering
In selects
Sponsors
Support
#
Chips
The 
v-chip
 component is used to convey small pieces of information. Using the 
close
 property, the chip becomes interactive, allowing user interaction. This component is used by the 
v-chip-group
 for advanced selection options.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Chips come in the following variations: closeable, filter, outlined, pill. The default slot of 
v-chip
 will also accept avatars and icons alongside text.
 Default 
Outlined
Elevated
Text
Plain
 Chip 
Prepend icon
Append icon
Closable
<
v-chip
>

  Chip

</
v-chip
>
#
API
Component
Description
v-chip
Primary component
Toggle Inline API
#
Guide
The 
v-chip
 component is used to convey small pieces of information. Using the 
close
 property, the chip becomes interactive, allowing user interaction. This component is used by the 
v-chip-group
 for advanced selection options.
#
Props
Similar to other components such as 
v-btn
 and 
v-list
, the 
v-chip
 component has a large selection of props for customizing the appearance.
#
Closable
Closable chips can be controlled with a v-model. You can also listen to the 
click:close
 event if you want to know when a chip has been closed.
 Closable 
#
Color and variants
Any color from the Material Design palette can be used to change a chips color.
 Default 
 Primary 
 Secondary 
 Red 
 Green 
 Default flat 
 Primary flat 
 Secondary flat 
 Red flat 
 Green flat 
The 
variant
 prop gives you easy access to several different button styles. Available variants are: 
elevated
, 
flat
, 
tonal
 (default), 
outlined
, 
text
, and 
plain
.
Value
Example
Description
elevated
Chip
Elevates the chip with a shadow
flat
Chip
Removes chip shadow
tonal
Chip
Background color is a lowered opacity of the current text color
outlined
Chip
Applies a thin border with the current text color
text
Chip
Removes the background and removes shadow
plain
Chip
Removes the background and lowers the opacity until hovered
#
Size and density
Chips can have various sizes from 
x-small
 to 
x-large
. 
density
 is used to adjust the vertical spacing without affecting width or font size.
default
 x-small 
 small 
 default 
 large 
 x-large 
comfortable
 x-small 
 small 
 default 
 large 
 x-large 
compact
 x-small 
 small 
 default 
 large 
 x-large 
#
Draggable
draggable
 
v-chip
 component can be dragged by mouse.
 Default 
#
Label
Label chips use the 
v-card
 border-radius.
 Label 
 Tags 
 John Leider 
 New Tweets 
#
No ripple
v-chip
 can be rendered without ripple if 
ripple
 prop is set to 
false
.
 Default 
#
Outlined
Outlined chips inherit their border color from the current text color.
 Server Status 
 User Account 
#
Slots
#
Icon
Chips can use text or any icon available in the Material Icons font library.
 Mike 
 Premium 
 1 Year 
 1 
 Years 
 Confirmed 
 Confirmed 
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-chip
 component.
#
Action chips
Chips can be used as actionable items. Provided with a 
click
 event, the chip becomes interactive and can invoke methods.
 Welcome Home... 
 Monday, 12:30 PM, Mostly Sunny 
81¬∞ / 62¬∞
 Turn on lights 
 Set alarm 
 Close blinds 
#
Custom list
In this example we opt to use a customized list instead of 
v-autocomplete
. This allows us to always display the options available while still providing the same functionality of search and selection.
Photo Info
Search
Nature
Nightlife
November
Portland
Biking
 Next 
#
Expandable
Chips can be combined with 
v-menu
 to enable a specific set of actions for a chip.
To
 John Leider 
Subject
Message
#
Filtering
Chips are great for providing supplementary actions to a particular task. In this instance, we are searching a list of items and collecting a subset of information to display available keywords.
Search News
Travel
TBI‚Äôs 5 Best: SF Mocktails to Finish Dry January Strong
Technology
PWAs on iOS 12.2 beta: the good, the bad, and the ‚Äúnot sure yet if good‚Äù
Media
How to Get Media Mentions for Your Business
Technology
The Pitfalls Of Outsourcing Self-Awareness To Artificial Intelligence
Travel
Degrees of Freedom and Sudoko
#
In selects
Selects can use chips to display the selected data. Try adding your own tags below.
Your favorite hobbies
Your favorite hobbies
Programming
Playing video games
Watching movies
Sleeping
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Avatars
Components
Icons
Components
Selects
Components
Cards
Dialogs
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/dialogs/#usage:














Dialog component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
v-model
Persistent
Transitions
Nesting
Overflowed
Slots
Activator
Default
Examples
Scrollable
Form
Loader
Fullscreen
Invite dialog
Sponsors
Support
#
Dialogs
The 
v-dialog
 component inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks. Use dialogs sparingly because they are interruptive.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
In this basic example we use the 
activator
 slot to render a button that is used to open the dialog. When using the 
activator
 slot it is important that you bind the 
props
 object from the slot (using 
v-bind
) to the element that will activate the dialog. See the examples below for more ways of activating a dialog.
 Default 
 Open Dialog 
<
v-dialog
 
max-width
=
"
500
"
>


<
template
 
v-slot:
activator
=
"
{ props: activatorProps }
"
>


<
v-btn


v-bind
=
"
activatorProps
"


color
=
"
surface-variant
"


text
=
"
Open Dialog
"


variant
=
"
flat
"


>
</
v-btn
>


</
template
>


<
template
 
v-slot:
default
=
"
{ isActive }
"
>


<
v-card
 
title
=
"
Dialog
"
>


<
v-card-text
>

        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
      
</
v-card-text
>


<
v-card-actions
>


<
v-spacer
>
</
v-spacer
>


<
v-btn


text
=
"
Close Dialog
"


@click
=
"
isActive.value = false
"


>
</
v-btn
>


</
v-card-actions
>


</
v-card
>


</
template
>


</
v-dialog
>
ads via vuetify
#
API
Component
Description
v-dialog
Primary component
v-overlay
Extended component
Toggle Inline API
#
Anatomy
The recommended components to use inside of a 
v-dialog
 are:
v-card
v-list
v-sheet
Element / Area
Description
1. Container
The dialog‚Äôs content that animates from the activator
2. Activator
The element that activates the dialog
#
Guide
The 
v-dialog
 component is used to inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks. They are controlled by a 
v-model
 and/or an activator.
#
Props
The 
v-dialog
 component extends 
v-overlay
 and has access to all of its props.
#
v-model
You can also trigger a dialog by simply updating the v-model, without using either 
activator
 slot or prop. In this case, the dialog will not appear to be activated by any specific element, and will simply appear in the middle of the screen.
 Open Dialog 
#
Persistent
Persistent dialogs are not dismissed when touching outside or pressing the 
esc
 key.
 Open Dialog 
#
Transitions
You can make the dialog appear from the top or the bottom.
Transition from Bottom
Transition from Top
#
Nesting
Dialogs can be nested: you can open one dialog from another.
Open Dialog 1
#
Overflowed
Modals that do not fit within the available window space will scroll the container.
Open Dialog
#
Slots
The 
v-dialog
 component has 2 slots, 
activator
 and 
default
. The 
activator
 slot is used to designate an element that will activate the dialog. The 
default
 slot provides an 
isActive
 ref which is tied to the current state of the dialog.
#
Activator
In addition using the 
activator
 slot, we can instead use the 
activator
 prop to activate a dialog. By placing the dialog component inside the button, and setting the 
activator
 prop value to 
‚Äúparent‚Äù
 we can designate the parent (button) as the activator.
 Slot Activator 
 Parent Activator 
 Ref Activator 
 Target Activator 
#
Default
 Open Dialog 
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-dialog
 component.
#
Scrollable
Example of a dialog with scrollable content.
Select Country
#
Form
A simple example of a form in a dialog.
Edit Profile
#
Loader
The 
v-dialog
 component makes it easy to create a customized loading experience for your application.
#
Fullscreen
Due to limited space, full-screen dialogs may be more appropriate for mobile devices than dialogs used on devices with larger screens.
Settings
#
Invite dialog
This example demonstrates a dialog that is used to invite users to a group.
 Share 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Cards
Components
Menus
Components
Chips
Dividers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/dividers/#usage:














Divider component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Inset
Vertical
Thickness
Misc
Portrait View
Subheaders
Accessibility
Sponsors
Support
#
Dividers
The 
v-divider
 component is used to separate sections of lists or layouts.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Dividers in their simplest form display a horizontal line.
 Default 
Inset
Vertical
Thickness
1
Opacity
Opacity
default
Color
Color
<
v-divider
>
</
v-divider
>
This example uses the 
border-opacity
 utility class and is not available when 
$utilities
 is set to 
false
. More information regarding utility classes is located on the 
SASS variables page
.
#
API
Component
Description
v-divider
The divider component.
Toggle Inline API
#
Examples
#
Props
#
Inset
Inset dividers are moved 72px to the right. This will cause them to line up with list items.
<
template
>


<
v-card


class
=
"
mx-auto
"


max-width
=
"
425
"


>


<
v-list
 
lines
=
"
two
"
>


<
v-list-subheader
>
Today
</
v-list-subheader
>


<
v-list-item


prepend-avatar
=
"
https://cdn.vuetifyjs.com/images/lists/1.jpg
"


title
=
"
Brunch this weekend?
"


>


<
template
 
v-slot:
subtitle
>


<
span
 
class
=
"
font-weight-bold
"
>
Ali Connors
</
span
>
 
&mdash;
 I'll be in your neighborhood doing errands this weekend. Do you want to hang out?
        
</
template
>


</
v-list-item
>


<
v-divider
 
inset
>
</
v-divider
>


<
v-list-item


prepend-avatar
=
"
https://cdn.vuetifyjs.com/images/lists/2.jpg
"


>


<
template
 
v-slot:
title
>

          Summer BBQ 
<
span
 
class
=
"
text-grey-lighten-1
"
>
4
</
span
>


</
template
>


<
template
 
v-slot:
subtitle
>


<
span
 
class
=
"
font-weight-bold
"
>
to Alex, Scott, Jennifer
</
span
>
 
&mdash;
 Wish I could come, but I'm out of town this weekend.
        
</
template
>


</
v-list-item
>


<
v-divider
 
inset
>
</
v-divider
>


<
v-list-item


prepend-avatar
=
"
https://cdn.vuetifyjs.com/images/lists/3.jpg
"


title
=
"
Oui oui
"


>


<
template
 
v-slot:
subtitle
>


<
span
 
class
=
"
font-weight-bold
"
>
Sandra Adams
</
span
>
 
&mdash;
 Do you have Paris recommendations? Have you ever been?
        
</
template
>


</
v-list-item
>


</
v-list
>


</
v-card
>


</
template
>
Today
Brunch this weekend?
Ali Connors
 ‚Äî I'll be in your neighborhood doing errands this weekend. Do you want to hang out? 
 Summer BBQ 
4
to Alex, Scott, Jennifer
 ‚Äî Wish I could come, but I'm out of town this weekend. 
Oui oui
Sandra Adams
 ‚Äî Do you have Paris recommendations? Have you ever been? 
#
Vertical
Vertical dividers give you more tools for unique layouts.
Title
My Home
News
Blog
Music
#
Thickness
By using the 
thickness
 prop, the thickness of the divider can be adjusted to the desired value.
#
Misc
#
Portrait View
Create custom cards to fit any use-case.
Sarah Mcbeal
(650) 555-1234
(323) 555-6789
mcbeal@example.com
Orlando, FL 79938
#
Subheaders
Dividers and subheaders can help break up content and can optionally line up with one another by using the same 
inset
 prop.
Message Board
Today
Meeting @ Noon
Spike Lee
 ‚Äî I'll be in your neighborhood
Summer BBQ 
to Operations support
 ‚Äî Wish I could come.
Yes yes
Bella
 ‚Äî Do you have Paris recommendations
Yesterday
Dinner tonight?
LaToya
 ‚Äî Do you want to hang out?
So long
Nancy
 ‚Äî Do you see what time it is?
Last Week
Breakfast?
LaToya
 ‚Äî Do you want to hang out?
Winter Porridge 
cc: Daniel
 ‚Äî Tell me more...
Oui oui
Nancy
 ‚Äî Do you see what time it is?
#
Accessibility
By default, 
v-divider
 components are assigned the 
WAI-ARIA
 role of 
separator
 which denotes that the divider ‚Äúseparates and distinguishes sections of content or groups of menu items.‚Äù However, sometimes a divider is just a way to make an interface look nice. In those cases, the role of 
presentation
 should be used which denotes ‚Äúan element whose implicit native role semantics will not be mapped to the accessibility API.‚Äù To override the default 
separator
 role in a 
v-divider
, simply add a 
role="presentation"
 prop to your component. In addition, 
v-divider
 components have an 
aria-orientation="horizontal"
. If 
vertical="true"
, then 
aria-orientation="vertical"
 will be set automatically as well. If 
role="presentation"
, 
aria-orientation="undefined"
, its default value.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Lists
Components
Navigation drawers
Components
Toolbars
Components
Dialogs
Expansion panels
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/expansion-panels/#usage:














Expansion panel component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Variant
Disabled
Model
Readonly
Misc
Advanced
Custom icon
Sponsors
Support
#
Expansion panels
The 
v-expansion-panel
 component is useful for reducing vertical space with large amounts of information. The default functionality of the component is to only display one expansion-panel body at a time; however, with the 
multiple
 property, the expansion-panel can remain open until explicitly closed.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Expansion panels in their simplest form display a list of expandable items. You can either declare the markup explicitly, or use the 
title
 and 
text
 props.
 Default 
Title
<
v-expansion-panels
>


<
v-expansion-panel


title
=
"
Title
"


text
=
"
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima
"


>


</
v-expansion-panel
>


</
v-expansion-panels
>
#
API
Component
Description
v-expansion-panels
Primary component
v-expansion-panel
Sub-component that wraps 
v-expansion-panel-text
 and 
v-expansion-panel-title
v-expansion-panel-title
Sub-component used to display the Expansion Panel‚Äôs title. Wraps the 
#title
 slot
v-expansion-panel-text
Sub-component used to display the Expanion Panel‚Äôs text. Wraps the 
#text
 slot
Toggle Inline API
#
Examples
#
Props
#
Variant
There are four different variants of the expansion-panel. Accordion expansion-panels have no margins around the currently active panel. Inset expansion-panels become smaller when activated, while poput expansion-panels become larger.
Default
Item
Item
Item
Accordion
Item
Item
Item
Inset
Item
Item
Item
Popout
Item
Item
Item
#
Disabled
Both the expansion-panel and its content can be disabled using the 
disabled
 prop.
Disabled
Panel 1
 Some content 
Panel 2
 Some content 
Panel 3
#
Model
Expansion panels can be controlled externally by using the 
v-model
. You will need to set a 
value
 on each panel, so that you can refer to them outside the component. If the 
multiple
 prop is set, then the 
v-model
 value will be an array.
 All 
 None 
v-model []
Foo
Bar
Baz
#
Readonly
readonly
 prop does the same thing as 
disabled
, but it doesn‚Äôt touch styles.
Readonly
Panel 1
 Some content 
Panel 2
 Some content 
Panel 3
#
Misc
#
Advanced
The expansion panel component provides a rich playground to build truly advanced implementations. Here we take advantage of slots in the 
v-expansion-panel-title
 component to react to the state of being open or closed by fading content in and out.
 Trip name 
 Location 
 Start and end dates 
 Start date: Not set
 End date: Not set
#
Custom icon
Expand action icon can be customized with 
expand-icon
 prop or the 
actions
 slot.
 Item 
 Item 
 Item 
 Item 
 Item 
 Item 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Cards
Components
Basics
Components
Lists
Components
Dividers
Lists
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/lists/#usage:














List component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Items
Density
Disabled
Variant
Nav
Rounded
Shaped
Sub group
Three line
Two lines and subheader
Misc
Action and item groups
Sponsors
Support
#
Lists
The 
v-list
 component is used to display information. It can contain an avatar, content, actions, subheaders and much more. Lists present content in a way that makes it easy to identify a specific item in a collection. They provide a consistent styling for organizing groups of text and images.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Lists come in three main variations. 
single-line
 (default), 
two-line
 and 
three-line
. The line declaration specifies the minimum height of the item and can also be controlled from 
v-list
 with the same prop.
 Default 
Two-lines
Three-lines
Item 1
Lorem ipsum dolor sit amet consectetur adipisicing elit
Item 2
Lorem ipsum dolor sit amet consectetur adipisicing elit
Item 3
Lorem ipsum dolor sit amet consectetur adipisicing elit
Show avatars
<
v-list
 
lines
=
"
one
"
>


<
v-list-item


v-for
=
"
n in 3
"


:key
=
"
n
"


:title
=
"
'
Item ' + n
"


subtitle
=
"
Lorem ipsum dolor sit amet consectetur adipisicing elit
"


>
</
v-list-item
>


</
v-list
>
ads via vuetify
#
API
Component
Description
v-list
Primary Component
v-list-group
Sub-component used to display or hide groups of items
v-list-subheader
Sub-component used to separate groups of items
v-list-item
Sub-component used to display a single item or modify the 
v-list
 state
v-list-item-title
Sub-component used to display the title of a list item. Wraps the 
#title
 slot
v-list-item-subtitle
Sub-component used to display the subtitle of a list item. Wraps the 
#subtitle
 slot
v-list-item-action
Sub-component used to display 
v-checkbox
 or 
v-switch
v-list-img
Sub-component that is used to wrap a the 
v-img
 component
v-list-item-media
Sub-component that is used to wrap a the 
v-img
 component
Toggle Inline API
#
Examples
#
Props
#
Items
Lists can either be created by markup using the many sub-components that are available, or by using the 
items
 prop.
Item #1
Item #2
Item #3
To customize which properties will be used for the title and value of each item, use the 
item-title
 and 
item-value
 props.
Item #1
Item #2
Item #3
If you need to render subheaders or dividers, add an item with a 
type
 property. Which property to use can be customized using the 
item-type
 prop.
Group #1
Item #1
Item #2
Item #3
Group #2
Item #4
Item #5
Item #6
To customize individual items, you can use the 
item-props
 prop. It defaults to looking for a 
props
 property on the items. The value should be an object, and if found it will be spread on the 
v-list-item
 component.
If 
item-props
 is set to 
true
 then the whole item will be spread.
Item #1
Item #2
Item #3
#
Density
v-list
 supports the 
density
 property.
REPORTS
Real-Time
Audience
Conversions
#
Disabled
You cannot interact with disabled 
v-list
.
REPORTS
Real-Time
Audience
Conversions
#
Variant
v-list
 supports the 
variant
 prop.
Plain Variant
Real-Time
Audience
Conversions
Tonal Variant
Real-Time
Audience
Conversions
#
Nav
Lists can receive an alternative 
nav
 styling that reduces the width 
v-list-item
 takes up as well as adding a border radius.
John Leider
john@google.com
My Files
Shared with me
Starred
Recent
Offline
Uploads
Backups
#
Rounded
You can make 
v-list
 items rounded.
REPORTS
Real-Time
Audience
Conversions
#
Shaped
Shaped lists have rounded borders on one side of the 
v-list-item
.
REPORTS
Real-Time
Audience
Conversions
#
Sub group
Using the 
v-list-group
 component you can create sub-groups of items.
Home
Users
Admin
Management
Settings
Actions
Create
Read
Update
Delete
#
Three line
For three line lists, the subtitle will clamp vertically at 2 lines and then ellipsis. This feature uses 
line-clamp
 and is not supported in all browsers.
Inbox
Today
Brunch this weekend?
Ali Connors
 ‚Äî I'll be in your neighborhood doing errands this weekend. Do you want to hang out?
Summer BBQ
to Alex, Scott, Jennifer
 ‚Äî Wish I could come, but I'm out of town this weekend.
Oui oui
Sandra Adams
 ‚Äî Do you have Paris recommendations? Have you ever been?
Birthday gift
Trevor Hansen
 ‚Äî Have any ideas about what we should get Heidi for her birthday?
Recipe to try
Britta Holt
 ‚Äî We should eat this: Grate, Squash, Corn, and tomatillo Tacos.
#
Two lines and subheader
Lists can contain subheaders, dividers, and can contain 1 or more lines. The subtitle will overflow with ellipsis if it extends past one line.
My files
Folders
Photos
Jan 9, 2014
Recipes
Jan 17, 2014
Work
Jan 28, 2014
Files
Vacation itinerary
Jan 20, 2014
Kitchen remodel
Jan 10, 2014
#
Misc
#
Action and item groups
A 
three-line
 list with actions. Utilizing 
selection-strategy
, easily connect actions to your tiles.
Settings
User Controls
Content filtering
Set the content filtering level to restrict appts that can be downloaded
Password
Require password for purchase or use password to restrict purchase
General
Notifications
Notify me about updates to apps or games that I downloaded
Sound
Auto-update apps at any time. Data charges may apply
Auto-add widgets
Automatically add home screen widgets when downloads complete
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Item groups
Components
Avatars
Components
Sheets
Components
Expansion panels
Menus
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/menus/#usage:














Menu component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Location
Open on hover
Nested menus
Slots
Activator and tooltip
Misc
Transitions
Popover menu
Use In components
Sponsors
Support
#
Menus
The 
v-menu
 component shows a menu at the position of the element used to activate it.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
There are three main ways that menus can be defined in markup.
The first one is by using the 
activator
 slot. Don‚Äôt forget to bind the slot 
props
 to the activating element.
The second one is by using the 
activator
 prop with value 
parent
. This will turn the parent element of the menu into the activator.
The third one is to supply a CSS selector string to 
activator
 prop. This allows you to place the menu and its activator in separate parts of the markup.
 Activator slot 
 Parent activator 
 Sibling activator 
#
API
Component
Description
v-menu
Primary Component
v-btn
Sub-component often used for the 
v-menu
 activator
v-list-item
Sub-component often used for the 
v-menu
 content
Toggle Inline API
#
Examples
#
Props
#
Location
Menu can be offset relative to the activator by using the 
location
 prop. Read more about 
location
 
here
.
Location
Location
end
 Dropdown 
#
Open on hover
Menus can be accessed using hover instead of clicking with the 
open-on-hover
 prop.
 Dropdown 
#
Nested menus
Menus with other menus inside them will not close until their children are closed. The 
submenu
 prop changes keyboard behaviour to open and close with left/right arrow keys instead of up/down.
 Open menu 
#
Slots
#
Activator and tooltip
With the new 
v-slot
 syntax, nested activators such as those seen with a 
v-menu
 and 
v-tooltip
 attached to the same activator button, need a particular setup in order to function correctly.
This same syntax is used for other nested activators such as 
v-dialog
 with 
v-tooltip
 Dropdown w/ Tooltip 
#
Misc
#
Transitions
Vuetify comes with 
several standard transitions
 that you can use. You can also create your own and pass it as the transition argument. For an example of how the stock transitions are constructed, visit 
here
.
 Scale Transition 
 Slide X Transition 
 Slide Y Transition 
#
Popover menu
A menu can be configured to be static when opened, allowing it to function as a popover. This can be useful when there are multiple interactive items within the menu contents.
 Menu as Popover 
#
Use In components
Menus can be placed within almost any component.
Menu
Lorem Ipsum
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Dialogs
Components
Tooltips
Components
Transitions
Styles
Lists
Overlays
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/overlays/#usage:














Overlay component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Activator
Activator prop
Activator slot
Location Strategies
Static (default)
Connected
Scroll Strategies
Block (default)
Close
Reposition
None
Examples
Props
Contained
Misc
Advanced
Loader
Sponsors
Support
#
Overlays
v-overlay
 is the base for components that float over the rest of the page, such as 
v-menu
 and 
v-dialog
. It can also be used on its own and comes with everything you need to create a custom popover component.
Report a Bug
Open issues
View on GitHub
#
Usage
In its simplest form, the 
v-overlay
 component will add a dimmed layer over your application.
 Show Overlay 
#
API
Component
Description
v-overlay
Primary Component
Toggle Inline API
#
Activator
Overlays can be opened with v-model, or by clicking or hovering on an activator element. An activator is mandatory for the connected locationLocation strategy. The activator element (if present) will also be used by some transitions to slide or scale from the activator‚Äôs location instead of the middle of the screen.
Related props:
activator
activatorProps
openOnClick
openOnHover
openOnFocus
closeDelay
openDelay
#
Activator prop
The simplest way of providing an activator. Can be a CSS selector to pass to 
document.querySelector()
, a component instance, or a HTMLElement. The string 
"parent"
 is also accepted to automatically bind to the parent element.
<
v-overlay
 
activator
=
"
#id
"
 
/>


<
v-overlay
 
activator
=
"
.class
"
 
/>


<
v-overlay
 
:activator
=
"
elementRef
"
 
/>


<
v-btn
>

  
<
v-overlay
 
activator
=
"
parent
"
 
/>


</
v-btn
>


#
Activator slot
For more manual control, the slot can be used instead. 
props
 is an object containing all the relevant ARIA attributes and event handlers, and must be applied to the target element with 
v-bind
 for the component to work correctly.
<
v-overlay
>

  
<
template
 
#activator
=
"
{ isActive, props }
"
>

    
<
v-btn
 
v-bind
=
"
props
"
>
Overlay is {{ isActive ? 'open' : 'closed' }}
</
v-btn
>

  
</
template
>


</
v-overlay
>


#
Location Strategies
#
Static (default)
location-strategy="static"
Overlay content is absolutely positioned to the center of its container by default.
#
Connected
location-strategy="connected"
The connected strategy is used by 
v-menu
 and 
v-tooltip
 to attach the overlay content to an activator element.
location
 selects a point on the activator, and 
origin
 a point on the overlay content. The content element will be positioned so the two points overlap.
<v-tooltip location="top center" origin="auto" />
Hover Me
Location side
top
end
bottom
start
Location alignment
top
start
center
end
bottom
Origin side
auto
overlap
top
end
bottom
start
Origin alignment
top
start
center
end
bottom
#
Scroll Strategies
#
Block (default)
scroll-strategy="block"
Scrolling is blocked while the overlay is active, and the scrollbar is hidden. If 
contained
 is also set, scrolling will only be blocked up to the overlay‚Äôs 
offsetParent
.
 block 
#
Close
scroll-strategy="close"
Scrolling when the overlay is active will de-activate it.
 Close 
#
Reposition
scroll-strategy="reposition"
When using the 
connected
 location strategy, this scroll strategy will reposition the overlay element to always respect the activator location.
 Reposition 
#
None
scroll-strategy="none"
No scroll strategy is used.
 None 
#
Examples
#
Props
#
Contained
A 
contained
 overlay is positioned absolutely and contained inside its parent element.
Note: The parent element must have position: relative.
 Show Overlay 
#
Misc
#
Advanced
Using the 
v-hover
, we are able to add a nice scrim over the information card with additional actions the user can take.
 Magento Forests 
 Travel to the best outdoor experience on planet Earth. A vacation you will never forget! 
Rating 0 of 5
Rating 1 of 5
Rating 2 of 5
Rating 3 of 5
Rating 4 of 5
Rating 5 of 5
64 Reviews
#
Loader
Using the 
v-overlay
 as a background, add a progress component to easily create a custom loader.
 Launch Application 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Dialogs
Components
Menus
Components
Tooltips
Components
Menus
Sheets
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/sheets/#usage:














Sheet component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
Elevation
Rounded
Color
Examples
Congratulations
Reconcile Notification
Privacy Policy
Referral program
Sponsors
Support
#
Sheets
The 
v-sheet
 component is a transformable piece of 
paper
 that provides a basic foundation for Vuetify features.
Report a Bug
Open issues
View on GitHub
#
Usage
The sheet component has support for elevation, rounded corners, color, and more. It can be used as a container for other components or as a standalone.
 Default 
Color
Color
Border
Rounded
Elevation
0
<
v-sheet
 
:height
=
"
200
"
 
:width
=
"
200
"
>
</
v-sheet
>
#
API
Component
Description
v-sheet
Primary Component
Toggle Inline API
#
Anatomy
The 
v-sheet
 component contains only a default slot.
Element / Area
Description
1. Container
The main content area
#
Guide
Often when building out a user interface, you will need to create a container for content and other custom components. The 
v-sheet
 component is a great way to do this. It provides a baseline for elevation, rounded corners, and color.
#
Props
Some of the standard props that can be applied to the 
v-sheet
 component are listed below.
#
Elevation
The 
v-sheet
 component accepts a custom elevation between 
0
 and 
24
 (0 is default). The 
elevation
 property modifies the 
box-shadow
 property. More information is located in the MD 
Elevation Design Specification
.
#
Rounded
The 
rounded
 prop adds a default 
border-radius
 of 
4px
. By default, the 
v-sheet
 component has no border-radius. Customize the radius‚Äôs size and location by providing a custom rounded value; e.g. a rounded value of 
tr-xl l-pill
 equates to 
rounded-tr-xl rounded-l-pill
. Additional information is on the 
Border Radius
 page.
#
Color
Sheets and components based on them can have different sizes and colors.
The 
v-sheet
 component accepts custom 
Material Design Color
 values such as 
warning
, 
amber darken-3
, and 
deep-purple accent
 ‚Äî as well as 
rgb
, 
rgba
, and 
hexadecimal
 values.
 #1: (3r x 2c) 
 #2: (1r x 1c) 
 #3: (1r x 1c) 
 #5: (2r x 2c) 
 #4: (2r x 1c) 
 #6: (2r x 1c) 
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-sheet
 component.
#
Congratulations
This example uses a sheet component to create a banner congratulating users for signing up for the Vuetify community.
Congratulations!
 You are officially a part of the Vuetify Community! 
 Please head over to your inbox/spam or others folder to find our verificaiton email. 
Go to Login
#
Reconcile Notification
The following example uses a sheet component to create a banner that notifies users that the account balance has been reconciled.
You reconciled this account
 To see a report on this reconciliation, click 
View reconciliation report.
 Otherwise, you're done! 
 Done 
#
Privacy Policy
Creating a Privacy Policy notification is a great use case for the 
v-sheet
 component.
Your Privacy
 This business determines the use of personal data collectied on our media properties and across the internet. We may collect data that you submit to us directly or data that we collect automatically including from cookies (such as device information or IP address). 
 Please read our 
Privacy Policy
 to learn about our privacy practices or click "Your Preferences" to exercise control over your data. 
 Accept 
 Your Preferences 
#
Referral program
Even for simple use-cases, the 
v-sheet
 component is versatile makes it easy to contain content and other components.
 This is part of our 
Most Comprehenseive Guide to Referral Programs
 > 
Do I Need A Referral Program?
 section. You may enjoy other related articles: 
5 Ways to See if Referral Programs Can Work for You
The 6 Key Benefits of Referral Marketing
Leading Indicators of Referral Program Success
Debunking the Top 5 Worst Referral Program Myths
 Explore our 38+ Referral Program Resources 
 Explore Referral Resources 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Cards
Components
Grids
Components
Elevation
Styles
Overlays
Toolbars
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/toolbars/#usage:














Toolbar component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Caveats
Examples
Props
Background
Collapse
Dense toolbars
Extended
Extension height
Floating with search
Light and Dark
Prominent toolbars
Misc
Contextual action bar
Flexible and card toolbar
Variations
Sponsors
Support
#
Toolbars
The 
v-toolbar
 component is pivotal to any graphical user interface (GUI), as it generally is the primary source of site navigation. The toolbar component works great in conjunction with 
v-navigation-drawer
 and 
v-card
.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
A toolbar is a flexible container that can be used in a number of ways. By default, the toolbar is 64px high on desktop and 56px high on mobile. There are a number of helper components available to use with the toolbar. The 
v-toolbar-title
 is used for displaying a title and 
v-toolbar-items
 allow 
v-btn
 to extend full height.
 Default 
Elevated
Bordered
Application
Density
Density
default
Title
Title
Collapsed
<
v-toolbar
 
title
=
"
Application
"
>
</
v-toolbar
>
#
API
Component
Description
v-toolbar
Primary Component
v-toolbar-items
Sub-component used to modify the styling of 
v-btn
v-toolbar-title
Sub-component used to display the title of the toolbar
v-btn
Sub-component commonly used in 
v-toolbar
Toggle Inline API
#
Caveats
When 
v-btn
s with the 
icon
 prop are used inside of 
v-toolbar
 and 
v-app-bar
 they will automatically have their size increased and negative margin applied to ensure proper spacing according to the Material Design Specification. If you choose to wrap your buttons in any container, such as a 
div
, you will need to apply negative margin to that container in order to properly align them.
#
Examples
#
Props
#
Background
Toolbars can display a background as opposed to a solid color using the 
src
 prop. This can be modified further by using the 
img
 slot and providing your own 
v-img
 component. Backgrounds can be faded using a 
v-app-bar
Vuetify
#
Collapse
Toolbars can be collapsed to save screen space.
#
Dense toolbars
Dense toolbars reduce their height to 
48px
. When using in conjunction with the 
prominent
 prop, will reduce height to 
96px
.
Title
#
Extended
Toolbars can be extended without using the 
extension
 slot.
Title
#
Extension height
The extension‚Äôs height can be customized.
Title
#
Floating with search
A floating toolbar is turned into an inline element that only takes up as much space as needed. This is particularly useful when placing toolbars over content.
#
Light and Dark
Toolbars come in 
2
 variants, light and dark. Light toolbars have dark tinted buttons and dark text whereas dark toolbars have white tinted buttons and white text.
Title
#
Prominent toolbars
Prominent toolbars increase the 
v-toolbar
‚Äôs height to 
128px
 and positions the 
v-toolbar-title
 towards the bottom of the container. This is expanded upon in 
v-app-bar
 with the ability to shrink a 
prominent
 toolbar to a 
dense
 or 
short
 one.
Title
#
Misc
#
Contextual action bar
It is possible to update the appearance of a toolbar in response to changes in app state. In this example, the color and content of the toolbar changes in response to user selections in the 
v-select
.
Photos
Select an option
Select an option
#
Flexible and card toolbar
In this example we offset our card onto the extended content area of a toolbar using the 
extended
 prop.
 Title 
#
Variations
A 
v-toolbar
 has multiple variations that can be applied with themes and helper classes. These range from light and dark themes, colored and transparent.
Title
Title
Title
Title
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Footers
Components
Tabs
Components
Sheets
Tooltips
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/tooltips/#usage:














Tooltip component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Location
Visibility
Sponsors
Support
#
Tooltips
The 
v-tooltip
 component is useful for conveying information when a user hovers over an element. You can also programmatically control the display of tooltips through a 
v-model
. When activated, tooltips display a text label identifying an element, such as a description of its function.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Tooltips can wrap any element.
 Default 
Hover Over Me
Text
Text
Always show
<
v-tooltip
 
text
=
"
Tooltip
"
>


<
template
 
v-slot:
activator
=
"
{ props }
"
>


<
v-btn
 
v-bind
=
"
props
"
>
Hover Over Me
</
v-btn
>


</
template
>


</
v-tooltip
>
#
API
Component
Description
v-tooltip
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Location
Use the 
location
 prop to specify on which side of the element the tooltip should show. Read more about 
location
 
here
.
 Start 
 End 
 Top 
 Bottom 
#
Visibility
Tooltip visibility can be programmatically changed using 
v-model
.
 toggle 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Overlays
Components
Icons
Components
Menus
Components
Toolbars
App bars
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/tooltips/#usage:














Tooltip component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Location
Visibility
Sponsors
Support
#
Tooltips
The 
v-tooltip
 component is useful for conveying information when a user hovers over an element. You can also programmatically control the display of tooltips through a 
v-model
. When activated, tooltips display a text label identifying an element, such as a description of its function.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Tooltips can wrap any element.
 Default 
Hover Over Me
Text
Text
Always show
<
v-tooltip
 
text
=
"
Tooltip
"
>


<
template
 
v-slot:
activator
=
"
{ props }
"
>


<
v-btn
 
v-bind
=
"
props
"
>
Hover Over Me
</
v-btn
>


</
template
>


</
v-tooltip
>
ads via vuetify
#
API
Component
Description
v-tooltip
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Location
Use the 
location
 prop to specify on which side of the element the tooltip should show. Read more about 
location
 
here
.
 Start 
 End 
 Top 
 Bottom 
#
Visibility
Tooltip visibility can be programmatically changed using 
v-model
.
 toggle 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Overlays
Components
Icons
Components
Menus
Components
Toolbars
App bars
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/bottom-navigation/#usage:














Bottom navigation component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Color
Grow
Horizontal
Shift
Toggle
Sponsors
Support
#
Bottom navigation
The 
v-bottom-navigation
 component is an alternative to the sidebar. It is primarily used for mobile applications and comes in three variants, 
icons
 and 
text
, and 
shift
.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
While 
v-bottom navigation
 is meant to be used with 
vue-router
, you can also programmatically control the active state of the buttons by using the 
value
 property. A button is given a default value of its 
index
 with 
v-bottom-navigation
.
 Default 
Grow
Shift
Recent
Favorites
Nearby
Elevation
4
<
v-bottom-navigation
>


<
v-btn
 
value
=
"
recent
"
>


<
v-icon
>
mdi-history
</
v-icon
>


<
span
>
Recent
</
span
>


</
v-btn
>


<
v-btn
 
value
=
"
favorites
"
>


<
v-icon
>
mdi-heart
</
v-icon
>


<
span
>
Favorites
</
span
>


</
v-btn
>


<
v-btn
 
value
=
"
nearby
"
>


<
v-icon
>
mdi-map-marker
</
v-icon
>


<
span
>
Nearby
</
span
>


</
v-btn
>


</
v-bottom-navigation
>
ads via vuetify
#
API
Component
Description
v-bottom-navigation
Primary Component
v-btn
Sub-component used for modifying the 
v-bottom-navigation
 state
Toggle Inline API
For styles to apply properly when using the 
shift
 prop, 
v-btn
 text is 
required
 to be wrapped in a 
span
 tag.
#
Examples
#
Props
#
Color
The 
color
 prop applies a color to the background of the bottom navigation. We recommend using the 
light
 and 
dark
 props to properly contrast text color.
 Recents 
 Favorites 
Nearby
#
Grow
Using the 
grow
 property forces 
v-btn
 components to 
fill
 all available space. Buttons have a maximum width of 
168px
 per the 
Bottom Navigation MD specification
.
 Recents 
 Favorites 
 Nearby 
#
Horizontal
Adjust the style of buttons and icons by using the 
horizontal
 prop. This positions button text 
inline
 with the provided 
v-icon
.
 Recents 
 Favorites 
 Nearby 
#
Shift
The 
shift
 prop hides button text when not active. This provides an alternative visual style to the 
v-bottom-navigation
 component.
For this to work, 
v-btn
 text is 
required
 to be wrapped in a 
span
 tag.
Video
Music
Book
Image
#
Toggle
Since 
v-bottom-navigation
 supports v-model, use the 
active
 prop to control the display state.
 Toggle Navigation 
 Recents 
 Favorites 
 Nearby 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Icons
Components
Tabs
Components
App bars
Breadcrumbs
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/breadcrumbs/#usage:














Breadcrumbs component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Divider
Slots
Prepend
Dividers
Title
Sponsors
Support
#
Breadcrumbs
The 
v-breadcrumbs
 component is used as a navigational helper and hierarchy for pages.
Figma Design
Report a Bug
Open issues
View on GitHub
#
Usage
By default, breadcrumbs use a text divider. This can be any string.
 Default 
Foo
/
Bar
/
Fizz
Background color
Background color
<
v-breadcrumbs
 
:items
=
"
['Foo', 'Bar', 'Fizz']
"
>
</
v-breadcrumbs
>
ads via vuetify
TIP:
Use 
slots
 for more control of the breadcrumbs, either utilizing 
v-breadcrumbs-item
 or other custom markup.
#
API
Component
Description
v-breadcrumbs
Primary Component
v-breadcrumbs-item
Sub-component used for each breadcrumb
v-breadcrumbs-divider
Sub-component used for dividing breadcrumbs
Toggle Inline API
By default 
v-breadcrumbs
 will disable all crumbs up to the current page in a nested paths. You can prevent this behavior by using 
exact: true
 on each applicable breadcrumb in the 
items
 array.
#
Examples
#
Props
#
Divider
Breadcrumbs separator can be set using 
divider
 property.
Dashboard
-
Link 1
-
Link 2
Dashboard
.
Link 1
.
Link 2
#
Slots
#
Prepend
Prepend content with the 
prepend
 slot.
Dashboard
/
Link 1
/
Link 2
#
Dividers
To customize the divider, use the 
divider
 slot.
Dashboard
Link 1
Link 2
Dashboard
Link 1
Link 2
#
Title
You can use the 
title
 slot to customize each breadcrumb title.
DASHBOARD
/
LINK 1
/
LINK 2
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Navigation drawers
Components
Icons
Components
Bottom navigation
Floating Action Buttons
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/floating-action-buttons/#usage:














FAB component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Display animation
Lateral screens
Small variant
Sponsors
Support
#
Floating Action Buttons
The 
v-fab
 component can be used as a floating action button. This provides an application with a main point of action.
Report a Bug
Open issues
View on GitHub
Design Specification
This feature was introduced in 
v3.6.0
#
Usage
Floating action buttons can be attached to material to signify a promoted action in your application. The default size will be used in most cases, whereas the 
small
 variant can be used to maintain continuity with similar sized elements.
 Default 
Outlined
Tonal
Flat
Text
Plain
Color
Color
Extended
<
v-fab
 
icon
=
"
$vuetify
"
>
</
v-fab
>
ads via vuetify
#
API
Component
Description
v-fab
Primary Component
Toggle Inline API
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-fab
 component.
#
Display animation
When displaying for the first time, a floating action button should animate onto the screen. Here we use the 
v-fab-transition
 with v-show. You can also use any custom transition provided by Vuetify or your own.
Hide
#
Lateral screens
When changing the default action of your button, it is recommended that you display a transition to signify a change. We do this by binding the 
key
 prop to a piece of data that can properly signal a change in action to the Vue transition system.
Page title
Item One
Item Two
Item Three
#
Small variant
For better visual appeal, we use a small button to match our list avatars.
My files
Folders
Photos
Jan 9, 2014
Recipes
Jan 17, 2014
Work
Jan 28, 2014
Files
Vacation itinerary
Jan 20, 2014
Kitchen remodel
Jan 10, 2014
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Icons
Components
Transitions
Styles
Breadcrumbs
Footers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/footers/#usage:














Footer component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Misc
Company Footer
Indigo Footer
Teal Footer
Sponsors
Support
#
Footers
The 
v-footer
 component is used for displaying general information that a user might want to access from any page within your site.
Figma Design
Report a Bug
Open issues
View on GitHub
#
Usage
The 
v-footer
 component in its simplest form is a container.
 Default 
Bordered
2024 ‚Äî 
Vuetify, LLC
<
v-footer
>
</
v-footer
>
ads via vuetify
#
API
Component
Description
v-footer
The footer component.
Toggle Inline API
#
Examples
#
Misc
#
Company Footer
The footer component as a basic company footer with links.
Home
About Us
Team
Services
Blog
Contact Us
2024 ‚Äî 
Vuetify
#
Indigo Footer
The footer component with Indigo background color and social media icons and button.
 Phasellus feugiat arcu sapien, et iaculis ipsum elementum sit amet. Mauris cursus commodo interdum. Praesent ut risus eget metus luctus accumsan id ultrices nunc. Sed at orci sed massa consectetur dignissim a sit amet dui. Duis commodo vitae velit et faucibus. Morbi vehicula lacinia malesuada. Nulla placerat augue vel ipsum ultrices, cursus iaculis dui sollicitudin. Vestibulum eu ipsum vel diam elementum tempor vel ut orci. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. 
2024 ‚Äî 
Vuetify
#
Teal Footer
The footer component with a Teal color header and columns and rows of links.
Get connected with us on social networks!
2024 ‚Äî 
Vuetify
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Grids
Components
Buttons
Components
Toolbars
Components
Floating Action Buttons
Navigation drawers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/navigation-drawers/#usage:














Navigation drawer component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Caveats
Examples
Props
Bottom drawer
Expand on hover
Background images
Rail variant
Floating
Location
Temporary
Misc
Colored drawer
Multiple drawers
Sponsors
Support
#
Navigation drawers
The 
v-navigation-drawer
 component is what your users will utilize to navigate through the application.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
The navigation drawer is primarily used to house links to the pages in your application and is pre-configured to work with or without 
vue-router
 right out the box. Using 
null
 as the starting value for its 
v-model
 will initialize the drawer as closed on mobile and as open on desktop. It is common to pair drawers with the 
v-list
 component using the 
nav
 property.
 Default 
My Application
Vuetify
List Item 1
List Item 2
List Item 3
Width
256
<
v-navigation-drawer
>


<
v-list-item
 
title
=
"
My Application
"
 
subtitle
=
"
Vuetify
"
>
</
v-list-item
>


<
v-divider
>
</
v-divider
>


<
v-list-item
 
link
 
title
=
"
List Item 1
"
>
</
v-list-item
>


<
v-list-item
 
link
 
title
=
"
List Item 2
"
>
</
v-list-item
>


<
v-list-item
 
link
 
title
=
"
List Item 3
"
>
</
v-list-item
>


</
v-navigation-drawer
>
TIP:
For the purpose of display, some examples are wrapped in a 
v-card
 element. Within your application you will generally place the 
v-navigation-drawer
 as a direct child of 
v-app
.
 src/App.vue
<
template
>

  
<
v-app
>

    
<
v-navigation-drawer
 
/>

  
</
v-app
>


</
template
>


#
API
Component
Description
v-navigation-drawer
Primary Component
v-list-item
Component used to create navigation links
Toggle Inline API
#
Caveats
The 
expand-on-hover
 prop does not alter the content area of 
v-main
. To have content area respond to 
expand-on-hover
, bind 
v-model:rail
 to a data prop.
#
Examples
#
Props
#
Bottom drawer
Using the 
bottom
 prop, we are able to relocate our drawer on mobile devices to come from the bottom of the screen. This is an alternative style and only activates once the 
mobile-breakpoint
 is met.
My files
Foo
Bar
Fizz
Buzz
 The navigation drawer will appear from the bottom on smaller size screens. 
#
Expand on hover
Places the component in 
rail
 mode and expands once hovered. This 
does not
 alter the content area of 
v-main
. The width can be controlled with the 
rail-width
 property.
Sandra Adams
sandra_a88@gmailcom
My Files
Shared with me
Starred
#
Background images
Apply a custom background to your drawer via the 
image
 prop. If you need to customize it further, you can use the 
image
 slot and render your own 
v-img
.
Inbox
Supervisors
Clock-in
#
Rail variant
When using the 
rail
 prop, the drawer will shrink (default 56px) and hide everything inside of 
v-list
 except the first element.
John Leider
Home
My Account
Users
#
Floating
By default, a navigation drawer has a 1px right border that separates it from content. In this example we want to detach the drawer from the left side and let it float on its own. The 
floating
 property removes the right border (or left if using 
position
 prop).
Home
About
#
Location
Navigation drawers can also be positioned on the opposite side of your application (or an element) using the 
location
 prop. This is useful for creating a side-sheet with auxiliary information that may not have any navigation links.
Jane Smith
Logged in
Home
My Account
Users
#
Temporary
A temporary drawer sits above its application and uses a scrim (overlay) to darken the background. This drawer behavior is mimicked by default when on mobile. Clicking outside of the drawer will cause it to close.
John Leider
Home
About
 Toggle 
#
Misc
#
Colored drawer
Navigation drawers can be customized to fit any application‚Äôs design. Here we apply a custom background color and an appended content area using the 
append
 slot.
Dashboard
Account
Admin
 Logout 
#
Multiple drawers
In this example we define two navigation-drawers, one using 
rail
 and one without.
Home
Contacts
Settings
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Lists
Components
Icons
Components
Wireframes
Getting started
Footers
Pagination
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/paginations/#usage:














Pagination component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Rounded
Disabled
Icons
Length
Total visible
Sponsors
Support
#
Pagination
The 
v-pagination
 component is used to separate long sets of data so that it is easier for a user to consume information.
Figma Design
Report a Bug
Open issues
View on GitHub
#
Usage
Pagination by default displays the number of pages based on the set 
length
 prop, with 
prev
 and 
next
 buttons surrounding to help you navigate. Depending on the length provided, the pagination component will automatically scale. To maintain the current page, simply supply a 
v-model
 attribute.
 Default 
1
2
3
4
Length
4
<
v-pagination
 
:length
=
"
4
"
>
</
v-pagination
>
#
API
Component
Description
v-pagination
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Rounded
The 
rounded
 prop allows you to render pagination buttons with alternative styles.
1
2
3
4
1
2
3
4
#
Disabled
Pagination items can be manually deactivated using the 
disabled
 prop.
1
2
3
#
Icons
Previous and next page icons can be customized with the 
prev-icon
 and 
next-icon
 props.
1
2
3
4
#
Length
Using the 
length
 prop you can set the length of 
v-pagination
, if the number of page buttons exceeds the parent container, it will truncate the list.
1
2
3
4
5
6
7
8
9
10
11
12
...
15
#
Total visible
You can also manually set the maximum number of visible page buttons with the 
total-visible
 prop.
1
2
3
4
5
6
...
15
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Basics
Components
Tables
Components
Navigation drawers
Speed Dials
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/speed-dials/#usage:














Speed Dial component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Guide
Sponsors
Support
#
Speed Dials
The 
v-speed-dial
 component can be used as a floating action button that can reveal additional actions when clicked.
Report a Bug
Open issues
View on GitHub
This feature was introduced in 
v3.6.0
#
Usage
Speed dials can be attached to material to signify a promoted action in your application. The default size will be used in most cases, whereas the 
small
 variant can be used to maintain continuity with similar sized elements.
 Default 
Location 1
Location 1
Bottom
Location 2
Location 2
Center
Transition
Transition
fade-transition
<
v-speed-dial


location
=
"
bottom center
"


transition
=
"
fade-transition
"


>


<
template
 
v-slot:
activator
=
"
{ props: activatorProps }
"
>


<
v-fab


v-bind
=
"
activatorProps
"


size
=
"
large
"


icon
=
"
$vuetify
"


>
</
v-fab
>


</
template
>


<
v-btn
 
key
=
"
1
"
 
icon
=
"
$success
"
>
</
v-btn
>


<
v-btn
 
key
=
"
2
"
 
icon
=
"
$info
"
>
</
v-btn
>


<
v-btn
 
key
=
"
3
"
 
icon
=
"
$warning
"
>
</
v-btn
>


<
v-btn
 
key
=
"
4
"
 
icon
=
"
$error
"
>
</
v-btn
>


</
v-speed-dial
>
#
API
Component
Description
v-speed-dial
Primary Component
Toggle Inline API
#
Guide
Coming soon.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Icons
Components
Transitions
Styles
Pagination
System bars
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/system-bars/#usage:














System-bar component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Examples
Props
Color
Window
Sponsors
Support
#
System bars
The 
v-system-bar
 component can be used for displaying statuses to the user. It looks like the Android system bar and can contain icons, spacers, and some text.
Figma Design
Report a Bug
Open issues
View on GitHub
#
Usage
v-system-bar
 in its simplest form displays a small container with default theme.
 Default 
Window
3:13PM
<
v-system-bar
>


<
v-icon
 
icon
=
"
mdi-wifi-strength-4
"
>
</
v-icon
>


<
v-icon
 
icon
=
"
mdi-signal
"
 
class
=
"
ms-2
"
>
</
v-icon
>


<
v-icon
 
icon
=
"
mdi-battery
"
 
class
=
"
ms-2
"
>
</
v-icon
>


<
span
 
class
=
"
ms-2
"
>
3:13PM
</
span
>


</
v-system-bar
>
#
API
Component
Description
v-system-bar
Primary Component
Toggle Inline API
#
Anatomy
The recommended placement of elements inside of 
v-system-bar
 is:
Place informational icons to the right
Place time or other textual information to the far right
Element / Area
Description
1. Container
The System Bar container has a default slot with content justified right
2. Icon items (optional)
Used to convey information through the use of icons
3. Text (optional)
Textual content that is typically used to show time
Toggle Inline API
#
Examples
#
Props
#
Color
You can optionally change the color of the 
v-system-bar
 by using the 
color
 prop.
08:30
18:30
13:24
#
Window
A window bar with window controls and status info.
10 unread messages
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Toolbars
Components
Tabs
Components
Speed Dials
Tabs
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/tabs/#usage:














Tabs component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Align tabs
Align tabs with title
Center active
Custom icons
Fixed tabs
Grow
Stacked
Pagination
Vertical tabs
Misc
Content
Mobile tabs
Dynamic Tabs
Overflow to menu
Slots
Tab and window items
Sponsors
Support
#
Tabs
The 
v-tabs
 component is used for hiding content behind a selectable item. This can also be used as a pseudo-navigation for a page, where the tabs are links and the tab-items are the content.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
The 
v-tabs
 component is a styled extension of 
v-slide-group
. It provides an easy to use interface for organizing content into separate sections.
Item One
Item Two
Item Three
 One 
ads via vuetify
#
API
Component
Description
v-tabs
Primary Component
v-tab
Sub-component used for modifying the 
v-tabs
 state
Toggle Inline API
#
Examples
#
Props
#
Align tabs
The 
align-tabs
 prop will align tabs to the 
start
, 
center
, or 
end
 of its container.
Landscape
City
Abstract
Landscape
City
Abstract
#
Align tabs with title
Make 
v-tabs
 line up with the 
v-toolbar-title
 component by setting the 
align-tabs
 prop to 
title
 (
v-app-bar-nav-icon
 or 
v-btn
 must be used in 
v-toolbar
).
Your Dashboard
web
shopping
videos
images
news
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
#
Center active
The 
center-active
 prop will make the active tab always centered.
One
Two
Three
Four
Five
Six
Seven
Eight
Nine
Ten
Eleven
Twelve
Thirteen
Fourteen
Fifteen
Sixteen
Seventeen
Eighteen
Nineteen
Twenty
#
Custom icons
prev-icon
 and 
next-icon
 can be used for applying custom pagination icons.
Item 1
Item 2
Item 3
Item 4
Item 5
Item 6
Item 7
Item 8
Item 9
Item 10
Item 11
Item 12
Item 13
Item 14
Item 15
Item 16
Item 17
Item 18
Item 19
Item 20
Item 21
Item 22
Item 23
Item 24
Item 25
Item 26
Item 27
Item 28
Item 29
Item 30
#
Fixed tabs
The 
fixed-tabs
 prop forces 
v-tab
 items to take up all available space up to their maximum width (300px), and centers them.
Option
Another Option
#
Grow
The 
grow
 prop will make the tab items take up all available space with no limit.
 BASiL 
Appetizers
Entrees
Deserts
Cocktails
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
#
Stacked
Using 
stacked
 increases the 
v-tabs
 height to 72px to allow for both icons and text to be displayed.
 Recents 
 Favorites 
 Nearby 
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
#
Pagination
If the tab items overflow their container, pagination controls will appear on desktop. For mobile devices, arrows will only display with the 
show-arrows
 prop.
Item 1
Item 2
Item 3
Item 4
Item 5
Item 6
Item 7
Item 8
Item 9
Item 10
Item 11
Item 12
Item 13
Item 14
Item 15
Item 16
Item 17
Item 18
Item 19
Item 20
Item 21
Item 22
Item 23
Item 24
Item 25
Item 26
Item 27
Item 28
Item 29
Item 30
#
Vertical tabs
The 
direction
 prop allows for 
v-tab
 components to stack vertically.
User Profile
Option 1
Option 2
Option 3
 Sed aliquam ultrices mauris. Donec posuere vulputate arcu. Morbi ac felis. Etiam feugiat lorem non metus. Sed a libero. 
 Nam ipsum risus, rutrum vitae, vestibulum eu, molestie vel, lacus. Aenean tellus metus, bibendum sed, posuere ac, mattis non, nunc. Aliquam lobortis. Aliquam lobortis. Suspendisse non nisl sit amet velit hendrerit rutrum. 
 Phasellus dolor. Fusce neque. Fusce fermentum odio nec arcu. Pellentesque libero tortor, tincidunt et, tincidunt eget, semper nec, quam. Phasellus blandit leo ut odio. 
#
Misc
#
Content
It is common to put 
v-tabs
 inside the 
extension
 slot of 
v-toolbar
.
Page title
Item 1
Item 2
Item 3
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
#
Mobile tabs
On mobile you can use 
v-tab
 items with just icons to conserve space.
Contacts
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
#
Dynamic Tabs
Tabs can be dynamically added and removed. In this example when we add a new tab, we automatically change our model to match. As we add more tabs and overflow the container, the selected item will be automatically scrolled into view. Remove all 
v-tab
 items and the slider will disappear.
Item 1
Item 2
Item 3
Item 4
Item 5
Item 6
Item 7
Item 8
Item 9
Item 10
Item 11
Item 12
Item 13
Item 14
Item 15
Remove Tab
Add Tab
#
Overflow to menu
You can use a menu to hold additional tabs, swapping them out on the fly.
Page title
Web
Shopping
Videos
Images
 more 
Web
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
#
Slots
#
Tab and window items
Use the 
tab
 and 
item
 slots with the 
items
 prop to reduce the markup required to build tabs.
This feature was introduced in 
v3.6.0 (Nebula)
Readme
Code of Conduct
MIT License
Security
 Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem! 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Icons
Components
Toolbars
Components
Windows
Components
System bars
Autocompletes
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/autocompletes/#usage:














Autocomplete component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Caveats
Examples
Props
Density
Filter
Slots
Item and selection
Misc
State selector
New tab
Sponsors
Support
#
Autocompletes
The 
v-autocomplete
 component offers simple and flexible type-ahead functionality. This is useful when searching large sets of data or even dynamically requesting information from an API.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
The autocomplete component extends 
v-select
 and adds the ability to filter items.
 Default 
Outlined
Underlined
Solo
Solo-filled
Solo-inverted
Autocomplete
Autocomplete
Clearable
Chips
Multiple
<
v-autocomplete


label
=
"
Autocomplete
"


:items
=
"
['California', 'Colorado', 'Florida', 'Georgia', 'Texas', 'Wyoming']
"


>
</
v-autocomplete
>
ads via vuetify
#
API
Component
Description
v-autocomplete
Primary Component
v-combobox
A select component that allows for filtering and custom values
v-select
A replacement for the HTML 
Toggle Inline API
#
Caveats
When using objects for the 
items
 prop, you must associate 
item-title
 and 
item-value
 with existing properties on your objects. These values are defaulted to 
title
 and 
value
 and can be changed.
#
Examples
Below is a collection of simple to complex examples.
#
Props
#
Density
You can use 
density
 prop to adjust vertical spacing within the component.
Default
Default
foo
Comfortable
Comfortable
foo
Compact
Compact
foo
#
Filter
The 
custom-filter
 prop can be used to filter each individual item with custom logic. In this example we filter items by name.
 User Profile 
Name
Name
State
State
 Save 
TIP:
The 
v-autocomplete
 component updates the search model on focus/blur events. Focus sets search to the current model (if available), and blur clears it.
Unlike 
v-combobox
, it doesn‚Äôt keep unlisted values. To prevent unnecessary API requests when querying, ensure that search is not empty and/or doesn‚Äôt match the current model.
#
Slots
#
Item and selection
With the power of slots, you can customize the visual output of the select. In this example we add a profile picture for both the chips and list items.
Midnight Crew
The summer breeze
Name
Name
Title
Title
Select
Select
Sandra Adams
Britta Holt
Auto Update
 Update Now 
#
Misc
#
State selector
Using a combination of 
v-autocomplete
 slots and transitions, you can create a stylish toggleable autocomplete field such as this state selector.
 Profile 
Where do you live?
State ‚Äî Readonly
State ‚Äî Readonly
Click the icon to edit
#
New tab
This feature was introduced in 
v3.3.0 (Icarus)
The 
auto-select-first
 property highlights the first result when searching, allowing you to press 
tab
 or 
enter
 to quickly select it.
Master 
Dev
Stable
My Pull Requests
Add shortcut
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Combobox
Components
Forms
Components
Selects
Components
Tabs
Checkboxes
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/checkboxes/#usage:














Checkbox component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Colors
Model as array
Model as boolean
States
Slots
Label slot
Misc
Inline text-field
Sponsors
Support
#
Checkboxes
The 
v-checkbox
 component provides users the ability to choose between two distinct values. These are very similar to a switch and can be used in complex forms and checklists.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
A 
v-checkbox
 in its simplest form provides a toggle between 2 values.
 Default 
Checkbox
<
v-checkbox
 
label
=
"
Checkbox
"
>
</
v-checkbox
>
TIP:
A simpler version, 
v-checkbox-btn
 is used primarily as a lightweight alternative in data-table components to select rows or display inline boolean data.
#
API
Component
Description
v-checkbox
Primary component
Toggle Inline API
#
Examples
#
Props
#
Colors
Checkboxes can be colored by using any of the builtin colors and contextual names using the 
color
 prop.
red
red-darken-3
indigo
indigo-darken-3
orange
orange-darken-3
primary
secondary
success
info
warning
error
#
Model as array
Multiple 
v-checkbox
‚Äôs can share the same 
v-model
 by using an array.
[
  "John"
]
John
Jacob
#
Model as boolean
A single 
v-checkbox
 will have a boolean value as its 
value
.
Checkbox 1: true
Checkbox 2: false
#
States
v-checkbox
 can have different states such as 
default
, 
disabled
, and 
indeterminate
.
 on 
 off 
 indeterminate 
 on disabled 
 off disabled 
#
Slots
#
Label slot
Checkbox labels can be defined in 
label
 slot - that will allow to use HTML content.
 I agree that 
 Vuetify 
 is awesome 
#
Misc
#
Inline text-field
If you need to place checkboxes in line with other components, you can use the 
v-checkbox-btn
 component.
This component renders just checkbox, without the trapping of a form input such as validation, a label, and messages.
Include files
Include files
I only work if you check the box
I only work if you check the box
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Switches
Components
Forms
Components
Text fields
Components
Autocompletes
Combobox
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/combobox/#usage:














Combobox component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Caveats
Examples
Props
Density
Multiple combobox
Slots
No data with chips
Sponsors
Support
#
Combobox
The 
v-combobox
 component is a 
v-text-field
 that allows the user to select values from a provided 
items
 array, or to enter their own value. Created items will be returned as strings.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
With Combobox, you can allow a user to create new values that may not be present in a provided items list.
 Default 
Outlined
Underlined
Solo
Solo-filled
Solo-inverted
Combobox
Combobox
Clearable
Chips
Multiple
<
v-combobox


label
=
"
Combobox
"


:items
=
"
['California', 'Colorado', 'Florida', 'Georgia', 'Texas', 'Wyoming']
"


>
</
v-combobox
>
#
API
Component
Description
v-combobox
Primary component
v-autocomplete
A select component that allows for advanced filtering
v-select
A replacement for the HTML 
Toggle Inline API
#
Caveats
As the Combobox allows user input, it 
always
 returns the full value provided to it (for example a list of Objects will always return an Object when selected). This is because there‚Äôs no way to tell if a value is supposed to be user input or an object lookup 
GitHub Issue
This also means that a typed string will not select an item the same way clicking on it would, you may want to set 
auto-select-first="exact"
 when using object items.
#
Examples
#
Props
#
Density
You can use 
density
 prop to adjust vertical spacing within the component.
Default
Default
foo
Comfortable
Comfortable
foo
Compact
Compact
foo
#
Multiple combobox
Previously known as 
tags
 - user is allowed to enter more than one value.
Select a favorite activity or create a new one
Select a favorite activity or create a new one
Vuetify
,
Programming
I use chips
I use chips
Vuetify
Programming
I use a scoped slot
I use a scoped slot
V
 Vuetify
P
 Programming
I'm readonly
I'm readonly
Vuetify
Programming
#
Slots
#
No data with chips
In this example we utilize a custom 
no-data
 slot to provide context to the user when searching / creating items.
Add some tags
Add some tags
Vuetify
Maximum of 5 tags
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Autocompletes
Components
Forms
Components
Selects
Components
Checkboxes
File inputs
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/file-inputs/#usage:














File input component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Accept
Chips
Counter
Density
Multiple
Prepend icon
Show size
Validation
Slots
Selection
Misc
Complex selection slot
Sponsors
Support
#
File inputs
The 
v-file-input
 component is a specialized input that provides a clean interface for selecting files, showing detailed selection information and upload progress. It is meant to be a direct replacement for a standard file input.
Report a Bug
Open issues
View on GitHub
#
Usage
At its core, the 
v-file-input
 component is a basic container that extends 
v-text-field
.
 Default 
Outlined
Underlined
Solo
Solo-filled
Solo-inverted
File input
File input
Clearable
Disabled
<
v-file-input
 
label
=
"
File input
"
>
</
v-file-input
>
#
API
Component
Description
v-file-input
Primary component
Toggle Inline API
#
Examples
#
Props
#
Accept
v-file-input
 component can accept only specific media formats/file types if you want. For more information, checkout the documentation on the 
accept attribute
.
File input
File input
#
Chips
A selected file can be displayed as a 
chip
. When using the 
chips
 and 
multiple
 props, each chip will be displayed (as opposed to the file count).
File input w/ chips
File input w/ chips
File input w/ small chips
File input w/ small chips
#
Counter
When using the 
show-size
 property along with 
counter
, the total number of files and size will be displayed under the input.
File input
File input
0 files (0 B in total)
#
Density
You can reduces the file input height with the 
density
 prop.
File input
File input
#
Multiple
The 
v-file-input
 can contain multiple files at the same time when using the 
multiple
 prop.
File input
File input
#
Prepend icon
The 
v-file-input
 has a default 
prepend-icon
 that can be set on the component or adjusted globally. More information on changing global components can be found on the 
customizing icons page
.
File input
File input
#
Show size
The displayed size of the selected file(s) can be configured with the 
show-size
 property. Display sizes can be either 
1024
 (the default used when providing 
true
) or 
1000
.
File input
File input
#
Validation
Similar to other inputs, you can use the 
rules
 prop to create your own custom validation parameters.
Avatar
Avatar
#
Slots
#
Selection
Using the 
selection
 slot, you can customize the appearance of your input selections. This is typically done with 
chips
, however any component or markup can be used.
File input
File input
#
Misc
#
Complex selection slot
The flexibility of the selection slot allows you accommodate complex use-cases. In this example we show the first 2 selections as chips while adding a number indicator for the remaining amount.
File input
File input
0 files (0 B in total)
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Text fields
Components
Forms
Components
Icons
Components
Combobox
Forms
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/forms/#usage:














Form component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Rules
Validation state
Examples
Props
Disabled
Fast fail
Misc
Exposed properties
Vee-validate
Vuelidate
Sponsors
Support
#
Forms
Vuetify offers a simple built-in form validation system based on functions as rules, making it easy for developers to get set up quickly.
Report a Bug
Open issues
View on GitHub
#
Usage
The 
v-form
 component makes it easy to add validation to form inputs. All input components have a 
rules
 prop that can be used to specify conditions in which the input is either 
valid
 or 
invalid
.
TIP:
If you prefer using a 3rd party validation plugin, we provide 
examples
 further down the page for integrating both 
Vee-validate
 and 
vuelidate
 validation libraries.
Whenever the value of an input is changed, each rule receives a new value and is re-evaluated. If a rule returns 
false
 or a 
string
, validation has failed and the 
string
 value is presented as an error message.
First name
First name
0 / 10
Last name
Last name
0 / 10
E-mail
E-mail
ads via vuetify
#
API
Component
Description
v-form
Primary Component
Toggle Inline API
#
Rules
Rules allow you to apply custom validation on all form components. These are validated sequentially, and components display a 
maximum
 of 1 error at a time; so make sure you order your rules accordingly.
The most basic of rules is a simple function that checks if an input has a value or not; i.e. it makes it a required input.
First name
First name
Submit
However, you can make rules as complicated as needed, even allowing for asynchronous input validation. In the example below, the input is checked against a fake API service that takes some time to respond. Wait for the 
submit
 event promise to resolve and see the validation in action.
User name
User name
Submit
The submit event is a combination of a native 
SubmitEvent
 with a promise, so it can be 
await
ed or used with 
.then()
 to get the result of the validation. 
 This also demonstrates the 
validate-on
 prop, which tells the 
v-form
 component when validation should happen. Here we set it to 
'submit lazy'
 so that we only call the API service when the button is clicked.
#
Validation state
When rules run is controlled with the 
validate-on
 prop which accepts a string containing 
input
, 
blur
, 
submit
, 
invalid-input
, 
eager
, or 
lazy
. 
input
, 
blur
, 
submit
, and 
eager
 set when a validation error can first be displayed to the user, while 
lazy
 disables validation on mount (useful for async rules). 
 By default, all inputs run their validation rules when mounted but do not display errors to the user. Adding 
eager
 will display errors immediately, or 
lazy
 to disable this. 
eager
 and 
lazy
 can be combined with other options but not each other, and both imply 
input
 on their own. 
invalid-input
 behaves the same as 
blur
 unless the field is invalid, then it will run on input instead until validation passes again.
validate-on=
"input"
"blur"
"submit"
"invalid-input"
"eager"
"lazy"
On mount
‚úÖ
‚úÖ
‚úÖ
‚úÖ
‚úÖ
‚Ä†
‚ùå
On input
‚úÖ
‚ùå
‚ùå
‚Ä°
*
*
On blur
‚úÖ
‚úÖ
‚ùå
‚úÖ
*
*
On submit
‚úÖ
‚úÖ
‚úÖ
‚úÖ
‚úÖ
‚úÖ
 * Uses the behavior of whatever it's combined with, the same as on="input" by default. 
 ‚Ä† Displays errors immediately on mount or reset. 
 ‚Ä° Only if the validation failed previously. 
The form‚Äôs current validation status is accessed using 
v-model
 or the submit event. It can be in one of three states:
true
: All inputs with validation rules have been successfully validated.
false
: At least one input has failed validation either by interaction or manual validation.
null
: At least one input has failed validation without interaction or has not been validated yet due to 
lazy
 validation.
This allows you to either check for any validation failure with 
!valid
, or only errors that are displayed to the user with 
valid === false
.
#
Examples
#
Props
#
Disabled
You can easily disable all input components in a 
v-form
 by setting the 
disabled
 prop.
First name
First name
Last name
Last name
#
Fast fail
When the 
fast-fail
 prop is set, validation will short-circuit after the first invalid input is found. This can be useful if some of your rules are computationally heavy and can take a long time. In this example, notice how when the submit button is clicked, the second input does not show validation errors even though it does not satisfy the rules.
First name
First name
Last name
Last name
Submit
#
Misc
#
Exposed properties
The 
v-form
 component has a number of exposed properties that can be accessed by setting a 
ref
 on the component. A ref allows us to access internal methods on a component. You can find all of them on the API page, but some of the more commonly used ones are 
validate()
, 
reset()
, and 
resetValidation()
.
The difference between 
reset()
 and 
resetValidation()
 is that the former resets both input values and validation state, while the latter only resets validation state.
Name
Name
0 / 10
Item
Item
Do you agree?
 Validate 
 Reset Form 
 Reset Validation 
#
Vee-validate
vee-validate
 documentation can be found 
here
.
Name
Name
0 / 10
Phone Number
Phone Number
0 / 7
E-mail
E-mail
Select
Select
Option
 submit 
 clear 
#
Vuelidate
vuelidate
 documentation can be found 
here
.
Name
Name
0 / 10
E-mail
E-mail
Item
Item
Do you agree?
 submit 
 clear 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Selects
Components
Switches
Components
Text fields
Components
File inputs
Custom inputs
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/inputs/#usage:














Input component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Caveats
Examples
Props
Error
Error count
Hide details
Hint
Loading
Rules
Success
Events
Slot clicks
Slots
Append and prepend
Sponsors
Support
#
Inputs
The 
v-input
 component gives you a baseline to create your own custom inputs. It consists of a prepend/append slot, messages, and a default slot.
Report a Bug
Open issues
View on GitHub
#
Usage
v-input
 has 4 main areas. The prepended slot, the appended slot, the default slot, and messages. These make up the core logic shared between all form components.
 Default Slot 
Messages
#
API
Component
Description
v-input
Primary Component
Toggle Inline API
#
Caveats
The 
v-input
 component is used as a wrapper for all of the Vuetify form controls. It does 
NOT
 inherit attributes as they are expected to be passed down to inner inputs.
#
Examples
#
Props
#
Error
As any validatable Vuetify component, 
v-input
 can be set to error state using 
error
 prop, messages can be added using 
error-messages
 prop. You can determine error messages count to show using 
error-count
 property.
#
Error count
You can add multiple errors to 
v-input
 using 
error-count
 property.
 Input 
Fatal error
Another error
 Input 
Fatal error
#
Hide details
When the 
hide-details
 prop is set to 
auto
 messages will be rendered only if there‚Äôs a message (hint, error message etc) to display.
Main input
Main input
Another input
Another input
#
Hint
v-input
 can have 
hint
 which can tell user how to use the input (when focused). 
persistent-hint
 prop makes the hint visible always if no 
error-messages
 are displayed.
Show messages
 Input 
I am hint
#
Loading
v-input
 has 
loading
 state which can be used, e.g. for data loading indication. Note: 
v-text-field
 is used just for example.
#
Rules
You can add custom validation rules to 
v-input
, add them as functions returning 
true
/error message. Note: 
v-text-field
 is used just for example.
#
Success
As any validatable Vuetify component, 
v-input
 can be set to success state using 
success
 prop, you can add message to it using 
success-messages
 prop.
 Input 
#
Events
#
Slot clicks
v-input
 can have 
click:append
 and 
click:prepend
 events for its slots. Note: 
v-text-field
 is used just for example.
 Default Slot 
Messages
#
Slots
#
Append and prepend
v-input
 has 
append
 and 
prepend
 slots. You can place custom icons in them.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Forms
Components
Selects
Components
Text fields
Components
Forms
OTP Input
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/otp-input/#usage:














OTP Input ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
Length
Focus-all
Error
Variants
Loader
Examples
Card variants
Mobile text
Verify account
Divider
Sponsors
Support
#
OTP Input
The OTP input is used for MFA procedure of authenticating users by a one-time password.
Report a Bug
Open issues
View on GitHub
This feature was introduced in 
v3.4.0 (Blackguard)
#
Usage
Here we display a list of settings that could be applied within an application.
 Default 
Solo
Solo-filled
Underlined
Placeholder
Placeholder
Focus all
Disabled
Loading
Length
6
<
v-otp-input
>
</
v-otp-input
>
#
API
Component
Description
v-otp-input
Primary Component
Toggle Inline API
#
Anatomy
The 
v-otp-input
 component is a collection of 
v-field
 components that combine to create a single input.
OTP input Anatomy
Element / Area
Description
1. Container
The OTP input container holds a number of 
v-field
 components
2. Field
The 
v-field
 component is used to create a single input field
#
Guide
The 
v-otp-input
 component is a collection of 
v-field
 components that combine to create a single input. It is used to validate a one-time password (OTP) that is sent to the user via email or SMS.
The following code snippet is an example of a basic 
v-otp-input
 component.
<
v-otp-input
>
</
v-otp-input
>


#
Props
The 
v-otp-input
 component has support for most of 
v-field
‚Äôs props and is follows the same design patterns as other inputs.
#
Length
The 
length
 prop determines the number of 
v-field
 components that are rendered. The default value is 
6
.
#
Focus-all
The 
autofocus
 prop automatically focuses the first element in the 
v-otp-input
 component.
#
Error
The 
error
 prop puts the 
v-otp-input
 into an error state. This is useful for displaying validation errors.
#
Variants
The 
v-otp-input
 component supports the same variants as 
v-field
, 
v-text-field
 and other inputs.
#
Loader
The 
loader
 prop displays a loader when the 
v-otp-input
 component is in a loading state. When complete, emits a 
finish
 event.
Submit
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-otp-input
 component.
#
Card variants
The following example is a detailed example of a 
v-otp-input
 component used within a card.
Verify Your Account
 We sent a verification code to john..@gmail.com 
 Please check your email and paste the code below. 
Verify
 Didn't receive the code? 
Resend
#
Mobile text
The following example is a detailed example of a 
v-otp-input
 component used with mobile text.
Mobile phone verification
 Enter the code we just sent to your mobile phone 
+1 408 555 1212
 Need another 
code
? 
Re-send Email
#
Verify account
The following example is a detailed example of a 
v-otp-input
 component used to verify a user‚Äôs account.
 Please enter the one time password to verify your account 
A code has been sent to *****2489
Validate
#
Divider
The following example is a detailed example of a 
v-otp-input
 component used with a divider.
Verification Code
Please enter the verification code sent to your mobile
‚Ä¢
‚Ä¢
‚Ä¢
Send New Code
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Custom inputs
Components
Text fields
Components
Forms
Components
Custom inputs
Radio buttons
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/radio-buttons/#usage:














Radio button component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Model (group)
Model (radio)
Colors
Direction
Slots
Label
Sponsors
Support
#
Radio buttons
The 
v-radio
 component is a simple radio button. When combined with the 
v-radio-group
 component you can provide grouping functionality to allow users to select from a predefined set of options.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Although 
v-radio
 can be used on its own, it is best used in conjunction with 
v-radio-group
.
 Default 
Inline
Radio One
Radio Two
Radio Three
Radio group label
<
v-radio-group
>


<
v-radio
 
label
=
"
Radio One
"
 
value
=
"
one
"
>
</
v-radio
>


<
v-radio
 
label
=
"
Radio Two
"
 
value
=
"
two
"
>
</
v-radio
>


<
v-radio
 
label
=
"
Radio Three
"
 
value
=
"
three
"
>
</
v-radio
>


</
v-radio-group
>
#
API
Component
Description
v-radio-group
Primary Component
v-radio
Sub-component used for modifying the 
v-radio-group
 state
Toggle Inline API
#
Examples
#
Props
#
Model (group)
Using the 
v-model
 (or 
model-value
) you can access and control the selected radio button defined by the set 
value
 on the child 
v-radio
 components.
Selected Button: one
Option One
Option 2 (string)
Option 3 (integer)
If you are using integer values with 
model-value
, you will need to use 
:value
 to set the value of the child 
v-radio
 otherwise it will be evaluated as a string.
#
Model (radio)
The 
v-model
 (or 
model-value
) you can access and control the value of a single radio button. The 
true
/
false
 values can be independently defined using the 
true-value
 and 
false-value
 props.
Select Option
Select Option
Option 1
Option 1
Option 2
#
Colors
Radios can be colored by using any of the builtin colors and contextual names using the 
color
 prop.
red
red-darken-3
indigo
indigo-darken-3
orange
orange-darken-3
primary
secondary
success
info
warning
error
#
Direction
Radio-groups can be presented either as a row or a column, using their respective props. The default is as a column.
Option 1
Option 2
Option 1
Option 2
#
Slots
#
Label
Radio Group labels can be defined in 
label
 slot - that will allow to use HTML content.
Your favourite 
search engine
Of course it's 
Google
Definitely 
Duckduckgo
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Button toggles
Components
Forms
Components
Checkboxes
Components
OTP Input
Range sliders
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/range-sliders/#usage:














Range Slider component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Strict
Disabled
Min and max
Step
Vertical sliders
Slots
Thumb label
Sponsors
Support
#
Range Sliders
The 
v-range-slider
 component complements the 
v-slider
 component nicely when you are in need of representing a range of values.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Sliders reflect a range of values along a bar, from which users may select a single value. They are ideal for adjusting settings such as volume, brightness, or applying image filters.
 Default 
Vertical
0.0
0.0
Disabled
<
v-range-slider
>
</
v-range-slider
>
#
API
Component
Description
v-range-slider
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Strict
With the 
strict
 prop applied, the thumbs of the range slider are not allowed to cross over each other.
20.0
40.0
#
Disabled
You cannot interact with 
disabled
 sliders.
Disabled
30.0
60.0
#
Min and max
You can set 
min
 and 
max
 values of sliders.
-5
5
#
Step
v-range-slider
 can have steps other than 1. This can be helpful for some applications where you need to adjust values with more or less accuracy.
20
40
#
Vertical sliders
You can use the 
vertical
 prop to switch sliders to a vertical orientation. If you need to change the height of the slider, use css.
20.0
40.0
#
Slots
#
Thumb label
Using the 
tick-labels
 prop along with the 
thumb-label
 slot, you can create a very customized solution.
Winter
Spring
Summer
Fall
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Forms
Components
Selects
Components
Sliders
Components
Radio buttons
Selects
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/selects/#usage:














Select component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Caveats
Guide
Props
Density
Multiple
Chips
Readonly
Disabled
Custom title and value
Custom item props
Slots
Item
Append and prepend item
Selection
Sponsors
Support
#
Selects
Select fields components are used for collecting user provided information from a list of options.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
 Default 
Outlined
Underlined
Solo
Solo-filled
Solo-inverted
Select
Select
Clearable
Chips
Multiple
<
v-select


label
=
"
Select
"


:items
=
"
['California', 'Colorado', 'Florida', 'Georgia', 'Texas', 'Wyoming']
"


>
</
v-select
>
#
API
Component
Description
v-select
Primary Component
v-autocomplete
A select component that allows for advanced filtering
v-combobox
A select component that allows for filtering and custom values
Toggle Inline API
#
Caveats
When using objects for the 
items
 prop, you must associate 
item-title
 and 
item-value
 with existing properties on your objects. These values are defaulted to 
title
 and 
value
 and can be changed.
#
Guide
The 
v-select
 component is meant to be a direct replacement for a standard 
<select>
 element. It is commonly used with 
v-form
 and other inputs & controls.
#
Props
All form inputs have a massive API that make it super easy to configure everything just the way you want it.
#
Density
You can use 
density
 prop to adjust vertical spacing within the component.
Compact
Compact
Comfortable
Comfortable
Default
Default
#
Multiple
The 
multiple
 prop allows for multiple selections.
Select
Select
Pick your favorite states
#
Chips
Display selected items as chips with the 
chips
 prop.
Chips
Chips
foo
bar
fizz
buzz
#
Readonly
You can use the 
readonly
 prop on 
v-select
 which will prevent a user from changing its value.
Read-only
Read-only
Foo
#
Disabled
Applying the 
disabled
 prop to a 
v-select
 will prevent a user from interacting with the component.
Disabled
Disabled
#
Custom title and value
You can specify the specific properties within your items array that correspond to the title and value fields. By default, this is 
title
 and 
value
. In this example we also use the 
return-object
 prop which will return the entire object of the selected item on selection.
Select
Florida
Florida, FL
#
Custom item props
item-title
 and 
item-value
 are provided for convenience, and additional props can be passed to list items either through the 
item
 slot (see below) or with the 
itemProps
 prop. Similar to title and value, it has a default value of 
"props"
, which will pass everything in the 
props
 key of each item object to the list item.
const
 items 
=
 
[

  
{

    
title
:
 
'John'
,

    
props
:
 
{
 
subtitle
:
 
'Engineering'
 
}
,

  
}
,


]


:item-props="true"
 will use the entire item object as props. This overrides 
item-title
 and 
item-value
.
const
 items 
=
 
[

  
{

    
title
:
 
'John'
,

    
subtitle
:
 
'Engineering'
,

  
}
,


]


Or a custom transform function can be passed to 
itemProps
 to generate the props for each item.
User
User
See the 
VListItem API
 for a list of available props.
#
Slots
The 
v-select
 component offers slots that make it easy to customize the output of certain parts of the component. This includes the 
prepend
 and 
append
 slots, the 
selection
 slot, and the 
no-data
 slot.
#
Item
The item slot is used to change how items are rendered in the list. It provides 
item
, an 
InternalItem
 object containing the transformed item-title and item-value; and 
props
, an object containing the props and events that would normally be bound to the list item.
User
User
#
Append and prepend item
The 
v-select
 component can be optionally expanded with prepended and appended items. This is perfect for customized 
select-all
 functionality.
Favorite Fruits
Favorite Fruits
#
Selection
The 
selection
 slot can be used to customize the way selected values are shown in the input. This is great when you don‚Äôt want the selection to occupy multiple lines.
Select Item
Select Item
foo
bar
 (+1 others) 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Autocompletes
Components
Combobox
Components
Forms
Components
Range sliders
Sliders
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/sliders/#usage:














Slider component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Colors
Disabled
Step
Icons
Min and max
Readonly
Thumb
Ticks
Vertical sliders
Slots
Append and prepend
Append text field
Sponsors
Support
#
Sliders
The 
v-slider
 component can be used as an alternative visualization instead of a number input.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Sliders reflect a range of values along a track, from which users may select a single value. They are ideal for adjusting settings such as volume, brightness, or applying image filters.
 Default 
Vertical
0.0
Disabled
<
v-slider
>
</
v-slider
>
ads via vuetify
#
API
Component
Description
v-slider
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Colors
You can set the colors of the slider using the props 
color
, 
track-color
 and 
thumb-color
.
color
0.0
track-color
50.0
thumb-color
100.0
#
Disabled
You cannot interact with 
disabled
 sliders.
30.0
#
Step
Using the 
step
 prop you can control the precision of the slider, and how much it should move each step.
0.0
#
Icons
You can add icons to the slider with the 
append-icon
 and 
prepend-icon
 props. With 
@click:append
 and 
@click:prepend
 you can trigger a callback function when click the icon.
Media volume
0.0
Alarm volume
0.0
Icon click callback
0.0
#
Min and max
You can set 
min
 and 
max
 values of sliders.
40.0
#
Readonly
You cannot interact with 
readonly
 sliders, but they look as ordinary ones.
Readonly
30.0
#
Thumb
You can display a thumb label while sliding or always with the 
thumb-label
 prop . It can have a custom color by setting 
thumb-color
 prop and a custom size with the 
thumb-size
 prop.
 Show thumb when using slider 
50.0
 Always show thumb label 
50.0
 Custom thumb size 
50.0
 Custom thumb label 
üôÇ
#
Ticks
Tick marks represent predetermined values to which the user can move the slider.
Show ticks when using slider
0
Always show ticks
0
Tick size
0
Tick labels
Figs
Lemon
Pear
Apple
0
#
Vertical sliders
You can use the 
direction
 prop to switch sliders to a vertical orientation. If you need to change the height of the slider, use css.
Regular
10.0
#
Slots
#
Append and prepend
Use slots such as 
append
 and 
prepend
 to easily customize the 
v-slider
 to fit any situation.
METRONOME
40
BPM
40
#
Append text field
Sliders can be combined with other components in its 
append
 slot, such as 
v-text-field
, to add additional functionality to the component.
R
64
G
128
B
10
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Forms
Components
Selects
Components
Range sliders
Components
Selects
Switches
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/switches/#usage:














Switch component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Colors
Inset
Model as array
Custom true/false values
States
Slots
Label
Sponsors
Support
#
Switches
The 
v-switch
 component provides users the ability to choose between two distinct values. These are very similar to a toggle, or on/off switch, though aesthetically different than a checkbox.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
A 
v-switch
 in its simplest form provides a toggle between 2 values.
 Default 
Inset
Switch
Indeterminate
<
v-switch
 
label
=
"
Switch
"
>
</
v-switch
>
#
API
Component
Description
v-switch
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Colors
Switches can be colored by using any of the builtin colors and contextual names using the 
color
 prop.
red
red-darken-3
indigo
indigo-darken-3
orange
orange-darken-3
primary
secondary
success
info
warning
error
#
Inset
You can make switch render in inset mode.
Switch: true
#
Model as array
Multiple 
v-switch
‚Äôs can share the same 
v-model
 by using an array.
[
  "John"
]
John
Jacob
#
Custom true/false values
The switch can use custom values for its v-model, using the props 
true-value
 and 
false-value
.
Switch: no
#
States
v-switch
 can have different states such as 
default
, 
disabled
, and 
loading
.
on
off
on disabled
off disabled
on loading
off loading
#
Slots
#
Label
If you need to render a switch label with more complex markup than plain text, you can use the 
label
 slot.
 Turn on the progress: 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Checkboxes
Components
Forms
Components
Radio buttons
Components
Sliders
Text fields
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/text-fields/#usage:














Text field component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
Labeling
Placeholders
Hints & messages
Clearable
Validation & rules
Forms
Examples
Custom colors
Density
Disabled and readonly
Hide details
Hint
Icons
Prefixes and suffixes
Validation
Variant
Events
Icon events
Slots
Icon slots
Label
Progress
Misc
Custom validation
Full width with counter
Password input
Login Form
Sponsors
Support
#
Text fields
Text field components are used for collecting user provided information.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
A simple text field with placeholder and/or label.
 Default 
Outlined
Underlined
Solo
Solo-filled
Solo-inverted
Label
Label
Label
Label
Prepend icon
Clearable
<
v-text-field
 
label
=
"
Label
"
>
</
v-text-field
>
#
API
Component
Description
v-text-field
Primary Component
Toggle Inline API
#
Anatomy
The recommended placement of elements inside of 
v-text-field
 is:
Place a 
v-icon
 at the start of the input or label
Place label after prepended content
Element / Area
Description
1. Container
The Text field container contains the 
v-input
 and 
v-field
 components
2. Prepend icon
A custom icon that is located before 
v-field
3. Prepend-inner icon
A custom icon that is located at the start of 
v-field
4. Label
A content area for displaying text to users that correlates to the input
5. Append-inner icon
A custom icon that is located at the end of 
v-field
 component
6. Append icon
A custom icon that is located after 
v-field
 component
#
Guide
The 
v-text-field
 component is a versatile 
<input type="text">
 field which combines both the 
v-input
 and 
v-field
 components into a single offering. It is a commonly used element that provides the baseline for other form inputs; such as 
v-select
, 
v-autocomplete
, 
v-combobox
. In this guide you learn the basic fundamentals of 
v-text-field
 and how its various properties interact with each other.
#
Props
The 
v-text-field
 component has an massive API with numerous options to modify the display, functionality, or style of your inputs. Many of the configurable options are also available through 
slots
.
#
Labeling
The 
label
 prop displays custom text for identifying an input‚Äôs purpose. The following code snippet is an example of a basic 
v-text-field
 component:
<
v-text-field
 
label
=
"
First name
"
>
</
v-text-field
>


Using this baseline makes it easy to put together quick mock implementations of your interface without needing to hook up any functional logic.
The following code snippet is an example of a simple form for for collecting a user‚Äôs 
First
 name:
First name
First name
#
Placeholders
Sometimes a label alone doesn‚Äôt convey enough information and you need to expose more. For those use-cases, use the 
placeholder
 property with or without the 
label
 or 
hint
 properties.
In the following snippet, we improve the user experience of a 
v-text-field
 that is capturing an email address:
<
v-text-field

  
label
=
"
Email address
"

  
placeholder
=
"
johndoe@gmail.com
"

  
type
=
"
email
"


>
</
v-text-field
>


When the user focuses the input, the placeholder fades in as the label translates up. The added visual element improves the user experience when using multiple field inputs.
Email address
Email address
Use the 
persistent-placeholder
 prop to force the 
placeholder
 to be visible, even when the input is not focused.
#
Hints & messages
The 
label
 and 
placeholder
 props are useful for providing context to the input but are typically concise. For longer textual information, all Vuetify inputs contain a 
details
 section that is used to provide 
hints
, regular 
messages
, and 
error-messages
. In the following example watch the custom hint message display when you focus the input:
Password
Password
If you want to make the hint visible at all times, use the 
persistent-hint
 property. The following example demonstrates how to force a 
hint
 to show in the input‚Äôs details:
<
v-text-field

  
hint
=
"
Enter your password to access this website
"

  
label
=
"
Password
"

  
persistent-hint

  
type
=
"
input
"


>
</
v-text-field
>


In addition to 
persistent-hint
, there are 3 other properties that support a persistent state:
persistent-clear
 - always show the input clear icon when a 
value
 is present
persistent-counter
 - always show input character length element
persistent-placeholder
 - always show placeholder, causes label to automatically elevate
#
Clearable
The 
clearable
 prop appends an inner 
v-icon
 that clears the 
v-text-field
 when clicked. When an input is cleared, it resets the current 
v-text-field
 value. The following example displays an interactive icon when the mouse hovers over the input:
Last name
Last name
Note that 
readonly
 will not remove the clear icon, to prevent readonly inputs from being cleared you should also disable 
clearable
.
Sometimes you may need to perform an action when the user clears an input. By using a custom 
Vue Event Handler
, you can bind a custom function that is invoked whenever the 
v-text-field
 is cleared by the user. The following example demonstrates how to use a a custom event handler to invoke the 
onClear
 method:
 Component.vue
<
template
>

  
<
v-text-field

    
clearable

    
label
=
"
Last name
"

    
placeholder
=
"
Doe
"

    
persistent-clear

    
@click:
clear
=
"
onClear
"

  
>
</
v-text-field
>


</
template
>



<
script
 
setup
>

  
onClear
 
(
)
 
{

    
alert
(
'User cleared the input'
)

  
}


</
script
>


You can see more supported events on the 
v-text-field
 
API page
.
#
Validation & rules
When working with inputs you often need to validate the user‚Äôs input in some manner; i.e. Email, Password. Use the 
rules
 property to invoke custom functions based upon the 
v-text-field
‚Äôs state. It accepts an array of 
functions
 that return either 
true
 or a 
string
. In the following example, enter a value into the field and then clear it:
Last name
Last name
#
Forms
Group multiple 
v-text-field
 components and other functionality within a 
v-form
 component; for a more detailed look at forms, please visit the 
v-form
 page. Forms are useful for validating more than 1 input and make it easy to interact with the state of many fields at once. The following example combines multiple 
v-text-field
 components to create a login form:
Email
Email
Password
Password
 Sign In 
#
Examples
The following is a collection of 
v-text-field
 examples that demonstrate how different the properties work in an application.
#
Custom colors
The 
color
 prop provides an easy way to change the color of textual content; label, prefix, suffix, etc. This color is applied as long as 
v-text-field
 is focused.
User Registration
First name
First name
Last name
Last name
Email
Email
Password
Password
I agree to site terms and conditions
 Complete Registration 
#
Density
The 
density
 prop decreases the height of the text field based upon 1 of 3 levels of density; 
default
, 
comfortable
, and 
compact
.
Search templates
#
Disabled and readonly
The state of a text field can be changed by providing the 
disabled
 or 
readonly
 props.
Regular
Regular
Regular
Regular
Solo
Solo
Solo
Solo
Outlined
Outlined
Outlined
Outlined
underlined
underlined
underlined
underlined
#
Hide details
When 
hide-details
 is set to 
auto
 messages will be rendered only if there‚Äôs a message (hint, error message, counter value etc) to display.
Main input
Main input
Another input
Another input
#
Hint
The 
hint
 property on text fields adds the provided string beneath the text field. Using 
persistent-hint
 keeps the hint visible when the text field is not focused.
Your product or service
Your product or service
Your landing page
Your landing page
www.example.com/page
Your product or service
Your product or service
Your landing page
Your landing page
www.example.com/page
Your product or service
Your product or service
Your landing page
Your landing page
www.example.com/page
#
Icons
You can add icons to the text field with 
prepend-icon
, 
append-icon
 and 
append-inner-icon
 props.
Prepend
Prepend
Prepend inner
Prepend inner
Append
Append
Append inner
Append inner
Prepend
Prepend
Prepend inner
Prepend inner
Append
Append
Append inner
Append inner
Prepend
Prepend
Prepend inner
Prepend inner
Append
Append
Append inner
Append inner
Prepend
Prepend
Prepend inner
Prepend inner
Append
Append
Append inner
Append inner
#
Prefixes and suffixes
The 
prefix
 and 
suffix
 properties allows you to prepend and append inline non-modifiable text next to the text field.
Prefix for dollar currency
Amount
Amount
$
Suffix for weight
Weight
Weight
lbs
Suffix for email domain
Email address
Email address
@gmail.com
Suffix for time zone
Label Text
Label Text
PST
#
Validation
Vuetify includes simple validation through the 
rules
 prop. The prop accepts a mixed array of types 
function
, 
boolean
 and 
string
. When the input value changes, each element in the array will be validated. Functions pass the current v-model as an argument and must return either 
true
 / 
false
 or a 
string
 containing an error message.
Title
Title
18 / 20
E-mail
E-mail
#
Variant
The 
variant
 prop provides an easy way to customize the style of your text field. The following values are valid options: 
solo
, 
filled
, 
outlined
, 
plain
, and 
underlined
.
Regular
Regular
Solo
Solo
Filled
Filled
Outlined
Outlined
Plain
Plain
Underlined
Underlined
#
Events
#
Icon events
click:prepend
, 
click:append
, 
click:append-inner
, and 
click:clear
 are emitted when you click on the respective icon. Note that these events will not be fired if the slot is used instead.
Message
Message
#
Slots
Slots allow you to customize the display of many 
v-text-field
 properties to modify what Vuetify does by default. The following slots are available on the 
v-text-field
 component:
Slot name
Description
1. prepend
Provided by 
v-input
, positioned before the input field
2. prepend-inner
Provided by 
v-field
, positioned at the start of the input field
3. label
The form input label
4. append-inner
Provided by 
v-field
, positioned at the end of the input field
5. append
Provided by 
v-input
, positioned after the input field
6. details
Used for displaying 
messages
, 
hint
, 
error-messages
, and more
The following example uses the 
label
, 
prepend
, and 
prepend-inner
 slots and adds custom elements to the 
v-text-field
 Component.vue
<
template
>

  
<
v-text-field
 
v-model
=
"
model
"
>

    
<
template
 
v-slot:
label
>

      
<
span
>
Type something...
</
span
>

    
</
template
>


    
<
template
 
v-slot:
prepend
>

      
<
v-icon

        
:color
=
"
model ? 'primary' : undefined
"

        
icon
=
"
$vuetify
"

      
/>

    
</
template
>


    
<
template
 
v-slot:
append-inner
>

      
<
v-icon

        
v-if
=
"
model
"

        
icon
=
"
mdi-check-circle
"

      
/>

    
</
template
>


    
<
template
 
#details
>

      
<
v-spacer
 
/>


      See our 
<
a
 
href
=
"
#
"
>
Terms and Service
</
a
>

    
</
template
>

  
</
v-text-field
>


</
template
>



<
script
 
setup
>

  
import
 
{
 shallowRef 
}
 
from
 
'vue'


  
const
 model 
=
 
shallowRef
(
''
)


</
script
>


#
Icon slots
Instead of using 
prepend
/
append
/
append-inner
 icons you can use slots to extend input‚Äôs functionality.
Message
Message
 Menu 
#
Label
Text field label can be defined in 
label
 slot - that will allow to use HTML content
 What about an 
icon
 here? 
 What about an 
icon
 here? 
#
Progress
You can display a progress bar instead of the bottom line. You can use the default indeterminate progress having same color as the text field or designate a custom one using the 
progress
 slot
Loading
Type characters to change the loader color
Type characters to change the loader color
#
Misc
#
Custom validation
While the built in 
v-form
 or 3rd party plugin such as 
vuelidate
 or 
vee-validation
 can help streamline your validation process, you can choose to simply control it yourself.
Full Name
Full Name
Address Line
Address Line
0 / 25
City
City
State/Province/Region
State/Province/Region
ZIP / Postal Code
ZIP / Postal Code
Country
Country
 Cancel 
 Submit 
#
Full width with counter
Full width text fields allow you to create boundless inputs. In this example, we use a 
v-divider
 to separate the fields.
To
Trevor Handsen
Subject
Message
118 / 120
#
Password input
Using the HTML input 
type
 
password
 can be used with an appended icon and callback to control the visibility.
Normal with hint text
Normal with hint text
8
Visible
Visible
#
Login Form
In this example we use a combination of prepend and append icon to create a custom login form.
Account
 Password 
 Forgot login password?
 Warning: After 3 consecutive failed login attempts, you account will be temporarily locked for three hours. If you must login now, you can also click "Forgot login password?" below to reset the login password. 
 Log In 
 Sign up now 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Textareas
Components
Selects
Components
Forms
Components
Switches
Textareas
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/textareas/#usage:














Textarea component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Auto grow
Background color
Browser autocomplete
Clearable
Counter
Icons
No resize
Rows
Misc
Signup form
Sponsors
Support
#
Textareas
Textarea components are used for collecting large amounts of textual data.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
v-textarea
 in its simplest form is a multi-line text-field, useful for larger amounts of text.
 Default 
Outlined
Underlined
Solo
Solo-filled
Solo-inverted
Label
Label
Label
Label
Prepend icon
Clearable
<
v-textarea
 
label
=
"
Label
"
>
</
v-textarea
>
ads via vuetify
#
API
Component
Description
v-textarea
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Auto grow
When using the 
auto-grow
 prop, textarea‚Äôs will automatically increase in size when the contained text exceeds its size.
Label
Label
#
Background color
The 
background-color
 and 
color
 props give you more control over styling 
v-textarea
‚Äôs.
Label
Label
Label
Label
Label
Label
#
Browser autocomplete
The 
autocomplete
 prop gives you the option to enable the browser to predict user input.
Email
Email
#
Clearable
You can clear the text from a 
v-textarea
 by using the 
clearable
 prop, and customize the icon used with the 
clearable-icon
 prop.
Text
Text
#
Counter
The 
counter
 prop informs the user of a character limit for the 
v-textarea
.
Text
Text
6
#
Icons
The 
append-icon
 and 
prepend-icon
 props help add context to 
v-textarea
.
prepend-icon
prepend-icon
append-icon
append-icon
prepend-inner-icon
prepend-inner-icon
append-inner-icon
append-inner-icon
#
No resize
v-textarea
‚Äôs have the option to remain the same size regardless of their content‚Äôs size, using the 
no-resize
 prop.
Text
Text
#
Rows
The 
rows
 prop allows you to define how many rows the textarea has, when combined with the 
row-height
 prop you can further customize your rows by defining their height.
One row
One row
Two rows
Two rows
Three rows
Three rows
Four rows
Four rows
#
Misc
#
Signup form
Utilizing alternative input styles, you can create amazing interfaces that are easy to build and easy to use.
 Sign up 
Password
Password
0 / 6
Phone number
Phone number
Email address
Email address
Bio
Bio
 I agree to the¬† 
Terms of Service
 ¬†and¬† 
Privacy Policy
* 
 Clear 
 Submit 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Forms
Components
Selects
Components
Text fields
Components
Text fields
Confirm Edit
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/confirm-edit/#usage:














Confirm Edit ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Guide
Pickers
Sponsors
Support
#
Confirm edit
The 
v-confirm-edit
 component is used to allow the user to verify their changes before they are committed.
Report a Bug
Open issues
View on GitHub
This feature was introduced in 
v3.6.0
#
Usage
 Default 
Update Field
Modify my value
Cancel
OK
Ok text
Ok text
Cancel text
Cancel text
<
v-confirm-edit
 
v-model
=
"
model
"
>


<
template
 
v-slot:
default
=
"
{ model: proxyModel, actions }
"
>


<
v-card


class
=
"
mx-auto
"


max-width
=
"
320
"


title
=
"
Update Field
"


>


<
template
 
v-slot:
text
>


<
v-text-field


v-model
=
"
proxyModel.value
"


messages
=
"
Modify my value
"


>
</
v-text-field
>


</
template
>


<
template
 
v-slot:
actions
>


<
v-spacer
>
</
v-spacer
>


<
component
 
:is
=
"
actions
"
>
</
component
>


</
template
>


</
v-card
>


</
template
>


</
v-confirm-edit
>
<
script setup
>


import
 
{
 shallowRef 
}
 
from
 
'vue'


const
 model 
=
 
shallowRef
(
'Egg plant'
)


<
/
script
>
ads via vuetify
#
API
Component
Description
v-confirm-edit
Primary Component
Toggle Inline API
#
Guide
The 
v-confirm-edit
 component is an intuitive way to capture a model‚Äôs changes before they are committed. This is useful when you want to prevent accidental changes or to allow the user to cancel their changes.
#
Pickers
It‚Äôs easy to integrate pickers into the 
v-confirm-edit
 component. This allows you to provide a more user-friendly experience when selecting dates, times, or colors.
Select date
Enter date
November 2024
S
M
T
W
T
F
S
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
Cancel
OK
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Avatars
Components
Icons
Components
Toolbars
Components
Textareas
Data iterators
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/data-iterators/#usage:














Data iterator component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Examples
Slots
Default
Header and footer
Controllable props
Loader props
Sponsors
Support
#
Data iterators
The 
v-data-iterator
 component is used for displaying arbitrary data, and shares a majority of its functionality with the 
v-data-table
 component. Features include sorting, searching, pagination, and selection.
Report a Bug
Open issues
View on GitHub
This feature was introduced in 
v3.4.0 (Blackguard)
#
Usage
The 
v-data-iterator
 allows you to customize exactly how to display your data. In this example we are using a grid with cards.
 Default 
Item 1
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Item 2
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Item 3
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
1
2
3
4
5
<
v-data-iterator
 
:items
=
"
items
"
 
:page
=
"
page
"
>


<
template
 
v-slot:
default
=
"
{ items }
"
>


<
template


v-for
=
"
(item, i) in items
"


:key
=
"
i
"


>


<
v-card
 
v-bind
=
"
item.raw
"
>
</
v-card
>


<
br
>


</
template
>


</
template
>


</
v-data-iterator
>
<
script setup
>


import
 
{
 ref 
}
 
from
 
'vue'


const
 page 
=
 
ref
(
1
)


const
 items 
=
 Array
.
from
(
{
 
length
:
 
15
 
}
,
 
(
k
,
 v
)
 
=>
 
(
{


title
:
 
'Item '
 
+
 v 
+
 
1
,


text
:
 
'Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!'
,


}
)
)


<
/
script
>
#
API
Component
Description
v-data-iterator
Primary Component
Toggle Inline API
#
Anatomy
The recommended placement of elements inside of a 
v-data-iterator
 are:
Place a 
v-toolbar
 or similar component above the main content
Place content after the header
Place a 
v-pagination
 below the main content
Element / Area
Description
1. Header (optional)
The header is used to display a title and actions
2. Container
The container is the root element of the component
3. Footer (optional)
The footer is used to display pagination
#
Guide
The 
v-data-iterator
 component is used for displaying data, and shares a majority of its functionality with the 
v-data-table
 component. Features include sorting, searching, pagination, and selection.
The following code snippet is an example of a basic 
v-data-iterator
 component:
<
v-data-iterator
 
:items
=
"
[1, 2, 3, 4, 5]
"
>

  
<
template
 
v-slot:
default
=
"
{ items }
"
>

    
<
v-list-item

      
v-for
=
"
(item, i) in items
"

      
:key
=
"
i
"

      
:title
=
"
`Item ${i}`
"

    
>
</
v-list-item
>

  
</
template
>


</
v-data-iterator
>


#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-data-iterator
 component.
#
Slots
The 
v-data-iterator
 component has 4 main slots
#
Default
The 
v-data-iterator
 has internal state for both selection and expansion, just like 
v-data-table
. In this example we use the methods 
isExpanded
 and 
toggleExpand
 available on the default slot.
Frozen Yogurt
A tangy and creamy dessert made from yogurt and sometimes fruit, Frozen Yogurt is a lighter alternative to ice cream. Perfect for those who crave a sweet treat but want to keep it on the healthier side.
Show details
Ice cream sandwich
A classic treat featuring a layer of creamy ice cream sandwiched between two cookies or cake layers. Ideal for those hot summer days when you can't decide between a cookie and ice cream.
Show details
Eclair
A small, individual cake topped with frosting and often adorned with sprinkles or other decorations. Great for parties or as a quick indulgence when you need a sugar fix.
Show details
Cupcake
A small, individual cake topped with frosting and often adorned with sprinkles or other decorations. Great for parties or as a quick indulgence when you need a sugar fix.
Show details
#
Header and footer
The 
v-data-iterator
 has both a 
header
 and 
footer
 slot for adding extra content.
 Most popular mice 
See all
Logitech G Pro X
Lorem ipsum dil orei namdie dkaf
DPI:
16000
Buttons:
8
Weight:
63g
Wireless:
Yes
Price:
$149.99
Razer DeathAdder V2
Lorem ipsum dil orei namdie dkaf
DPI:
20000
Buttons:
8
Weight:
82g
Wireless:
No
Price:
$69.99
Corsair Dark Core RGB
Lorem ipsum dil orei namdie dkaf
DPI:
18000
Buttons:
9
Weight:
133g
Wireless:
Yes
Price:
$89.99
SteelSeries Rival 3
Lorem ipsum dil orei namdie dkaf
DPI:
8500
Buttons:
6
Weight:
77g
Wireless:
No
Price:
$29.99
 Total mice: 15 
 Page 1 of 4
#
Controllable props
Sorting, filters and pagination can be controlled externally by using the individual props
The Sci-Fi Shooter Experience
Dive into a futuristic world of intense battles and alien encounters.
8 minutes
Read
Epic Adventures in Open Worlds
Embark on a journey through vast, immersive landscapes and quests.
10 minutes
Read
Surviving the Space Station Horror
Navigate a haunted space station in this chilling survival horror game.
9 minutes
Read
 Page 1 of 3
#
Loader props
Loader can be used to change loader on ‚Äúloading‚Äù prop
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Basics
Components
Toolbars
Components
Confirm Edit
Introduction
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/data-tables/introduction/#components:














Data table - Introduction ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Components
API
Guides
Sponsors
Support
#
Data table - Introduction
The data table component is used for displaying tabular data in a way that is easy for users to scan. It includes sorting, searching, pagination and selection.
This feature was introduced in 
v3.4.0 (Blackguard)
#
Components
Before diving into the guides and examples, let‚Äôs take a moment to understand the core components available for data tables. These are variations optimized for different scenarios.
Component
Use-case
Data tables
The base functionality data table, used for paginating, filtering and sorting data.
Server tables
Adds new events and properties used for displaying data from a server
Virtual tables
A version of the data table that has built in row virtualization features
#
API
Component
Description
v-data-table
Primary Component
v-data-table-server
Specialized Data-table for displaying results from a server
v-data-table-virtual
Data-table with built in row virtualization
v-data-table-footer
Functional Component used to display Data-table footer
v-checkbox-btn
Reusable lightweight 
v-checkbox
Toggle Inline API
#
Guides
Explore data table pages that provide detailed explanations and code samples for various functionalities and use cases.
Guide
Description
Basics
Understand the fundamental building blocks of Data Tables.
Data and Display
Learn how to manipulate and display data effectively.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Pagination
Components
Selects
Components
Basics
Components
Data iterators
Basics
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/data-tables/basics/#usage:














Data table component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Server side tables
Virtual tables
Guide
Items
Headers
Keys and values
Sorting, filtering, pagination
Customization
Props
Density
Hide default header and footer
Selection
Simple checkbox
Slots
Header slot
Headers slot
Item slot
Item key slot
Group header slot
Loading slot
Examples
CRUD Actions
Expandable rows
Sponsors
Support
#
Data tables
The 
v-data-table
 component is used for displaying tabular data. Features include sorting, searching, pagination, grouping, and row selection.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
The standard data table presumes that the entire data set is available locally. Sorting, pagination, and filtering is supported and done internally by the component itself.
 Default 
Name
Species
Diet
Habitat
African Elephant
Loxodonta africana
Herbivore
Savanna, Forests
Lion
Panthera leo
Carnivore
Savanna, Grassland
Giraffe
Giraffa camelopardalis
Herbivore
Savanna, Grassland
Zebra
Equus quagga
Herbivore
Savanna, Grassland
Hippopotamus
Hippopotamus amphibius
Herbivore
Riverbanks, Lakes
Meerkat
Suricata suricatta
Omnivore
Desert, Savanna
Hyena
Crocuta crocuta
Carnivore
Savanna, Grassland
Zebra
Equus quagga
Herbivore
Savanna, Grassland
Ostrich
Struthio camelus
Omnivore
Savanna, Grassland
Cheetah
Acinonyx jubatus
Carnivore
Savanna, Grassland
Items per page:
10
1-10 of 10
<
v-data-table
 
:items
=
"
items
"
>
</
v-data-table
>
<
script setup
>


const
 items 
=
 
[


{


name
:
 
'African Elephant'
,


species
:
 
'Loxodonta africana'
,


diet
:
 
'Herbivore'
,


habitat
:
 
'Savanna, Forests'
,


}
,


// ... more items


]


<
/
script
>
#
API
Component
Description
v-data-table
Primary Component
v-data-table-headers
Functional Component used to display Data-table headers
v-data-table-footer
Functional Component used to display Data-table footers
v-data-table-row
Functional Component used to display a single row of a data-table
v-data-table-rows
Functional Component used to display all of the rows in a data-table
v-checkbox-btn
Reusable lightweight 
v-checkbox
Toggle Inline API
#
Server side tables
This variant of the data table is meant to be used for very large datasets, where it would be inefficient to load all the data into the client. It supports sorting, filtering, pagination, and selection like a standard data table, but all the logic must be handled externally by your backend or database.
Component
Description
v-data-table-server
Primary Component
Find more information and examples on the 
Server side tables
 page.
Car Model
Horsepower
Fuel Type
Origin
Price ($)
Ford Mustang
450
Gasoline
USA
55000
Tesla Model S
670
Electric
USA
79999
BMW M3
503
Gasoline
Germany
70000
Audi RS6
591
Gasoline
Germany
109000
Chevrolet Camaro
650
Gasoline
USA
62000
Items per page:
5
1-5 of 10
#
Virtual tables
The virtual variant of the data table relies, like the standard variant, on all data being available locally. But unlike the standard variant it uses virtualization to only render a small portion of the rows. This makes it well suited for displaying large data sets. It supports client-side sorting and filtering, but not pagination.
Component
Description
v-data-table-virtual
Primary Component
Find more information and examples on the 
Virtual tables
 page.
Boat Type
Speed (knots)
Length (m)
Price ($)
Year
Speedster #0
35
22
300000
2021
OceanMaster #1
25
35
500000
2020
Voyager #2
20
45
700000
2019
WaveRunner #3
40
19
250000
2022
SeaBreeze #4
28
31
450000
2018
HarborGuard #5
18
50
800000
2017
SlickFin #6
33
24
350000
2021
StormBreaker #7
22
38
600000
2020
WindSail #8
15
55
900000
2019
FastTide #9
37
20
280000
2022
Speedster #10
35
22
300000
2021
OceanMaster #11
25
35
500000
2020
Voyager #12
20
45
700000
2019
WaveRunner #13
40
19
250000
2022
SeaBreeze #14
28
31
450000
2018
HarborGuard #15
18
50
800000
2017
SlickFin #16
33
24
350000
2021
StormBreaker #17
22
38
600000
2020
WindSail #18
15
55
900000
2019
FastTide #19
37
20
280000
2022
Speedster #20
35
22
300000
2021
OceanMaster #21
25
35
500000
2020
Voyager #22
20
45
700000
2019
WaveRunner #23
40
19
250000
2022
SeaBreeze #24
28
31
450000
2018
#
Guide
The 
v-data-table
 component is a simple and powerful table manipulation component. It is perfect for showing large amounts of tabular data.
#
Items
Table items can be objects with almost any shape or number of properties. The only requirement is some form of unique identifier if row selection is being utilized.
#
Headers
The headers array is the core of the table. It defines which properties to display, their associated labels, how they should be sorted, and what they should look like. 
 All properties are optional, but at least one of 
title
, 
value
, or 
key
 should be present to display more than just an empty column:
headers 
=
 
[

  
{
 
title
:
 
'No data, just a label'
 
}
,

  
{
 
key
:
 
'quantity'
 
}
,

  
{
 
value
:
 
'price'
 
}
,


]


Without any headers defined, the table will use all the keys of the first item as headers.
Headers can also be a tree structure with a 
children
 property to create multi-row header labels with rowspan and colspan calculated automatically. 
 Leaf nodes (objects without 
children
) will be used as columns for each item. 
 Branch nodes (objects with 
children
) support all the same sorting and filtering options as leaf nodes, but cannot be used as columns.
Pyramid
Location
Construction Date
Dimensions
Height (m)
Base (m)
Volume (m¬≥)
Great Pyramid of Giza
Egypt
c. 2580‚Äì2560 BC
146.6
230.4
2583285
Pyramid of Khafre
Egypt
c. 2570 BC
136.4
215.3
1477485
Red Pyramid
Egypt
c. 2590 BC
104
220
1602895
Bent Pyramid
Egypt
c. 2600 BC
101.1
188.6
1200690
Pyramid of the Sun
Mexico
c. 200 CE
65
225
1237097
Items per page:
5
1-5 of 5
#
Keys and values
The 
key
 property is used to identify the column in slots, events, filters, and sort functions. It will default to the 
value
 property if 
value
 is a string. 
value
 maps the column to a property in the items array. If 
value
 is not defined it will default to 
key
, so key and value are interchangeable in most cases. The exception to this is reserved keys like 
data-table-select
 and 
data-table-expand
 which must be defined as 
key
 to work properly. 
key
 and 
value
 both support dot notation to access properties of nested objects, and 
value
 can also be a function to combine multiple properties or do other custom formatting. If 
value
 is not a string then 
key
 must be defined.
items 
=
 
[

  
{

    
id
:
 
1
,

    
name
:
 
{

      
first
:
 
'John'
,

      
last
:
 
'Doe'
,

    
}
,

  
}


]

headers 
=
 
[

  
{
 
title
:
 
'First Name'
,
 
value
:
 
'name.first'
 
}
,

  
{
 
title
:
 
'Last Name'
,
 
key
:
 
'name.last'
 
}
,

  
{

    
title
:
 
'Full Name'
,

    
key
:
 
'fullName'
,

    
value
:
 
item
 
=>
 
`
${
item
.
name
.
first
}
 
${
item
.
name
.
last
}
`
,

  
}
,


]


#
Sorting, filtering, pagination
See 
Data and display
.
#
Customization
Other options are available for setting 
width
, 
align
, 
fixed
, or pass custom props to the header element with 
headerProps
 and row cells with 
cellProps
.
#
Props
There are no shortable of properties available for customizing various aspects of the Data table components.
#
Density
Using the 
density
 prop you are able to give your data tables an alternate style.
Plant
Light
Height
Pet Friendly
Price ($)
Fern
Low
20cm
Yes
20
Snake Plant
Low
50cm
No
35
Monstera
Medium
60cm
No
50
Pothos
Low to medium
40cm
Yes
25
ZZ Plant
Low to medium
90cm
Yes
30
Spider Plant
Bright, indirect
30cm
Yes
15
Air Plant
Bright, indirect
15cm
Yes
10
Peperomia
Bright, indirect
25cm
Yes
20
Aloe Vera
Bright, direct
30cm
Yes
15
Jade Plant
Bright, direct
40cm
Yes
25
Items per page:
10
1-10 of 10
#
Hide default header and footer
You can apply the 
hide-default-header
 and 
hide-default-footer
 props to remove the default header and footer respectively.
Frozen Yogurt
159
6
24
4
1%
Ice cream sandwich
237
9
37
4.3
1%
Eclair
262
16
23
6
7%
Cupcake
305
3.7
67
4.3
8%
Gingerbread
356
16
49
3.9
16%
Jelly bean
375
0
94
0
0%
Lollipop
392
0.2
98
0
2%
Honeycomb
408
3.2
87
6.5
45%
Donut
452
25
51
4.9
22%
KitKat
518
26
65
7
6%
#
Selection
The 
show-select
 prop will render a checkbox in the default header to toggle all rows, and a checkbox for each row.
For more information and examples, see the 
selection examples
 page.
Name
Location
Height
Base
Volume
üçé Apple
Washington
0.1
0.07
0.0001
üçå Banana
Ecuador
0.2
0.05
0.0002
üçá Grapes
Italy
0.02
0.02
0.00001
üçâ Watermelon
China
0.4
0.3
0.03
üçç Pineapple
Thailand
0.3
0.2
0.005
üçí Cherries
Turkey
0.02
0.02
0.00001
ü•≠ Mango
India
0.15
0.1
0.0005
üçì Strawberry
USA
0.03
0.03
0.00002
üçë Peach
China
0.09
0.08
0.0004
ü•ù Kiwi
New Zealand
0.05
0.05
0.0001
Items per page:
10
1-10 of 10
#
Simple checkbox
When wanting to use a checkbox component inside of a slot template in your data tables, use the 
v-checkbox-btn
 component rather than the 
v-checkbox
 component. The 
v-checkbox-btn
 component is used internally and will respect header alignment.
Name
Manufacturer
Year
Sales
Exclusive
PlayStation 5
Sony
2020
10M
Xbox Series X
Microsoft
2020
6.5M
Nintendo Switch
Nintendo
2017
89M
PlayStation 4
Sony
2013
116M
Xbox One
Microsoft
2013
50M
Nintendo Wii
Nintendo
2006
101M
Items per page:
10
1-6 of 6
#
Slots
#
Header slot
You can use the dynamic slots 
header.<key>
 to customize only certain columns. 
<key>
 corresponds to the 
key
 property in the items found in the 
headers
 prop.
There are two built-in slots for customizing both the select (
header.data-table-select
) and expand (
header.data-table-expand
) columns when using 
show-select
 and 
show-expand
 props respectively.
ID
Name
Size
Color
Price
Quantity
1
T-Shirt
M
Red
19.99
10
2
Jeans
32
Blue
49.99
5
3
Sweater
L
Green
29.99
7
4
Jacket
XL
Black
89.99
3
5
Socks
One Size
White
9.99
20
Items per page:
10
1-5 of 5
#
Headers slot
You can also override all the internal headers by using the 
headers
 slot. Remember that you will have to re-implement any internal functionality like sorting.
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
159
6
24
4
1
Ice cream sandwich
237
9
37
4.3
1
Eclair
262
16
23
6
7
Cupcake
305
3.7
67
4.3
8
Gingerbread
356
16
49
3.9
16
Jelly bean
375
0
94
0
0
Lollipop
392
0.2
98
0
2
Honeycomb
408
3.2
87
6.5
45
Donut
452
25
51
4.9
22
KitKat
518
26
65
7
6
Items per page:
10
1-10 of 10
#
Item slot
Normally you would use the 
item.<key>
 slots to render custom markup in specific columns. If you instead need more control over the entire row, you can use the 
item
 slot.
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
159
6
24
4
1
Ice cream sandwich
237
9
37
4.3
1
Eclair
262
16
23
6
7
Cupcake
305
3.7
67
4.3
8
Gingerbread
356
16
49
3.9
16
Jelly bean
375
0
94
0
0
Lollipop
392
0.2
98
0
2
Honeycomb
408
3.2
87
6.5
45
Donut
452
25
51
4.9
22
KitKat
518
26
65
7
6
Items per page:
10
1-10 of 10
#
Item key slot
You can use the dynamic slots 
item.<key>
 to customize only certain columns. 
<key>
 is the name of the 
key
 property in header items sent to 
headers
. So to customize the calories column we‚Äôre using the 
item.calories
 slot.
Vegetable (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Spinach
23
0.4
3.6
2.9
15%
Kael
49
0.9
8.8
4.3
16%
Broccoli
34
0.4
6.6
2.8
6%
Brussels Sprouts
43
0.3
8.9
3.4
9%
Avocado
160
15
9
2
3%
Sweet Potato
86
0.1
20.1
1.6
3%
Corn
96
1.5
21
3.4
2%
Potato
77
0.1
17.5
2
8%
Butternut Squash
45
0.1
11.7
1
4%
Beetroot
43
0.2
10
1.6
6%
Items per page:
10
1-10 of 30
#
Group header slot
When using the 
group-by
 prop, you can customize the group header with the 
group-header
 slot.
Group
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
 Gluten free
 Contains gluten
Items per page:
10
1-2 of 2
#
Loading slot
The 
loading
 slot allows you to customize your table‚Äôs display state when fetching data. In this example we utilize the 
v-skeleton-loader
 component to display a loading animation.
Refresh
Name
Year
Engine
Horsepower
Torque
Chevrolet Camaro
1967
V8
375
415
Ford Mustang
1965
V8
271
312
Dodge Charger
1968
V8
425
490
Pontiac GTO
1964
V8
350
445
Plymouth Barracuda
1964
V8
330
425
Chevrolet Chevelle SS
1970
V8
450
500
Oldsmobile 442
1971
V8
340
440
Dodge Challenger
1970
V8
425
490
AMC Javelin
1968
V8
315
425
Mercury Cougar
1967
V8
335
427
Items per page:
10
1-10 of 10
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-data-table
 component.
#
CRUD Actions
v-data-table
 with CRUD actions using a 
v-dialog
 component for editing each row
My CRUD
 New Item 
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Actions
Frozen Yogurt
159
6
24
4
Ice cream sandwich
237
9
37
4.3
Eclair
262
16
23
6
Cupcake
305
3.7
67
4.3
Gingerbread
356
16
49
3.9
Jelly bean
375
0
94
0
Lollipop
392
0.2
98
0
Honeycomb
408
3.2
87
6.5
Donut
452
25
51
4.9
KitKat
518
26
65
7
Items per page:
10
1-10 of 10
#
Expandable rows
The 
show-expand
 prop will render an expand icon on each row. You can customize this with the 
item.data-table-expand
 slot. The position of this slot can be changed by adding a column with 
key: 'data-table-expand'
 to the headers array.
Just like selection, row items require a unique property on each item for expansion to work. The default is 
id
, but you can use the 
item-value
 prop to specify a different item property.
Expandable Table
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
159
6
24
4
1
Ice cream sandwich
237
9
37
4.3
1
Eclair
262
16
23
6
7
Cupcake
305
3.7
67
4.3
8
Gingerbread
356
16
49
3.9
16
Jelly bean
375
0
94
0
0
Lollipop
392
0.2
98
0
2
Honeycomb
408
3.2
87
6.5
45
Donut
452
25
51
4.9
22
KitKat
518
26
65
7
6
Items per page:
10
1-10 of 10
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Pagination
Components
Tables
Components
Lists
Components
Introduction
Data and Display
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/data-tables/data-and-display/#filtering-examples:














Data table - Data and Display ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Filtering examples
Search
Filterable
Custom filter
Pagination examples
External pagination
Selection examples
Item value
Selected values
Selectable rows
Custom select column
Select strategies
Sorting examples
Basic sorting
Multi sort
Sort by raw
Sponsors
Support
#
Data and Display
Data table filtering is a key feature that allows users to quickly find the data they are looking for.
ads via vuetify
#
Filtering examples
These examples demonstrate various ways that you can utilize the 
search
 prop to filter results.
#
Search
The data table exposes a 
search
 prop that allows you to filter your data.
Nutrition
Search
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
159
6
24
4
1
Ice cream sandwich
237
9
37
4.3
1
Eclair
262
16
23
6
7
Cupcake
305
3.7
67
4.3
8
Gingerbread
356
16
49
3.9
16
Jelly bean
375
0
94
0
0
Lollipop
392
0.2
98
0
2
Honeycomb
408
3.2
87
6.5
45
Donut
452
25
51
4.9
22
KitKat
518
26
65
7
6
Items per page:
10
1-10 of 10
#
Filterable
You can easily disable specific columns from being included when searching through table rows by setting the property 
filterable
 to false on the header item(s). In the example below the dessert name column is no longer searchable.
 ¬† Find a Graphics Card 
Search
Name
Image
Price
Rating
Stock
Nebula GTX 3080
699.99
Rating 0 of 5
Rating 1 of 5
Rating 2 of 5
Rating 3 of 5
Rating 4 of 5
Rating 5 of 5
In stock
Galaxy RTX 3080
799.99
Rating 0 of 5
Rating 1 of 5
Rating 2 of 5
Rating 3 of 5
Rating 4 of 5
Rating 5 of 5
Out of stock
Orion RX 6800 XT
649.99
Rating 0 of 5
Rating 1 of 5
Rating 2 of 5
Rating 3 of 5
Rating 4 of 5
Rating 5 of 5
In stock
Vortex RTX 3090
1499.99
Rating 0 of 5
Rating 1 of 5
Rating 2 of 5
Rating 3 of 5
Rating 4 of 5
Rating 5 of 5
In stock
Cosmos GTX 1660 Super
299.99
Rating 0 of 5
Rating 1 of 5
Rating 2 of 5
Rating 3 of 5
Rating 4 of 5
Rating 5 of 5
Out of stock
Items per page:
10
1-5 of 5
#
Custom filter
You can override the default filtering used with the 
search
 prop by supplying a function to the 
custom-filter
 prop. You can see the signature of the function below.
(
value
:
 
string
,
 query
:
 
string
,
 item
?
:
 
any
)
 
=>
 
boolean
 
|
 
number
 
|
 
[
number
,
 
number
]
 
|
 
[
number
,
 
number
]
[
]


In the example below, the custom filter will only match inputs that are in completely in upper case.
Search (UPPER CASE ONLY)
Search (UPPER CASE ONLY)
CPU Model
Cores
Threads
Base Clock
Boost Clock
TDP (W)
Intel Core i9-11900K
8
16
3.5 GHz
5.3 GHz
125W
AMD Ryzen 9 5950X
16
32
3.4 GHz
4.9 GHz
105W
Intel Core i7-10700K
8
16
3.8 GHz
5.1 GHz
125W
AMD Ryzen 5 5600X
6
12
3.7 GHz
4.6 GHz
65W
Intel Core i5-10600K
6
12
4.1 GHz
4.8 GHz
125W
AMD Ryzen 7 5800X
8
16
3.8 GHz
4.7 GHz
105W
Intel Core i3-10100
4
8
3.6 GHz
4.3 GHz
65W
AMD Ryzen 3 3300X
4
8
3.8 GHz
4.3 GHz
65W
Intel Pentium Gold G6400
2
4
4.0 GHz
58W
AMD Athlon 3000G
2
4
3.5 GHz
35W
Items per page:
10
1-10 of 10
#
Pagination examples
Pagination is used to split up large amounts of data into smaller chunks.
#
External pagination
Pagination can be controlled externally by using the individual props, or by using the 
options
 prop. Remember that you must apply the 
.sync
 modifier.
Items per page
Items per page
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
159
6
24
4
1
Ice cream sandwich
237
9
37
4.3
1
Eclair
262
16
23
6
7
Cupcake
305
3.7
67
4.3
8
Gingerbread
356
16
49
3.9
16
1
2
#
Selection examples
Selection allows you to select/deselect rows and retrieve information about which rows have been selected.
#
Item value
For the selection feature to work, the data table must be able to differentiate each row in the data set. This is done using the 
item-value
 prop. It designates a property on the item that should contain a unique value. By default the property it looks for is 
id
.
You can also supply a function, if for example the unique value needs to be a composite of several properties. The function receives each item as its first argument.
Operating System
Version
Windows
3.11
Windows
95
Windows
98
Windows
2000
Windows
XP
Items per page:
5
1-5 of 10
#
Selected values
The current selection of the data-table can be accessed through the 
v-model
 prop. The array will consist of the unique values found in the property you set using the 
item-value
 prop (or the value returned by the function you passed). You can use 
return-object
 prop if you want the array to consist of the actual objects instead.
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
159
6
24
4
1
Ice cream sandwich
237
9
37
4.3
1
Eclair
262
16
23
6
7
Cupcake
305
3.7
67
4.3
8
Gingerbread
356
16
49
3.9
16
Items per page:
5
1-5 of 10
[]
ads via vuetify
#
Selectable rows
Use the 
item-selectable
 prop to designate a property on your items that controls if the item should be selectable or not.
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
159
6
24
4
1
Ice cream sandwich
237
9
37
4.3
1
Eclair
262
16
23
6
7
Cupcake
305
3.7
67
4.3
8
Gingerbread
356
16
49
3.9
16
Items per page:
5
1-5 of 10
#
Custom select column
Use the 
item.data-table-select
 slot alongside 
v-checkbox-btn
 to customize the checkbox used for row selection. You can also use the 
header.data-table-select
 slot to customize the select-all checkbox in the header of the column.
Name
Calories
Fat
Carbs
Protein
Iron
Frozen Yogurt
159
6
24
4
1
Ice cream sandwich
237
9
37
4.3
1
Eclair
262
16
23
6
7
Cupcake
305
3.7
67
4.3
8
Gingerbread
356
16
49
3.9
16
Jelly bean
375
0
94
0
0
Lollipop
392
0.2
98
0
2
Honeycomb
408
3.2
87
6.5
45
Donut
452
25
51
4.9
22
KitKat
518
26
65
7
6
Items per page:
10
1-10 of 10
#
Select strategies
Data-tables support three different select strategies.
Strategy
Description
'single'
Only a single row can be selected. The select all checkbox in the header is not shown
'page'
Multiple rows can be selected. Clicking on the select all checkbox in the header selects all (selectable) rows on the current page
'all'
Multiple rows can be selected. Clicking on the select all checkbox in the header selects all (selectable) rows in the entire data set
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
159
6
24
4
1
Ice cream sandwich
237
9
37
4.3
1
Eclair
262
16
23
6
7
Cupcake
305
3.7
67
4.3
8
Gingerbread
356
16
49
3.9
16
Jelly bean
375
0
94
0
0
Lollipop
392
0.2
98
0
2
Honeycomb
408
3.2
87
6.5
45
Donut
452
25
51
4.9
22
KitKat
518
26
65
7
6
Items per page:
10
1-10 of 10
#
Sorting examples
Data tables can sort rows by a column value.
ads via vuetify
#
Basic sorting
The sorting of your table can be controlled by the 
sort-by
 prop. This prop takes an array of objects, where each object has a 
key
 and 
order
 property, describing how the table is to be sorted.
The 
key
 corresponds to a column defined in the 
headers
 array, and 
order
 is either the string 
'asc'
 or 
'desc'
 indicating the order in which the items are sorted.
Unless you are using the 
multi-sort
 prop seen below, this array will almost always just have a single object in it.
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
200
6
24
4
1%
Ice cream sandwich
200
9
37
4.3
1%
Eclair
300
16
23
6
7%
Cupcake
300
3.7
67
4.3
8%
Gingerbread
400
16
49
3.9
16%
Jelly bean
400
0
94
0
0%
Lollipop
400
0.2
98
0
2%
Honeycomb
400
3.2
87
6.5
45%
Donut
500
25
51
4.9
22%
KitKat
500
26
65
7
6%
Items per page:
10
1-10 of 10
[
  {
    "key": "calories",
    "order": "asc"
  }
]
#
Multi sort
Using the 
multi-sort
 prop will enable you to sort on multiple columns at the same time.
Dessert (100g serving)
Calories
1
Fat (g)
2
Carbs (g)
Protein (g)
Iron (%)
Ice cream sandwich
200
9
37
4.3
1
Frozen Yogurt
200
6
24
4
1
Eclair
300
16
23
6
7
Cupcake
300
3.7
67
4.3
8
Gingerbread
400
16
49
3.9
16
Honeycomb
400
3.2
87
6.5
45
Lollipop
400
0.2
98
0
2
Jelly bean
400
0
94
0
0
KitKat
500
26
65
7
6
Donut
500
25
51
4.9
22
Items per page:
10
1-10 of 10
#
Sort by raw
This feature was introduced in 
v3.5.0 (Polaris)
Using a 
sortRaw
 key in your headers object gives you access to all values on the item. This is useful if you want to sort by a value that is not displayed in the table or a combination of multiple values.
Name
Location
Constructed
Description
Great Pyramid of Giza
Egypt
2584-2561 BC
The oldest and largest of the three pyramids in the Giza pyramid complex.
Hanging Gardens of Babylon
Iraq
600 BC
An ascending series of tiered gardens, said to have been built in ancient Babylon.
Statue of Zeus at Olympia
Greece
435 BC
A giant seated figure of Zeus, made by the sculptor Phidias.
Temple of Artemis at Ephesus
Turkey
550 BC
A large temple dedicated to the goddess Artemis, one of the Seven Wonders of the Ancient World.
Mausoleum at Halicarnassus
Turkey
351 BC
A tomb built for Mausolus, a satrap of the Persian Empire.
Colossus of Rhodes
Greece
292-280 BC
A statue of the Greek sun-god Helios, erected in the city of Rhodes.
Lighthouse of Alexandria
Egypt
280 BC
A lighthouse built by the Ptolemaic Kingdom on the island of Pharos.
Great Wall of China
China
7th century BC - 1644 AD
A series of fortifications made of stone, brick, and other materials.
Petra
Jordan
312 BC
A historical city known for its rock-cut architecture and water conduit system.
Taj Mahal
India
1632-1653 AD
An ivory-white marble mausoleum on the south bank of the Yamuna river.
Items per page:
10
1-10 of 25
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Basics
Components
Pagination
Components
Tables
Components
Basics
Server side tables
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/data-tables/server-side-tables/#examples:














Data table - Server side tables ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
API
Examples
Server-side paginate and sort
Server-side search
Loading
Sponsors
Support
#
Data table - Server side tables
Server-side Data tables are used for showing data coming from an API.
ads via vuetify
#
API
Component
Description
v-data-table-server
Primary Component
Toggle Inline API
#
Examples
#
Server-side paginate and sort
To use data from an API, listen to the 
@update:options
 event to know when to fetch new data. Use the 
loading
 prop to display a progress bar while fetching the data.
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
159
6
24
4
1
Jelly bean
375
0
94
0
0
KitKat
518
26
65
7
6
Eclair
262
16
23
6
7
Gingerbread
356
16
49
3.9
16
Items per page:
5
1-5 of 10
#
Server-side search
If you need to support search functionality, use the 
search
 prop to let the table know when new search input is available. Since the table does not actually do any filtering on its own, the 
search
 input does not need to be the actual value being searched for. In this example we have multiple values searchable, so we just make sure to set 
search
 to 
anything
 when we need to fetch new data.
Dessert (100g serving)
Calories
Fat (g)
Carbs (g)
Protein (g)
Iron (%)
Frozen Yogurt
159
6
24
4
1
Jelly bean
375
0
94
0
0
KitKat
518
26
65
7
6
Eclair
262
16
23
6
7
Gingerbread
356
16
49
3.9
16
Items per page:
5
1-5 of 10
#
Loading
You can use the 
loading
 prop to indicate that data in the table is currently loading. If there is no data in the table, a loading message will also be displayed. This message can be customized using the 
loading-text
 prop or the 
loading
 slot.
Loading... Please wait
Items per page:
10
0-0 of 0
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Basics
Components
Virtual tables
Components
Tables
Components
Data and Display
Virtual tables
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/data-tables/virtual-tables/:














Data table - Virtual tables ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
API
Examples
Basic example
Sponsors
Support
#
Data table - Virtual tables
The v-data-table-virtual component relies on all data being available locally. But unlike the standard data-table it uses virtualization to only render a small portion of the rows. This makes it well suited for displaying large data sets. It supports sorting and filtering, but not pagination.
ads via vuetify
#
API
Component
Description
v-data-table-virtual
Primary Component
Toggle Inline API
#
Examples
#
Basic example
Boat Type
Speed (knots)
Length (m)
Price ($)
Year
Speedster #0
35
22
300000
2021
OceanMaster #1
25
35
500000
2020
Voyager #2
20
45
700000
2019
WaveRunner #3
40
19
250000
2022
SeaBreeze #4
28
31
450000
2018
HarborGuard #5
18
50
800000
2017
SlickFin #6
33
24
350000
2021
StormBreaker #7
22
38
600000
2020
WindSail #8
15
55
900000
2019
FastTide #9
37
20
280000
2022
Speedster #10
35
22
300000
2021
OceanMaster #11
25
35
500000
2020
Voyager #12
20
45
700000
2019
WaveRunner #13
40
19
250000
2022
SeaBreeze #14
28
31
450000
2018
HarborGuard #15
18
50
800000
2017
SlickFin #16
33
24
350000
2021
StormBreaker #17
22
38
600000
2020
WindSail #18
15
55
900000
2019
FastTide #19
37
20
280000
2022
Speedster #20
35
22
300000
2021
OceanMaster #21
25
35
500000
2020
Voyager #22
20
45
700000
2019
WaveRunner #23
40
19
250000
2022
SeaBreeze #24
28
31
450000
2018
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Basics
Components
Server side tables
Components
Tables
Components
Server side tables
Sparklines
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/sparklines/#usage:














Sparklines ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Fill
Misc
Custom labels
Dashboard card
Heart rate
Sponsors
Support
#
Sparklines
The sparkline component can be used to create simple graphs, like GitHub‚Äôs contribution chart.
Report a Bug
Open issues
View on GitHub
This feature was introduced in 
v3.6.0
#
Usage
A sparkline is a tiny chart that provides a visual representation of data. The sparkline component comes in 2 variations, 
trend
 (default) and 
bar
. Each supports a multitude of options for customizing the look and feel of the sparkline.
ads via vuetify
#
API
Component
Description
v-sparkline
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Fill
You can create a 
v-sparkline
 with fill using the 
fill
 property.
 Filled 
 Line width 
2.0
 Smooth 
 Padding 
8.0
#
Misc
#
Custom labels
By providing a 
label
 slot, we are able to modify the displayed content by adding a dollar sign ($). This slot is 
exclusively
 for text content. For more information on the svg 
<text>
 element, 
navigate here
.
 $423
 $446
 $675
 $510
 $590
 $610
 $760
 Sales Last 24h 
 Go to Report 
#
Dashboard card
The 
v-sparkline
 component pairs nicely with 
v-card
 and 
v-sheet
 to create customized information cards, perfect for admin dashboards. Here we use custom labels to provide additional context for the sparkline.
12am
3am
6am
9am
12pm
3pm
6pm
9pm
 User Registrations 
 Last Campaign Performance 
last registration 26 minutes ago
#
Heart rate
For concise information, a complete chart might be overkill. Using a trend line with gradient provides enough detail for the user without showing too much information.
 Heart rate 
102
BPM
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Cards
Components
Sheets
Components
Expansion panels
Components
Virtual tables
Infinite scrollers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/infinite-scroller/#usage:














Infinite scroller component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
Mode
Direction
Side
Color
Slots
Loading
Load more
Empty
Error
Examples
Virtualized infinite scroller
Sponsors
Support
#
Infinite scrollers
The 
v-infinite-scroll
 component displays a potentially infinite list, by loading more items of the list when scrolling. It supports either vertical or horizontal scrolling.
Report a Bug
Open issues
View on GitHub
This feature was introduced in 
v3.4.0 (Blackguard)
#
Usage
When scrolling towards the bottom, new items will be rendered either automatically, or manually with the click of a button.
 Default 
 Item number 1
 Item number 2
 Item number 3
 Item number 4
 Item number 5
 Item number 6
 Item number 7
 Item number 8
 Item number 9
 Item number 10
 Item number 11
 Item number 12
 Item number 13
 Item number 14
 Item number 15
 Item number 16
 Item number 17
 Item number 18
 Item number 19
 Item number 20
 Item number 21
 Item number 22
 Item number 23
 Item number 24
 Item number 25
 Item number 26
 Item number 27
 Item number 28
 Item number 29
 Item number 30
¬†
<
v-infinite-scroll
 
:height
=
"
300
"
 
:items
=
"
items
"
 
:onLoad
=
"
load
"
>


<
template
 
v-for
=
"
(item, index) in items
"
 
:key
=
"
item
"
>


<
div
 
:class
=
"
['pa-2', index % 2 === 0 ? 'bg-grey-lighten-2' : '']
"
>

      Item number #{{ item }}
    
</
div
>


</
template
>


</
v-infinite-scroll
>
<
script setup
>


import
 
{
 ref 
}
 
from
 
'vue'


const
 items 
=
 
ref
(
Array
.
from
(
{
 
length
:
 
30
 
}
,
 
(
k
,
 v
)
 
=>
 v 
+
 
1
)
)


async
 
function
 
api
 
(
)
 
{


return
 
new
 
Promise
(
resolve
 
=>
 
{


setTimeout
(
(
)
 
=>
 
{


resolve
(
Array
.
from
(
{
 
length
:
 
10
 
}
,
 
(
k
,
 v
)
 
=>
 v 
+
 items
.
value
.
at
(
-
1
)
 
+
 
1
)
)


}
,
 
1000
)


}
)


}


async
 
function
 
load
 
(
{
 done 
}
)
 
{


// Perform API call


const
 res 
=
 
await
 
api
(
)


    items
.
value
.
push
(
...
res
)


done
(
'ok'
)


}


<
/
script
>
A 
load
 event will be emitted when the component needs to load more content. The argument passed is an object with two properties.
side
 tells you on which side new content should be added, either at the 
'start'
 or 
'end'
. The return value of the function is a string that describes if the new content was loaded successfully or not.
done
 is a callback function that should be called when the loading of new content is done. It takes a single parameter 
status
 that describes if the load was successful or not. See the table below for the possible values.
Status
Description
'ok'
Content was added succesfully
'error'
Something went wrong when adding content. This will display the 
error
 slot
'empty'
There is no more content to fetch. This will display the 
empty
 slot
'loading'
Content is currently loading. This will display a message that the content is loading. This status is only set internally by the component and should not be used with the 
done
 function
ads via vuetify
#
API
Component
Description
v-infinite-scroll
Primary Component
Toggle Inline API
#
Anatomy
The 
v-infinite-scroll
 works with any content in its default slot.
Element / Area
Description
1. Container
The infinite scroller content container
2. Loader
The loader content area
#
Guide
The 
v-infinite-scroll
 component is a container that allows you to react to a user reaching the end of the content area. It is useful when you need to display an unknown but large number of items, and you don‚Äôt want to load them all at once.
#
Props
The 
v-infinite-scroll
 component has several props that can be used to customize its behavior.
#
Mode
The default behavior of the component is to try to load more content automatically when the scrollbar gets close to the end. However, a manual mode is also supported, where the user needs to do some interaction to load the content. By default this is a button, but it can be customized with a 
slot
 Item number 1
 Item number 2
 Item number 3
 Item number 4
 Item number 5
 Item number 6
 Item number 7
 Item number 8
 Item number 9
 Item number 10
 Item number 11
 Item number 12
 Item number 13
 Item number 14
 Item number 15
 Item number 16
 Item number 17
 Item number 18
 Item number 19
 Item number 20
 Item number 21
 Item number 22
 Item number 23
 Item number 24
 Item number 25
 Item number 26
 Item number 27
 Item number 28
 Item number 29
 Item number 30
 Item number 31
 Item number 32
 Item number 33
 Item number 34
 Item number 35
 Item number 36
 Item number 37
 Item number 38
 Item number 39
 Item number 40
 Item number 41
 Item number 42
 Item number 43
 Item number 44
 Item number 45
 Item number 46
 Item number 47
 Item number 48
 Item number 49
 Item number 50
Load more
#
Direction
The 
v-infinite-scroll
 component can be used with either vertical or horizontal scrolling.
 Item #1
 Item #2
 Item #3
 Item #4
 Item #5
 Item #6
 Item #7
 Item #8
 Item #9
 Item #10
 Item #11
 Item #12
 Item #13
 Item #14
 Item #15
 Item #16
 Item #17
 Item #18
 Item #19
 Item #20
 Item #21
 Item #22
 Item #23
 Item #24
 Item #25
 Item #26
 Item #27
 Item #28
 Item #29
 Item #30
 Item #31
 Item #32
 Item #33
 Item #34
 Item #35
 Item #36
 Item #37
 Item #38
 Item #39
 Item #40
 Item #41
 Item #42
 Item #43
 Item #44
 Item #45
 Item #46
 Item #47
 Item #48
 Item #49
 Item #50
¬†
#
Side
By default, the 
v-infinite-scroll
 component assumes that new content will appear at the end of existing content. But it also supports content being added to the start and appearing both at the beginning and the end.
When using the 
start
 side for content, the scrollbar will start at the bottom of the content.
¬†
 Item number 1
 Item number 2
 Item number 3
 Item number 4
 Item number 5
 Item number 6
 Item number 7
 Item number 8
 Item number 9
 Item number 10
 Item number 11
 Item number 12
 Item number 13
 Item number 14
 Item number 15
 Item number 16
 Item number 17
 Item number 18
 Item number 19
 Item number 20
 Item number 21
 Item number 22
 Item number 23
 Item number 24
 Item number 25
 Item number 26
 Item number 27
 Item number 28
 Item number 29
 Item number 30
 Item number 31
 Item number 32
 Item number 33
 Item number 34
 Item number 35
 Item number 36
 Item number 37
 Item number 38
 Item number 39
 Item number 40
 Item number 41
 Item number 42
 Item number 43
 Item number 44
 Item number 45
 Item number 46
 Item number 47
 Item number 48
 Item number 49
 Item number 50
When using 
both
 sides for content, the scrollbar will start in the middle of the content.
¬†
 Item number 1
 Item number 2
 Item number 3
 Item number 4
 Item number 5
 Item number 6
 Item number 7
 Item number 8
 Item number 9
 Item number 10
 Item number 11
 Item number 12
 Item number 13
 Item number 14
 Item number 15
 Item number 16
 Item number 17
 Item number 18
 Item number 19
 Item number 20
 Item number 21
 Item number 22
 Item number 23
 Item number 24
 Item number 25
 Item number 26
 Item number 27
 Item number 28
 Item number 29
 Item number 30
 Item number 31
 Item number 32
 Item number 33
 Item number 34
 Item number 35
 Item number 36
 Item number 37
 Item number 38
 Item number 39
 Item number 40
 Item number 41
 Item number 42
 Item number 43
 Item number 44
 Item number 45
 Item number 46
 Item number 47
 Item number 48
 Item number 49
 Item number 50
¬†
#
Color
The default load more button and loading spinner can be colored with the 
color
 prop.
 Item #1
 Item #2
 Item #3
 Item #4
 Item #5
 Item #6
 Item #7
 Item #8
 Item #9
 Item #10
 Item #11
 Item #12
 Item #13
 Item #14
 Item #15
 Item #16
 Item #17
 Item #18
 Item #19
 Item #20
 Item #21
 Item #22
 Item #23
 Item #24
 Item #25
 Item #26
 Item #27
 Item #28
 Item #29
 Item #30
 Item #31
 Item #32
 Item #33
 Item #34
 Item #35
 Item #36
 Item #37
 Item #38
 Item #39
 Item #40
 Item #41
 Item #42
 Item #43
 Item #44
 Item #45
 Item #46
 Item #47
 Item #48
 Item #49
 Item #50
Load more
#
Slots
The 
v-infinite-scroll
 component exposes several slots that allow you to further customize its behaviour.
Element / Area
Description
1. Container
The default slot
2. Load-more
The slot shown when the mode is set to 
manual
 and the status is not 
loading
3. Loading
The slot is shown when the mode is set to 
manual
 and status is 
loading
4. Empty
The slot shown when the status is 
empty
5. Error
The slot is shown when the status is 
error
#
Loading
You can customize the loading message with the 
loading
 slot.
 Item #1
 Item #2
 Item #3
 Item #4
 Item #5
 Item #6
 Item #7
 Item #8
 Item #9
 Item #10
 Item #11
 Item #12
 Item #13
 Item #14
 Item #15
 Item #16
 Item #17
 Item #18
 Item #19
 Item #20
 Item #21
 Item #22
 Item #23
 Item #24
 Item #25
 Item #26
 Item #27
 Item #28
 Item #29
 Item #30
 Item #31
 Item #32
 Item #33
 Item #34
 Item #35
 Item #36
 Item #37
 Item #38
 Item #39
 Item #40
 Item #41
 Item #42
 Item #43
 Item #44
 Item #45
 Item #46
 Item #47
 Item #48
 Item #49
 Item #50
¬†
 This is taking a very long time... 
#
Load more
When using 
manual
 mode you can customize the action required to load more content with the 
load-more
 slot.
 Item #1
 Item #2
 Item #3
 Item #4
 Item #5
 Item #6
 Item #7
 Item #8
 Item #9
 Item #10
 Item #11
 Item #12
 Item #13
 Item #14
 Item #15
 Item #16
 Item #17
 Item #18
 Item #19
 Item #20
 Item #21
 Item #22
 Item #23
 Item #24
 Item #25
 Item #26
 Item #27
 Item #28
 Item #29
 Item #30
 Item #31
 Item #32
 Item #33
 Item #34
 Item #35
 Item #36
 Item #37
 Item #38
 Item #39
 Item #40
 Item #41
 Item #42
 Item #43
 Item #44
 Item #45
 Item #46
 Item #47
 Item #48
 Item #49
 Item #50
#
Empty
You can customize the empty message with the 
empty
 slot.
 Item #1
 Item #2
 Item #3
 Item #4
 Item #5
 Item #6
 Item #7
 Item #8
 Item #9
 Item #10
 Item #11
 Item #12
 Item #13
 Item #14
 Item #15
 Item #16
 Item #17
 Item #18
 Item #19
 Item #20
 Item #21
 Item #22
 Item #23
 Item #24
 Item #25
 Item #26
 Item #27
 Item #28
 Item #29
 Item #30
 Item #31
 Item #32
 Item #33
 Item #34
 Item #35
 Item #36
 Item #37
 Item #38
 Item #39
 Item #40
 Item #41
 Item #42
 Item #43
 Item #44
 Item #45
 Item #46
 Item #47
 Item #48
 Item #49
 Item #50
¬†
#
Error
The 
error
 slot is shown if the status 
'error'
 is returned from the 
done
 callback.
 Item #1
 Item #2
 Item #3
 Item #4
 Item #5
 Item #6
 Item #7
 Item #8
 Item #9
 Item #10
 Item #11
 Item #12
 Item #13
 Item #14
 Item #15
 Item #16
 Item #17
 Item #18
 Item #19
 Item #20
 Item #21
 Item #22
 Item #23
 Item #24
 Item #25
 Item #26
 Item #27
 Item #28
 Item #29
 Item #30
 Item #31
 Item #32
 Item #33
 Item #34
 Item #35
 Item #36
 Item #37
 Item #38
 Item #39
 Item #40
 Item #41
 Item #42
 Item #43
 Item #44
 Item #45
 Item #46
 Item #47
 Item #48
 Item #49
 Item #50
¬†
#
Examples
The following is a collection of examples that demonstrate more advanced and real-world use of the 
v-infinite-scroll
 component.
#
Virtualized infinite scroller
If the items in your infinite list are of a uniform size, you can quite easily virtualize the list to only render a small number of items regardless of how far you scroll in either direction.
¬†
1
2
3
4
5
6
7
8
9
10
11
12
¬†
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Lists
Components
Basics
Components
Data iterators
Components
Sparklines
Tables
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/tables/#usage:














Table ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Theme
Density
Height
Fixed header
Sponsors
Support
#
Tables
The simpler of the table components is 
v-table
, a basic wrapper component for the HTML 
<table>
 element. In addition, regular table elements such as 
<thead>
, 
<tbody>
, 
<tr>
, and 
<td>
 work by default.
More advanced tables such as 
v-data-table
 are available.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
 Name 
 Calories 
Frozen Yogurt
159
Ice cream sandwich
237
Eclair
262
Cupcake
305
Gingerbread
356
Jelly bean
375
Lollipop
392
Honeycomb
408
Donut
452
KitKat
518
ads via vuetify
#
API
Component
Description
v-table
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Theme
Use 
theme
 prop to switch table to another theme.
 Name 
 Calories 
Frozen Yogurt
159
Ice cream sandwich
237
Eclair
262
Cupcake
305
Gingerbread
356
Jelly bean
375
Lollipop
392
Honeycomb
408
Donut
452
KitKat
518
#
Density
You can show a dense version of the table by using the 
density
 prop.
 Name 
 Calories 
Frozen Yogurt
159
Ice cream sandwich
237
Eclair
262
Cupcake
305
Gingerbread
356
Jelly bean
375
Lollipop
392
Honeycomb
408
Donut
452
KitKat
518
#
Height
Use the 
height
 prop to set the height of the table.
 Name 
 Calories 
Frozen Yogurt
159
Ice cream sandwich
237
Eclair
262
Cupcake
305
Gingerbread
356
Jelly bean
375
Lollipop
392
Honeycomb
408
Donut
452
KitKat
518
#
Fixed header
Use the 
fixed-header
 prop together with the 
height
 prop to fix the header to the top of the table.
 Name 
 Calories 
Frozen Yogurt
159
Ice cream sandwich
237
Eclair
262
Cupcake
305
Gingerbread
356
Jelly bean
375
Lollipop
392
Honeycomb
408
Donut
452
KitKat
518
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Basics
Components
Lists
Components
Infinite scrollers
Virtual scrollers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/virtual-scroller/#usage:














Virtual scroll component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
Height
Item Height
Examples
User Directory
Sponsors
Support
#
Virtual scrollers
The 
v-virtual-scroll
 component displays a virtual, 
infinite
 list. It supports dynamic height and scrolling vertically and is a good alternative to pagination.
Report a Bug
Open issues
View on GitHub
This feature was introduced in 
v3.2.0 (Orion)
#
Usage
The virtual scroller displays just enough records to fill the viewport and uses the existing component, rehydrating it with new data.
 Default 
 Item 1
 Item 2
 Item 3
 Item 4
 Item 5
 Item 6
 Item 7
 Item 8
 Item 9
 Item 10
 Item 11
 Item 12
 Item 13
 Item 14
 Item 15
 Item 16
 Item 17
 Item 18
 Item 19
<
v-virtual-scroll


:height
=
"
300
"


:items
=
"
['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']
"


>


<
template
 
v-slot:
default
=
"
{ item }
"
>

    Item {{ item }}
  
</
template
>


</
v-virtual-scroll
>
ads via vuetify
#
API
Component
Description
v-virtual-scroll
Primary Component
Toggle Inline API
#
Anatomy
The 
v-virtual-scroll
 component contains only a default slot with no styling options. It is typically used with large collections of 
v-list-item
s.
Element / Area
Description
1. Container
The rendered content area from the provided 
items
 prop
#
Guide
The 
v-virtual-scroll
 allows you to display thousands of records on a single page without the performance hit of actually showing all of them at once. 
v-virtual-scroll
 is devoid of styling and pairs well with components such as 
v-card
 to provide a better visual experience.
#
Props
The 
v-virtual-scroll
 component has a small API mainly used to configure the root and item height.
#
Height
The 
v-virtual-scroll
 component does not have any initial height set on itself.
The following code snippet uses the 
height
 prop:
 Virtual Item 1
 Virtual Item 2
 Virtual Item 3
 Virtual Item 4
 Virtual Item 5
 Virtual Item 6
 Virtual Item 7
 Virtual Item 8
 Virtual Item 9
 Virtual Item 10
 Virtual Item 11
 Virtual Item 12
 Virtual Item 13
Another way of making sure that the component has height is to place it inside an element with 
display: flex
.
 Virtual Item 1
 Virtual Item 2
 Virtual Item 3
 Virtual Item 4
 Virtual Item 5
 Virtual Item 6
 Virtual Item 7
 Virtual Item 8
 Virtual Item 9
 Virtual Item 10
 Virtual Item 11
 Virtual Item 12
 Virtual Item 13
 Virtual Item 14
 Virtual Item 15
 Virtual Item 16
 Virtual Item 17
 Virtual Item 18
 Virtual Item 19
 Virtual Item 20
 Virtual Item 21
 Virtual Item 22
 Virtual Item 23
 Virtual Item 24
 Virtual Item 25
 Virtual Item 26
 Virtual Item 27
 Virtual Item 28
 Virtual Item 29
 Virtual Item 30
 Virtual Item 31
 Virtual Item 32
 Virtual Item 33
 Virtual Item 34
 Virtual Item 35
 Virtual Item 36
 Virtual Item 37
 Virtual Item 38
 Virtual Item 39
 Virtual Item 40
 Virtual Item 41
 Virtual Item 42
 Virtual Item 43
 Virtual Item 44
 Virtual Item 45
 Virtual Item 46
 Virtual Item 47
 Virtual Item 48
 Virtual Item 49
 Virtual Item 50
 Virtual Item 51
 Virtual Item 52
 Virtual Item 53
 Virtual Item 54
 Virtual Item 55
#
Item Height
For lists where the item height is static and uniform for all items, it‚Äôs recommended that you define a specific 
item-height
. This value is used for 
v-virtual-scroll
‚Äôs calculations.
 Company Employee List 
Employee Name
Badge #1
Employee Name
Badge #2
Employee Name
Badge #3
Employee Name
Badge #4
Employee Name
Badge #5
Employee Name
Badge #6
Employee Name
Badge #7
If your items are not of a uniform size, omit the 
item-height
 prop to have 
v-virtual-scroll
 dynamically calculate each item.
 Dynamic item 1
 Dynamic item 2
 Dynamic item 3
 Dynamic item 4
 Dynamic item 5
 Dynamic item 6
 Dynamic item 7
 Dynamic item 8
 Dynamic item 9
 Dynamic item 10
 Dynamic item 11
 Dynamic item 12
 Dynamic item 13
 Dynamic item 14
 Dynamic item 15
 Dynamic item 16
 Dynamic item 17
 Dynamic item 18
 Dynamic item 19
 Dynamic item 20
 Dynamic item 21
 Dynamic item 22
 Dynamic item 23
 Dynamic item 24
 Dynamic item 25
#
Examples
The following is a collection of 
v-virtual-scroll
 examples that demonstrate how different the properties work in an application.
#
User Directory
The v-virtual-scroll component can render an large amount of items by rendering only what it needs to fill the scroller‚Äôs viewport.
 User Directory 
 Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quasi nobis a at voluptates culpa optio amet! Inventore deserunt voluptatem maxime a veniam placeat, eos impedit nulla quos? Officiis, aperiam ducimus. 
J B
James Brown
 View User 
J G
Jacob Green
 View User 
P L
Patricia Lee
 View User 
B J
Bethany Jones
 View User 
O L
Oscar Lopez
 View User 
S H
Samantha Harris
 View User 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Lists
Components
Virtual tables
Components
Combobox
Components
Tables
Grids
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/grids/#usage:














Grid system ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Sub-components
v-container
v-col
v-row
v-spacer
Helper Classes
Caveats
Examples
Props
Align
Breakpoint sizing
Justify
No gutters
Offset
Offset breakpoint
Order
Order first and last
Misc
Column wrapping
Equal width columns
Grow and Shrink
Margin helpers
Nested grid
One column width
Row and column breakpoints
Spacers
Sponsors
Support
#
Grid system
Vuetify comes with a 12 point grid system built using flexbox.
The grid is used to create specific layouts within an application‚Äôs content. It contains 5 types of media breakpoints that are used for targeting specific screen sizes or orientations: 
xs
, 
sm
, 
md
, 
lg
 and 
xl
. These breakpoints are defined below in the Viewport Breakpoints table and can be modified by customizing the 
Breakpoint service
.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
The Vuetify grid is heavily inspired by the 
Bootstrap grid
. It is implemented by using a series of containers, rows, and columns to layout and align content. If you are new to flexbox, read the 
CSS Tricks flexbox guide
 for background, terminology, guidelines, and code snippets.
 One of three columns 
 One of three columns 
 One of three columns 
Device
Code
Type
Range
Extra small
xs
Small to large phone
< 600px
Small
sm
Small to medium tablet
600px > < 960px
Medium
md
Large tablet to laptop
960px > < 1280px
Large
lg
Laptop to desktop
1280px > < 1920px
Extra large
xl
1080p to 1440p desktop
1920px > < 2560px
Extra extra large
xxl
4k and ultra-wide
> 2560px
 Specification
ads via vuetify
#
API
Component
Description
v-container
The container component.
v-row
Sub-component used to create rows.
v-col
Sub-component used to create columns.
v-spacer
A component often used in grid scenarios.
Toggle Inline API
#
Sub-components
#
v-container
v-container
 provides the ability to center and horizontally pad your site‚Äôs contents. You can also use the 
fluid
 prop to fully extend the container across all viewport and device sizes. Maintains previous 1.x functionality in which props are passed through as classes on 
v-container
 allowing for the application of helper classes (such as 
ma-#
/
pa-#
/
fill-height
) to easily be applied.
#
v-col
v-col
 is a content holder that must be a direct child of 
v-row
. This is the 2.x replacement for 
v-flex
 in 1.x.
#
v-row
v-row
 is a wrapper component for 
v-col
. It utilizes flex properties to control the layout and flow of its inner columns. It uses a standard gutter of 
24px
. This can be reduced with the 
dense
 prop or removed completely with 
no-gutters
. This is the 2.x replacement for 
v-layout
 in 1.x.
#
v-spacer
v-spacer
 is a basic yet versatile spacing component used to distribute remaining width in-between a parents child components. When placing a single 
v-spacer
 before or after the child components, the components will push to the right and left of its container. When more than one 
v-spacer
‚Äôs are used between multiple components, the remaining width is evenly distributed between each spacer.
#
Helper Classes
The class 
fill-height
 applies 
height: 100%
 to an element. When applied to 
v-container
 it will also set 
align-items: center
.
#
Caveats
Breakpoints based props on grid components work in an 
andUp
 fashion. With this in mind the 
xs
 breakpoint is assumed and has been removed from the props context. This applies to 
offset
, 
justify
, 
align
, and single breakpoint props on 
v-col
Props like 
justify-sm
 and 
justify-md
 exist, but 
justify-xs
 does not, it is simply 
justify
The 
xs
 prop does not exist on 
v-col
. The equivalent to this is the 
cols
 prop
#
Examples
#
Props
#
Align
Change the vertical alignment of flex items and their parents using the 
align
 and 
align-self
 properties.
 .align-start 
 .align-start 
 .align-start 
 .align-center 
 .align-center 
 .align-center 
 .align-end 
 .align-end 
 .align-end 
 .align-self-start 
 .align-self-center 
 .align-self-end 
#
Breakpoint sizing
Columns will automatically take up an equal amount of space within their parent container. This can be modified using the 
cols
 prop. You can also utilize the 
sm
, 
md
, 
lg
, and 
xl
 props to further define how the column will be sized in different viewport sizes.
 .v-col-auto 
 .v-col-auto 
 .v-col-auto 
 .v-col-auto 
 .v-col-auto 
 .v-col-2 
 .v-col-auto 
#
Justify
Change the horizontal alignment of flex items using the 
justify
 property.
 .justify-start 
 .justify-start 
 .justify-center 
 .justify-center 
 .justify-end 
 .justify-end 
 .justify-space-around 
 .justify-space-around 
 .justify-space-between 
 .justify-space-between 
#
No gutters
You can remove the negative margins from 
v-row
 and the padding from its direct 
v-col
 children using the 
no-gutters
 property.
 .v-col-12 
 .v-col-6 
#
Offset
Offsets are useful for compensating for elements that may not be visible yet, or to control the position of content. Just as with breakpoints, you can set an offset for any available sizes. This allows you to fine tune your application layout precisely to your needs.
 .v-col-4 
 .v-col-4 .offset-4 
 .v-col-3 .offset-3 
 .v-col-3 .offset-3 
 .v-col-6 .offset-3 
#
Offset breakpoint
Offset can also be applied on a per breakpoint basis.
 .v-col-sm-5 .v-col-md-6 
 .v-col-sm-5 .offset-sm-2 .v-col-md-6 .offset-md-0 
 sm-6 md-5 lg-6 
 .v-col-sm-6 md-5 .offset-md-2 .v-col-lg-6 .offset-lg-0 
#
Order
You can control the ordering of grid items. As with offsets, you can set different orders for different sizes. Design specialized screen layouts that accommodate to any application.
 First in markup, but middle in row 
 Second in markup, but last in row 
 Third in markup, but first in row 
#
Order first and last
You can also designate explicitly 
first
 or 
last
 which will assign 
-1
 or 
13
 values respectively to the 
order
 CSS property.
 First, but last 
 Second, but unordered 
 Third, but first 
#
Misc
#
Column wrapping
When more than 12 columns are placed within a given row (that is not using the 
.flex-nowrap
 utility class), each group of extra columns will wrap onto a new line.
In the example below, the first and second 
v-col
 components are a total of 13 columns wide, which means the second 
v-col
 gets wrapped to a new line.
 .v-col-9 
 .v-col-4 
 .v-col-6 
#
Equal width columns
You can break equal width columns into multiple lines using 
v-responsive
.
 .v-col-auto 
 .v-col-auto 
 .v-col-auto 
 .v-col-auto 
#
Grow and Shrink
By default, flex components will automatically fill the available space in a row or column. They will also shrink relative to the rest of the flex items in the flex container when a specific size is not designated. You can define the column width of the 
v-col
 by using the 
cols
 prop and providing a value from 
1 to 12
.
 .v-col-auto 
 .v-col-auto 
 .v-col-auto 
 .v-col-auto 
 .v-col-8 
 .v-col-4 
#
Margin helpers
Using the 
auto margin helper utilities
 you can force sibling columns away from each other.
 .v-col-md-4 
 .v-col-md-4 .ms-auto 
 .v-col-md-4 .ms-md-auto 
 .v-col-md-4 .ms-md-auto 
 .v-col-auto .me-auto 
 .v-col-auto 
#
Nested grid
Grids can be nested, similar to other frameworks, in order to achieve very custom layouts.
 Level 1: .v-col-8 
 Level 2: .v-col-8 
 Level 2: .v-col-4 
 Level 1: .v-col-4 
#
One column width
When using the auto-layout, you can define the width of only one column and still have its siblings to automatically resize around it.
 .v-col-auto 
 .v-col-6 
 .v-col-auto 
 .v-col-auto 
 .v-col-2 
 .v-col-auto 
#
Row and column breakpoints
Dynamically change your layout based upon resolution. Resize your screen and watch the row layout change on sm, md, and lg breakpoints.
 .v-col-9
 .v-col-3
#
Spacers
The 
v-spacer
 component is useful when you want to fill available space or make space between two components.
 .v-col-auto 
 .v-col-auto 
 .v-col-auto 
 .v-col-auto 
 .v-col-auto 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Flex
Styles
Display & Platform
Features
Display
Styles
Virtual scrollers
Button toggles
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/button-groups/#usage:














Button toggle component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Divided
Variant
Mandatory
Multiple
Rounded
Misc
WYSIWYG
Sponsors
Support
#
Button toggles
The 
v-btn-toggle
 component is a simple wrapper for 
v-item-group
 built specifically to work with 
v-btn
.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Toggle buttons allow you to create a styled group of buttons that can be selected or toggled under a single 
v-model
.
Exclusive
Multiple
No Options Selected
Mandatory
Text Options
 Left 
 Center 
 Right 
 Justify 
Text & Icon Options
Left
Center
Right
Justify
ads via vuetify
#
API
Component
Description
v-btn-toggle
Primary component
v-btn
Sub-component used for modifying the 
v-btn-toggle
 state
v-btn-group
A stateless version of 
v-btn-toggle
Toggle Inline API
#
Examples
#
Props
#
Divided
You can add a visual divider between buttons with the 
divided
 prop.
#
Variant
You can switch the button variant by using 
variant
 prop on 
v-btn-toggle
.
Default
Text
Plain
Outlined
#
Mandatory
A 
v-btn-toggle
 with the 
mandatory
 prop will always have a value.
#
Multiple
A 
v-btn-toggle
 with the 
multiple
 prop will allow a user to select multiple return values as an array.
[]
#
Rounded
You can control the border radius with the 
rounded
 prop.
#
Misc
#
WYSIWYG
Group similar actions and design your own WYSIWYG component.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Icons
Components
Toolbars
Components
Grids
Carousels
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/carousels/#usage:














Carousel component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Custom delimiters
Cycle
Hide controls
Customized arrows
Hide delimiters
Progress
Model
Sponsors
Support
#
Carousels
The 
v-carousel
 component is used to display large numbers of visual content on a rotating timer.
Report a Bug
Open issues
View on GitHub
#
Usage
The 
v-carousel
 component expands upon 
v-window
 by providing additional features targeted at displaying images.
 Default 
Hide delimiters
Show arrows on hover
<
v-carousel
>


<
v-carousel-item


src
=
"
https://cdn.vuetifyjs.com/images/cards/docks.jpg
"


cover


>
</
v-carousel-item
>


<
v-carousel-item


src
=
"
https://cdn.vuetifyjs.com/images/cards/hotel.jpg
"


cover


>
</
v-carousel-item
>


<
v-carousel-item


src
=
"
https://cdn.vuetifyjs.com/images/cards/sunshine.jpg
"


cover


>
</
v-carousel-item
>


</
v-carousel
>
ads via vuetify
#
API
Component
Description
v-carousel
Primary component
v-carousel-item
Sub-component used for displaying the 
v-carousel
 state
Toggle Inline API
#
Examples
#
Props
#
Custom delimiters
Use any available icon as your carousel‚Äôs slide delimiter.
First Slide 
#
Cycle
With the 
cycle
 prop you can have your slides automatically transition to the next available every 6s (default).
First Slide 
#
Hide controls
You can hide the carousel navigation controls with 
:show-arrows="false"
. Or you can make them only appear on hover with 
show-arrows="hover"
.
#
Customized arrows
Arrows can be customized by using 
prev
 and 
next
 slots.
First Slide 
Previous slide
Next slide
#
Hide delimiters
You can hide the bottom controls with 
hide-delimiters
 prop.
#
Progress
You can show a linear progress bar with the 
progress
 prop. It will indicate how far into the cycle the carousel currently is.
First Slide 
#
Model
You can control carousel with 
v-model
.
 0 
 Slide 1
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Parallax
Components
Images
Components
Windows
Components
Button toggles
Chip groups
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/chip-groups/#usage:














Chip group component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Column
Filter results
Mandatory
Multiple
Misc
Product card
Toothbrush card
Reddit style categories
Sponsors
Support
#
Chip groups
The 
v-chip-group
 supercharges the 
v-chip
 component by providing groupable functionality. It is used for creating groups of selections using chips.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Chip groups make it easy for users to select filtering options for more complex implementations. By default 
v-chip-group
 will overflow to the right but can be changed to a 
column
 only mode.
 Default 
Filter
Chip 1
Chip 2
Chip 3
<
v-chip-group
>


<
v-chip
>
Chip 1
</
v-chip
>


<
v-chip
>
Chip 2
</
v-chip
>


<
v-chip
>
Chip 3
</
v-chip
>


</
v-chip-group
>
ads via vuetify
#
API
Component
Description
v-chip-group
Primary component
Toggle Inline API
#
Examples
#
Props
#
Column
Chip groups with 
column
 prop can wrap their chips.
Work
Home Improvement
Vacation
Food
Drawers
Shopping
Art
Tech
Creative Writing
#
Filter results
Easily create chip groups that provide additional feedback with the 
filter
 prop. This creates an alternative visual style that communicates to the user that the chip is selected.
Filter results
Choose amenities
Elevator
Washer / Dryer
Fireplace
Wheelchair access
Dogs ok
Cats ok
Choose neighborhoods
Snowy Rock Place
Honeylane Circle
Donna Drive
Elaine Street
Court Street
Kennedy Park
#
Mandatory
Chip groups with 
mandatory
 prop must always have a value selected.
Work
Home Improvement
Vacation
Food
Drawers
Shopping
Art
Tech
Creative Writing
#
Multiple
Chip groups with 
multiple
 prop can have many values selected.
Work
Home Improvement
Vacation
Food
Drawers
Shopping
Art
Tech
Creative Writing
#
Misc
#
Product card
The 
v-chip
 component can have an explicit value used for its model. This gets passed to the 
v-chip-group
 component and is useful for when you don‚Äôt want to use the chips index as their values.
Shirt Blouse
$44.50
 Our blouses are available in 8 colors. You can custom order a built-in arch support for any of the models. 
Select size
04
06
08
10
12
14
Add to Cart
#
Toothbrush card
Chip groups allow the creation of custom interfaces that perform the same actions as an item group or radio controls, but are stylistically different.
Toothbrush
$4.99
 Our company takes pride in making handmade brushes. Our toothbrushes are available in 4 different bristel types, from extra soft to hard. 
Select type
Extra Soft
Soft
Medium
Hard
Add to Cart
#
Reddit style categories
Use a combination of utility classes and emojis to create a Reddit-style category selection.
<
template
>


<
v-sheet


class
=
"
mx-auto
"


max-width
=
"
400
"


rounded
=
"
xl
"


border


>


<
div
 
class
=
"
pa-4
"
>


<
div
 
class
=
"
text-h6
"
>
What are you into?
</
div
>


<
div
 
class
=
"
text-subtitle-1
"
>
Select topics to continue
</
div
>


<
v-responsive
 
class
=
"
overflow-y-auto
"
 
max-height
=
"
280
"
>


<
v-chip-group
 
class
=
"
mt-3
"
 
column
>


<
v-chip


v-for
=
"
topic in topics
"


:key
=
"
topic
"


:text
=
"
topic
"


:value
=
"
topic
"


>
</
v-chip
>


</
v-chip-group
>


</
v-responsive
>


</
div
>


<
v-divider
>
</
v-divider
>


<
div
 
class
=
"
pa-2
"
>


<
v-btn


color
=
"
orange-darken-1
"


rounded
=
"
t-0 b-xl
"


size
=
"
x-large
"


text
=
"
Continue
"


variant
=
"
flat
"


block


>
</
v-btn
>


</
div
>


</
v-sheet
>


</
template
>
What are you into?
Select topics to continue
üé§ Advice
üêï Animals
ü§ñ Anime
üé® Art & Design
üíÑ Beauty
üè¢ Business
üìö Books
üí° Damn That's Interesting
üíÉ Hobbies
üéÆ Gaming
üé• Movies
üéµ Music
üì∫ TV
üåÆ Food
üòÇ Funny
üíñ Health & Lifestyle
üéì School
üì∞ News
üå≤ Nature
üé® Photography
üéè Sports
Continue
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Chips
Components
Slide groups
Components
Item groups
Components
Carousels
Item groups
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/item-groups/#usage:














Item group component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Selected class
Mandatory
Multiple
Misc
Chips
Selection
Sponsors
Support
#
Item groups
The 
v-item-group
 provides the ability to create a group of selectable items out of any component. This is the baseline functionality for components such as 
v-tabs
 and 
v-carousel
.
Report a Bug
Open issues
View on GitHub
#
Usage
The core usage of the 
v-item-group
 is to create groups of anything that should be controlled by a 
model
.
ads via vuetify
#
API
Component
Description
v-item-group
The item group component.
v-item
Sub-component used for modifying the 
v-item-group
 state
Toggle Inline API
#
Examples
#
Props
#
Selected class
The 
selected-class
 prop allows you to designate a CSS class applied to 
selected
 items.
Click Me!
Click Me!
Click Me!
#
Mandatory
mandatory
 item groups must have at least 1 item selected.
Click Me!
Click Me!
Click Me!
#
Multiple
Item groups can have 
multiple
 items selected.
Click Me!
Click Me!
Click Me!
#
Misc
#
Chips
Easily hook up a custom chip group.
Submit a post
Title
Title
Text
Text
Tags
 Tag 1
 Tag 2
 Tag 3
 Tag 4
 Tag 5
 Tag 6
 Tag 7
 Tag 8
 Post 
#
Selection
Icons can be used as toggle buttons when they allow selection, or deselection, of a single choice, such as marking an item as a favorite.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Button toggles
Components
Carousels
Components
Tabs
Components
Chip groups
Slide groups
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/slide-groups/#usage:














Slide group component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Active class
Center active
Custom icons
Mandatory
Multiple
Misc
Pseudo Carousel
Sponsors
Support
#
Slide groups
The 
v-slide-group
 component is used to display pseudo paginated information. It uses 
v-item-group
 at its core and provides a baseline for components such as 
v-tabs
 and 
v-chip-group
.
Report a Bug
Open issues
View on GitHub
#
Usage
Similar to the 
v-window
 component, 
v-slide-group
 lets items to take up as much space as needed, allowing the user to move horizontally through the provided information.
 Options 1
 Options 2
 Options 3
 Options 4
 Options 5
 Options 6
 Options 7
 Options 8
 Options 9
 Options 10
 Options 11
 Options 12
 Options 13
 Options 14
 Options 15
 Options 16
 Options 17
 Options 18
 Options 19
 Options 20
 Options 21
 Options 22
 Options 23
 Options 24
 Options 25
ads via vuetify
#
API
Component
Description
v-slide-group
Primary Component
v-slide-group-item
Sub-component used for modifying the 
v-slide-group
 state
Toggle Inline API
#
Examples
#
Props
#
Active class
active-class
 prop allows you to pass a class to customize the active items.
#
Center active
Using the 
center-active
 prop will make the active item always centered.
#
Custom icons
You can add your custom pagination icons instead of arrows using the 
next-icon
 and 
prev-icon
 props.
#
Mandatory
the 
mandatory
 prop will make the slide group require at least 1 item must be selected.
#
Multiple
You can select multiple items by setting the 
multiple
 prop.
#
Misc
#
Pseudo Carousel
Customize the slide group to creatively display information on sheets. Using the selection, we can display auxillary information easily for the user.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Icons
Components
Carousels
Components
Tabs
Components
Item groups
Steppers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/steppers/#usage:














Stepper component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
Non editable steps
Editable steps
Alternate label
Linear steppers
Optional steps
Items
Mobile
Errors
Dynamic steps
Alternative label with errors
Non linear
Sponsors
Support
#
Steppers
The 
v-stepper
 component displays progress through numbered steps.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
This feature was introduced in 
v3.4.0 (Blackguard)
#
Usage
A stepper can be used for a multitude of scenarios, including shopping carts, record creation and more.
 Default 
1
Step 1
2
Step 2
3
Step 3
Step One
 Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem! 
Previous
Next
Previous text
Previous text
Next text
Next text
Hide actions
Editable
Alt labels
<
v-stepper
 
:items
=
"
['Step 1', 'Step 2', 'Step 3']
"
>


<
template
 
v-slot:
item.1
>


<
v-card
 
title
=
"
Step One
"
 
flat
>
...
</
v-card
>


</
template
>


<
template
 
v-slot:
item.2
>


<
v-card
 
title
=
"
Step Two
"
 
flat
>
...
</
v-card
>


</
template
>


<
template
 
v-slot:
item.3
>


<
v-card
 
title
=
"
Step Three
"
 
flat
>
...
</
v-card
>


</
template
>


</
v-stepper
>
ads via vuetify
Due to the massive differences in display and functionality between horizontal and vertical steppers, the 
vertical
 property is moving to a new component 
v-stepper-vertical
.
#
API
Component
Description
v-stepper
Primary Component
v-stepper-actions
Actions for stepper
v-stepper-header
Container for stepper items
v-stepper-item
Primary Component
v-stepper-window
Window container for stepper window items
v-stepper-window-item
Items for stepper window
Toggle Inline API
#
Anatomy
The recommended placement of elements inside of 
v-stepper
 is:
Place 
v-stepper-header
 on top
Place 
v-stepper-window
 or other forms of content below the stepper header
Place 
v-stepper-actions
 after the stepper window
Stepper Anatomy
Element / Area
Description
1. Container
The Stepper container holds all 
v-stepper
 components and is composed of 3 major parts: 
v-stepper-header
, 
v-stepper-window
, and 
v-stepper-actions
.
2. Header
The header is the container for the 
v-stepper-item
 components.
3. Window
The window is the container for the 
v-stepper-window-item
 components.
4. Actions (optional)
A content area that typically contains one or more 
v-btn
 components
#
Guide
The 
v-stepper
 component provides a linear progression process for gathering and displaying information to a user, similar to a form wizard.
#
Props
The 
v-stepper
 component has multiple props to customize its visual appearance and functionality.
#
Non editable steps
A basic stepper has non-editable steps that force a user to move linearly through your process.
Select campaign settings
2
Create an ad group
3
Create an ad
#
Editable steps
An editable step can be selected by a user at any point and will navigate them to that step.
Select campaign settings
Create an ad group
3
Create an ad
#
Alternate label
Steppers also have an alternative label style which places the title under the step itself.
1
Ad unit details
2
Ad sizes
3
Ad templates
#
Linear steppers
Linear steppers will always move a user through your defined path.
1
Select campaign settings
2
Create an ad group
3
Create an ad
Select campaign settings
2
Create an ad group
3
Create an ad
Select campaign settings
Create an ad group
3
Create an ad
#
Optional steps
An optional step can be called out with sub-text.
1
Select campaign settings
2
Create an ad group
Optional
3
Create an ad
Select campaign settings
2
Create an ad group
Optional
3
Create an ad
#
Items
The stepper component accepts an array of items similar to other components such as 
v-list
 and 
v-select
.
1
Review Order
2
Select Shipping
3
Submit
Order
Description
Quantity
Price
Product 1
2
20
Product 2
10
150
Total
 $170
Previous
Next
If no value is provided, the stepper will assign a value based off of its index + 1
#
Mobile
Use the 
mobile
 prop to hide the title and subtitle of the 
v-stepper-item
 component.
1
Step 1
Step 1 subtitle
2
Step 2
Step 2 subtitle
3
Step 3
Step 3 subtitle
4
Step 4
Step 4 subtitle
5
Step 5
Step 5 subtitle
6
Step 6
Step 6 subtitle
7
Step 7
Step 7 subtitle
8
Step 8
Step 8 subtitle
9
Step 9
Step 9 subtitle
10
Step 10
Step 10 subtitle
#
Errors
An error state can be displayed to notify the user of some action that must be taken.
Job Search
Submit Application
Missing Details
3
Interview Process
4
Hiring Decision
#
Dynamic steps
Steppers can have their steps dynamically added or removed. If a currently active step is removed, be sure to account for this by changing the applied model.
# of steps
# of steps
2
2
Previous
Next
#
Alternative label with errors
The error state can also be applied to the alternative label style.
 Ad type 
 Ad style 
 Custom channels 
 Alert message 
46
 Get code 
#
Non linear
Non-linear steppers allow the user to move through your process in whatever way they choose.
 Select campaign settings 
2
 Create an ad group 
3
 Create an ad 
 Select campaign settings 
2
 Create an ad group 
 Create an ad 
 Select campaign settings 
 Create an ad group 
 Create an ad 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Tabs
Components
Item groups
Components
Windows
Components
Slide groups
Windows
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/windows/#usage:














Window component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Show arrows
Reverse
Direction
Customized arrows
Misc
Account creation
Onboarding
Sponsors
Support
#
Windows
The 
v-window
 component provides the baseline functionality for transitioning content from one pane to another. Other components such as 
v-tabs
, 
v-carousel
 and 
v-stepper
 utilize this component at their core.
Report a Bug
Open issues
View on GitHub
#
Usage
Designed to easily cycle through content, 
v-window
 provides a simple interface to create custom implementations.
Card 1
ads via vuetify
#
API
Component
Description
v-window
Primary Component
v-window-item
Sub-component used to display a single window item
Toggle Inline API
#
Examples
#
Props
#
Show arrows
By default no arrows are displayed. You can change this by adding the 
show-arrows
 prop. If you set the prop value to 
"hover"
, they will only show when you mouse over the window.
 Slide 1
#
Reverse
The 
reverse
 prop will reverse the transitions
 Slide 1
#
Direction
You can change the transition to vertical using the 
direction
 prop
 Slide 1
#
Customized arrows
Arrows can be customized by using 
prev
 and 
next
 slots.
 Slide 1
 Next slide 
#
Misc
#
Account creation
Create rich forms with smooth animations. 
v-window
 automatically tracks the current selection index to change the transition direction.
Sign-up
1
Email
Email
 This is the email you will use to login to your Vuetify account 
 Next 
#
Onboarding
v-window
 makes it easy to create custom components such as a differently styled stepper.
 Card 1
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Carousels
Components
Sheets
Components
Tabs
Components
Steppers
Alerts
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/alerts/#usage:














Alert component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
Content
Type
Type reference
Color and icon
Density
Variants
Closable
Additional Examples
Border color
Icon
Outlined
Accessibility
Sponsors
Support
#
Alerts
The 
v-alert
 component is used to convey important information to the user through the use of contextual types, icons, and colors.
Figma Design
Report a Bug
Open issues
View on GitHub
#
Usage
An alert is a 
v-sheet
 that specializes in getting the user‚Äôs attention. While similar to 
v-banner
 in functionality, 
v-alert
 is typically inline with content and used multiple times throughout an application.
 Default 
Outlined
Tonal
 Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem! 
Type
Type
Show title
Closable
Custom icon
<
v-alert
 
text
=
"
...
"
>
</
v-alert
>
ads via vuetify
#
API
Component
Description
v-alert
Primary Component
v-alert-title
Sub-component used to display the 
v-alert
 title. Wraps the 
#title
 slot
#
Anatomy
The recommended placement of elements inside of 
v-alert
 is:
Place a 
v-icon
 on the far left
Place 
v-alert-title
 to the right of the contextual icon
Place textual content below the title
Place closing actions to the far right
Element / Area
Description
1. Container
The Alert container holds all 
v-alert
 components
2. Icon
An icon that correlates to the contextual state of the alert; 
success, info, warning, error
3. Title
A heading with increased font-size
4. Text
A content area for displaying text and other inline elements
5. Close Icon (optional)
Used to hide the 
v-alert
 component
Toggle Inline API
#
Guide
The 
v-alert
 component is a callout element designed to attract the attention of a user. Unlike 
v-banner
, the 
v-alert
 component is intended to be used and re-used throughout your application. An alert‚Äôs color is derived from its 
type
 property which corresponds to your application‚Äôs contextual 
theme colors
 and 
iconfont aliases
.
#
Props
In addition to the standard 
v-sheet
 properties such as elevation, dimension, and border-radius, the 
v-alert
 component supports 
v-model
, 
variants
, and 
density
.
#
Content
The 
v-alert
 component supports simple content using the 
title
 and 
text
 props. This approach is best for strings that do not need custom styling.
The following code snippet is an example of a basic 
v-alert
 component only containing text:
<
v-alert
 
text
=
"
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus...
"
>
</
v-alert
>


Adding a title is as easy as defining its value. The next example adds a string title to accompany the content text:
Alert title
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
Notice how the alert does not have a color or icon. This is defined using the 
type
 property.
#
Type
Alerts have 4 contextual states: 
success
, 
info
, 
warning
, and 
error
. Each state has a default 
color
 and 
icon
 associated with it. When a 
type
 is not provided, the 
v-alert
 component defaults to a greyish background.
With a basic alert rendered, add your choice of contextual type. The following example puts the 
v-alert
 component in a success state:
Alert title
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
#
Type reference
Type
Color
Icon alias
Icon
Success
success
$success
Info
info
$info
Warning
warning
$warning
Error
error
$error
#
Color and icon
The 
type
 property acts as a shorthand for a 
color
 and 
icon
 combination, you can use both props individually to achieve the same effect. The following example produces the same result as using 
type=‚Äúsuccess‚Äù
 by defining a custom color and using the icon lookup table to get the globally defined success icon:
<
v-alert

  
color
=
"
success
"

  
icon
=
"
$success
"

  
title
=
"
Alert title
"

  
text
=
"
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus...
"


>
</
v-alert
>


#
Density
The 
v-alert
 component has the ability to reduce its height in intervals using the density prop. This is useful when you need to reduce the vertical space a component needs. The following example reduces the vertical space by using 
density=‚Äúcompact‚Äù
:
Alert title
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
The 
density
 prop supports 3 levels of component height; 
default
, 
comfortable
, and 
compact
.
#
Variants
The 
v-alert
 has 6 style variants, 
elevated
, 
flat
, 
tonal
, 
outlined
, 
text
, and 
plain
. By default, the 
v-alert
 component is 
flat
; which means that it has a solid background and no box-shadow (elevation). The following example modifies the overall styling of the alert with a custom variant:
Alert title
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
#
Closable
The 
closable
 prop adds a 
v-icon
 on the far right, after the main content. This control hides the 
v-alert
 when clicked, setting it‚Äôs internal model to 
false
. Manually control the visibility of the alert by binding 
v-model
 or using 
model-value
. The following example uses a dynamic model that shows and hides the 
v-alert
 component:
Closable Alert
 Aenean imperdiet. Quisque id odio. Cras dapibus. Pellentesque ut neque. Cras dapibus. Vivamus consectetuer hendrerit lacus. Sed mollis, eros et ultrices tempus, mauris ipsum aliquam libero, non adipiscing dolor urna a orci. Sed mollis, eros et ultrices tempus, mauris ipsum aliquam libero, non adipiscing dolor urna a orci. Curabitur blandit mollis lacus. Curabitur ligula sapien, tincidunt non, euismod vitae, posuere imperdiet, leo. 
The close icon automatically applies a default 
aria-label
 and is configurable by using the 
close-label
 prop or changing 
close
 value in your locale.
For more information on how to global modify your locale settings, navigate to the 
Internationalization page
.
#
Additional Examples
The following is a collection of 
v-alert
 examples that demonstrate how different the properties work in an application.
#
Border color
The 
border-color
 prop removes the alert background in order to accent the 
border
 prop. If a 
type
 is set, it will use the type‚Äôs default color. If no 
color
 or 
type
 is set, the color will default to the inverted color of the applied theme (black for light and white/gray for dark).
 Aliquam eu nunc. Fusce commodo aliquam arcu. In consectetuer turpis ut velit. Nulla facilisi.. Morbi mollis tellus ac sapien. Fusce vel dui. Praesent ut ligula non mi varius sagittis. Vivamus consectetuer hendrerit lacus. Suspendisse enim turpis, dictum sed, iaculis a, condimentum nec, nisi. 
 Vestibulum ullamcorper mauris at ligula. Nam pretium turpis et arcu. Ut varius tincidunt libero. Curabitur ligula sapien, tincidunt non, euismod vitae, posuere imperdiet, leo. Morbi nec metus. 
 Sed in libero ut nibh placerat accumsan. Phasellus leo dolor, tempus non, auctor et, hendrerit quis, nisi. Phasellus leo dolor, tempus non, auctor et, hendrerit quis, nisi. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero. Donec elit libero, sodales nec, volutpat a, suscipit non, turpis. 
 Fusce commodo aliquam arcu. Pellentesque posuere. Phasellus tempus. Donec posuere vulputate arcu. 
#
Icon
The 
icon
 prop allows you to add an icon to the beginning of the alert component. If a 
type
 is provided, this will override the default type icon. Additionally, setting the 
icon
 prop to 
false
 will remove the icon altogether.
 Suspendisse enim turpis, dictum sed, iaculis a, condimentum nec, nisi. Vivamus quis mi. Quisque ut nisi. Maecenas malesuada. 
 Phasellus blandit leo ut odio. Morbi mattis ullamcorper velit. Donec orci lectus, aliquam ut, faucibus non, euismod id, nulla. In ut quam vitae odio lacinia tincidunt. 
 Praesent congue erat at massa. Nullam vel sem. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Proin viverra, ligula sit amet ultrices semper, ligula arcu tristique sapien, a accumsan nisi mauris ac eros. Curabitur at lacus ac velit ornare lobortis. 
#
Outlined
The 
outlined
 prop inverts the style of an alert, inheriting the currently applied 
color
, applying it to the text and border, and making its background transparent.
 Outlined Alert 
 Maecenas ullamcorper, dui et placerat feugiat, eros pede varius nisi, condimentum viverra felis nunc et lorem. Duis vel nibh at velit scelerisque suscipit. Praesent blandit laoreet nibh. Aenean posuere, tortor sed cursus feugiat, nunc augue blandit nunc, eu sollicitudin urna dolor sagittis lacus. Etiam sollicitudin, ipsum eu pulvinar rutrum, tellus ipsum laoreet sapien, quis venenatis ante odio sit amet eros. 
 Praesent venenatis metus at tortor pulvinar varius. Aenean commodo ligula eget dolor. Praesent ac massa at ligula laoreet iaculis. Vestibulum ullamcorper mauris at ligula. 
 Duis arcu tortor, suscipit eget, imperdiet nec, imperdiet iaculis, ipsum. Suspendisse non nisl sit amet velit hendrerit rutrum. Nullam vel sem. Pellentesque dapibus hendrerit tortor. 
#
Accessibility
By default, 
v-alert
 components are assigned the 
WAI-ARIA
 role of 
alert
 which denotes that the alert "is a live region with important and usually time-sensitive information." When using the 
closable
 prop, the close icon will receive a corresponding 
aria-label
. This value can be modified by changing either the 
close-label
 prop or globally through customizing the 
Internationalization
‚Äôs default value for the 
close
 property.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Icons
Components
Snackbars
Components
Windows
Badges
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/badges/#usage:














Badge component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Dot
Inline
Content
Sponsors
Support
#
Badges
The 
v-badge
 component superscripts or subscripts an avatar-like icon or text onto content to highlight information to a user or to just draw attention to a specific element. Content within the badge usually contains numbers or icons.
Report a Bug
Open issues
View on GitHub
#
Usage
Badges in their simplest form display to the upper right of the content that it wraps and requires the badge slot.
 Default 
Floating
Inline
Dot
Value
0
<
v-badge
>


<
v-icon
 
icon
=
"
$vuetify
"
 
size
=
"
x-large
"
>
</
v-icon
>


</
v-badge
>
#
API
Component
Description
v-badge
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Dot
The 
dot
 property removes badge‚Äôs content and reduces its overall size. This is useful when you need to draw a user‚Äôs attention subtly.
Application
 News 
 Blog 
 Login 
#
Inline
Inline badges can be placed anywhere with content and can render without a 
default
 slot.
Inbox
6
Sent Mail
Trash
12
Spam
#
Content
For simple text, use the 
content
 property to display a 
value
 on the badge.
9+
2
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Avatars
Components
Icons
Components
Toolbars
Components
Alerts
Banners
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/banners/#usage:














Banner component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Examples
Props
Lines
Sticky
Slots
Actions
Icon
Prepend
Sponsors
Support
#
Banners
The 
v-banner
 component is used as a middle-interrupting message to the user with one to two actions.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Banners come in two variations 
single-line
 and 
multi-line
 (implicit). These can have icons and actions that you can use with your message.
 Default 
One line
Two lines
Three lines
 Lorem ipsum dolor sit amet consectetur adipisicing elit. Aliquam earum, est illo quae fugit voluptatum fuga magni hic maiores ipsa, illum, tenetur accusamus cupiditate? Dolorem ad nisi eveniet officia voluptatibus. 
Color
Color
Avatar
Icon
Actions
<
v-banner
 
text
=
"
...
"
 
:stacked
=
"
false
"
>


<
template
 
v-slot:
actions
>


<
v-btn
>
Click me
</
v-btn
>


</
template
>


</
v-banner
>
ads via vuetify
#
API
Component
Description
v-banner
Primary Component
v-banner-text
Sub-component used to display the 
v-banner
 subtitle. Wraps the 
#text
 slot
v-banner-actions
Sub-component that modifies the default styling of 
v-btn
. Wraps the 
#actions
 slot
Toggle Inline API
#
Anatomy
The recommended placement of elements inside of 
v-banner
 is:
Place a 
v-banner-avatar
 or 
v-banner-icon
 on the far left
Place 
v-banner-text
 to the right of any visual content
Place 
v-banner-actions
 to the far right of textual content, offset bottom
Element / Area
Description
1. Container
The Banner container holds all 
v-banner
 components
2. Avatar / Icon (optional)
Leading media content intended to improve visual context
3. Text
A content area for displaying text and other inline elements
4. Actions (optional)
A content area that typically contains one or more 
v-btn
 components
#
Examples
#
Props
#
Lines
The prop 
lines
 can be used to specify how the displayed text should be handled based on its length.
 Banner with one line of text. 
Action
 Banner with two lines of text. If the text is too long to fit on two lines then an ellipsis will be used to hide the remaining content. So this next line will be hidden. 
Action
 Banner with three lines of text. One or two lines is preferable. Three lines should be considered the absolute maximum length on desktop in order to keep messages short and actionable. 
Action
#
Sticky
You can optionally turn on the 
sticky
 prop to ensure that the content is pinned to the top of the screen.
My Document
Sticky Banner
 We can't save your edits while you are in offline mode. 
 Go Online 
 End of Content 
#
Slots
#
Actions
Banners may have one or two text buttons that don‚Äôt stand out that much.
 No Internet connection 
 Dismiss 
 Retry 
#
Icon
The icon slot allows you to to explicitly control the content and functionality within it.
 Banner with two lines of text. If the text is too long to fit on two lines then an ellipsis will be used to hide the remaining content. So this next line will be hidden. 
Action Button
#
Prepend
The prepend slot allows you to to explicitly control the content and functionality within it. Icons also help to emphasize a banner‚Äôs message.
 Banner with two lines of text. If the text is too long to fit on two lines then an ellipsis will be used to hide the remaining content. So this next line will be hidden. 
Action
Action
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Alerts
Components
Icons
Components
Snackbars
Components
Badges
Empty states
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/empty-states/#usage:














Empty states ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Guide
Props
Content
Media
Actions
Slots
Default
Title
Custom Actions
Examples
Astro dog
Astro cat
Sponsors
Support
#
Empty states
The 
v-empty-state
 component is used to indicate that a list is empty or that no search results were found.
Report a Bug
Open issues
View on GitHub
Design Specification
This feature was introduced in 
v3.6.0
#
Usage
A basic empty state is composed of a title and a description. It can also include an icon and a button.
 Default 
Whoops, 404
Page not found
The page you were looking for does not exist
<
v-empty-state


headline
=
"
Whoops, 404
"


title
=
"
Page not found
"


text
=
"
The page you were looking for does not exist
"


image
=
"
https://vuetifyjs.b-cdn.net/docs/images/logos/v.png
"


>
</
v-empty-state
>
#
API
Component
Description
v-empty-state
Primary Component
Toggle Inline API
#
Guide
The 
v-empty-state
 component is used to indicate that a page or list is empty or that no search results were found. It can be used in a variety of contexts, such as a list of items, a search results page, or a page with no content.
#
Props
The 
v-empty-state
 component has a multitude of props that allow you to customize its appearance and behavior.
#
Content
There are three main properties for configuring text content, 
title
, 
subtitle
, and 
text
.
No Messages Yet
Check back later.
You haven't received any messages yet. When you do, they'll appear here.
#
Media
Add an icon or image to the empty state to help convey its purpose.
We couldn't find a match.
Try adjusting your search terms or filters. Sometimes less specific terms or broader queries can help you find what you're looking for.
#
Actions
Add a button to the empty state to help users take action.
Something Went Wrong
There might be a problem with your connection or our servers. Please check your internet connection or try again later. We appreciate your patience.
Retry Request
#
Slots
The 
v-empty-state
 component has numerous slots that make it easy to customize the default behavior.
Slot
Description
1. Default
The default slot
2. Media
The media slot is for images or icons
3. Title
The main title slot
4. Subtitle
The subtitle slot
5. Text
The text slot
6. Actions
The actions slot
#
Default
The default slot is positioned between 
text
 and 
actions
.
Welcome,
What would you like to do today?
Learn Vuetify
Start with our dedicated feature guides
Create a Playground
Test Vuetify out in our playground
Create a Bin
Create a new bin to store your code
Report a Bug
File a bug report for Vuetify
#
Title
It‚Äôs simple to customize the font-sizing of the title using utility classes.
 All Done For Now! 
 You're all caught up. 
 Great job on completing all your tasks! This might be a good time to relax or consider planning your next set of goals. If you think of something new, just hit the button below to add a new task. 
#
Custom Actions
By default, only 1 action is displayed through configuration. To add more options, utilize the 
actions
 slot.
 Manage your inventory transfers 
 Track and receive your incoming inventory from suppliers 
Learn more
Add transfer
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-empty-state
 component.
#
Astro dog
This example demonstrates how to use the 
v-empty-state
 component to create a fun and engaging empty state.
Drafts
Empty in drafts
Save a draft message and it will show up here
#
Astro cat
This example utilizes components such as 
v-tabs
 and 
v-window
 to create a more complex empty state.
My Library
My Movies
My Tv Shows
Get Started
 Find a great movie, then relax and enjoy with the Movies & TV app. 
Shop Movies
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Icons
Components
Avatars
Components
Banners
Hover
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/hover/#usage:














Hover component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Disabled
Open and close delay
Misc
Hover list
Transition
Sponsors
Support
#
Hover
The 
v-hover
 component provides a simple interface for handling hover states for any component.
Report a Bug
Open issues
View on GitHub
#
Usage
v-hover
 is a renderless component that uses the default slot to provide scoped access to its internal model; as well as mouse event listeners to modify it. To explicitly control the internal state, use the 
model-value
 property.
 Default 
Hover over me
Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem!
<
v-hover
>


<
template
 
v-slot:
default
=
"
{ isHovering, props }
"
>


<
v-card


v-bind
=
"
props
"


:color
=
"
isHovering ? 'primary' : undefined
"


title
=
"
Hover over me
"


text
=
"
...
"


>
</
v-card
>


</
template
>


</
v-hover
>
ads via vuetify
#
API
Component
Description
v-hover
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Disabled
The 
disabled
 prop disables the hover functionality.
 Hover over me! 
#
Open and close delay
Delay 
v-hover
 events by using 
open-delay
 and 
close-delay
 props in combination or separately.
 Open Delay (Mouse enter) 
 Close Delay (Mouse leave) 
#
Misc
#
Hover list
v-hover
 can be used in combination with 
v-for
 to make a single item stand out when the user interacts with the list.
New Releases
It's New Release Friday
Newly released songs.
Rock
Greatest Rock Hits
Lose yourself in rock tunes.
Mellow Moods
Ambient Bass
Chill beats to mellow you out.
#
Transition
Create highly customized components that respond to user interaction.
 For the perfect meal 
 QW cooking utensils 
 Our Vintage kitchen utensils delight any chef.
 Made of bamboo by hand 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Cards
Components
Images
Components
Tooltips
Components
Empty states
Progress circular
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/progress-circular/#usage:














Progress circular component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Color
Indeterminate
Rotate
Size and Width
Slots
Default
Sponsors
Support
#
Progress circular
The 
v-progress-circular
 component is used to convey data circularly to users. It also can be put into an indeterminate state to portray loading.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
In its simplest form, v-progress-circular displays a circular progress bar. Use the value prop to control the progress.
 Default 
Color
Color
Size
32
Width
4
Indeterminate
<
v-progress-circular
 
model-value
=
"
20
"
>
</
v-progress-circular
>
ads via vuetify
#
API
Component
Description
v-progress-circular
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Color
Alternate colors can be applied to 
v-progress-circular
 using the 
color
 prop.
#
Indeterminate
Using the 
indeterminate
 prop, a 
v-progress-circular
 continues to animate indefinitely.
#
Rotate
The 
rotate
 prop gives you the ability to customize the 
v-progress-circular
‚Äôs origin.
20
20
20
20
#
Size and Width
The 
size
 and 
width
 props allow you to easily alter the size and width of the 
v-progress-circular
 component.
#
Slots
#
Default
default
 slot can be used to replace the text inside the loader.
20 % 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Cards
Components
Progress linear
Components
Lists
Components
Hover
Progress linear
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/progress-linear/#usage:














Progress linear component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Buffering
Colors
Indeterminate
Reversed
Rounded
Stream
Striped
Slots
Default
Misc
Determinate
File loader
Toolbar loader
Buffer color and opacity
Sponsors
Support
#
Progress linear
The 
v-progress-linear
 component is used to convey data visually to users. It supports both indeterminate amounts, such as loading or processing, and finite amounts of progress (including separate buffer values).
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
In its simplest form, 
v-progress-linear
 displays a horizontal progress bar. Use the 
value
 prop to control the progress.
 Default 
Color
Color
Height
4
Indeterminate
<
v-progress-linear
 
model-value
=
"
20
"
>
</
v-progress-linear
>
ads via vuetify
#
API
Component
Description
v-progress-linear
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Buffering
The primary value is controlled by 
v-model
, whereas the buffer is controlled by the 
buffer-value
 prop.
#
Colors
You can set the colors of the progress bar using the props 
color
 and 
bg-color
.
#
Indeterminate
Using the 
indeterminate
 prop, 
v-progress-linear
 continuously animates.
#
Reversed
Displays reversed progress. The component also has RTL support, such that a progress bar in right-to-left mode with 
reverse
 prop enabled will display left-to-right.
In specific cases you may want progress to display in left-to-right mode regardless of the application direction (LTR or RTL):
#
Rounded
The 
rounded
 prop is used to apply a border radius to the 
v-progress-linear
 component.
Use the 
rounded-bar
 property to add a border-radius to the inner edges of value bar. By default, the value bar‚Äôs border-radius is equal to the default 
border-radius
 of your application unless a different value is provided by the 
rounded
 prop or SASS variable.
#
Stream
The 
stream
 property works with 
buffer-value
 to convey to the user that there is some action taking place.
#
Striped
This applies a striped background over the value portion of the 
v-progress-linear
. This prop has no effect when using 
indeterminate
.
#
Slots
#
Default
The 
v-progress-linear
 component will be responsive to user input when using 
v-model
. You can use the default slot or bind a local model to display inside of the progress. If you are looking for advanced features on a linear type component, check out 
v-slider
.
20%
33%
#
Misc
#
Determinate
The progress linear component can have a determinate state modified by 
v-model
.
#
File loader
The 
v-progress-linear
 component is good for communicating to the user that they are waiting for a response.
My Files
 Getting your files 
#
Toolbar loader
Using the 
absolute
 prop we are able to position the 
v-progress-linear
 component at the bottom of the 
v-toolbar
. We also use the 
active
 prop which allows us to control the visibility of the progress.
My Recipes
 Start loading 
#
Buffer color and opacity
This feature was introduced in 
v3.6.0 (Nebula)
The buffer color and opacity can be controlled using the 
buffer-color
 and 
buffer-opacity
 props. This enables you to make multi colored progress bars.
3/9
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Cards
Components
Progress circular
Components
Lists
Components
Progress circular
Ratings
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/skeleton-loaders/#usage:














Skeleton loader component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Guide
Props
Type
Loading
Elevation
Boilerplate
Examples
Ice-cream suggestions
SASS Variables
Accessibility
Configuring the aria-label
Sponsors
Support
#
Skeleton loaders
Skeleton loaders provide a simple way to display loading placeholders in your application.
Figma Design
Report a Bug
Open issues
View on GitHub
This feature was introduced in 
v3.4.0 (Blackguard)
#
Usage
The 
v-skeleton-loader
 component provides a user with a visual indicator that content is coming / loading. This is better received than traditional full-screen loaders.
 Default 
Boilerplate
Type
Type
card
Color
Color
Elevation
0
<
v-skeleton-loader
 
type
=
"
card
"
>
</
v-skeleton-loader
>
ads via vuetify
#
API
Component
Description
v-skeleton-loader
Primary Component
Toggle Inline API
#
Anatomy
The 
v-skeleton-loader
 has a default slot that is rendered when the component is not in a loading state.
Element / Area
Description
1. Container
The container is the root element of the component.
#
Guide
The 
v-skeleton-loader
 component can be used in a variety of contexts, including cards, lists, and tables. It can be used to create a placeholder loading state for when content is being fetched from a server or loaded asynchronously.
The following code snippet is an example of a basic 
v-skeleton-loader
 component. When no 
type
 property is provided, the component will default to an 
image
 type.
<
v-skeleton-loader
>
</
v-skeleton-loader
>


#
Props
The 
v-skeleton-loader
 component has a small API mainly used to configure the root and item height.
#
Type
The 
type
 property is used to define the type of skeleton loader. Types can be combined to create more complex skeletons. For example, the 
card
 type is a combination of the 
image
 and 
heading
 types.
The following built-in types are available:
Type
Composition
actions
button@2
article
heading, paragraph
avatar
avatar
button
button
card
image, heading
card-avatar
image, list-item-avatar
chip
chip
date-picker
list-item, heading, divider, date-picker-options, date-picker-days, actions
date-picker-options
text, avatar@2
date-picker-days
avatar@28
divider
divider
heading
heading
image
image
list-item
text
list-item-avatar
avatar, text
list-item-two-line
sentences
list-item-avatar-two-line
avatar, sentences
list-item-three-line
paragraph
list-item-avatar-three-line
avatar, paragraph
ossein
ossein
paragraph
text@3
sentences
text@2
subtitle
text
table
table-heading, table-thead, table-tbody, table-tfoot
table-heading
heading, text
table-thead
heading@6
table-tbody
table-row-divider@6
table-row-divider
table-row, divider
table-row
text@6
table-tfoot
text@2, avatar@2
text
text
#
Loading
A skeleton loader is considered to be in a loading state if one of the following conditions are met:
The default slot is not used
The 
loading
 property is set to 
true
If either condition is met, the skeleton loader returns the type structure in place of the default slot and applies dimensions values; e.g. 
height
, 
width
, 
min-height
, etc. If the condition is not met, the default slot is returned.
 Toggle Loading 
 Using slot 
 Using if 
#
Elevation
The 
elevation
 property makes it easy to match the elevation of the skeleton loader to the content it is replacing.
#
Boilerplate
The 
v-skeleton-loader
 can be used as boilerplate designs when creating mockups. Mix and match various pre-defined options or create your own unique implementations. In this example, we use a custom 
data
 property to apply the same props to multiple 
v-skeleton-loader
‚Äôs at once.
#
Examples
The following are a collection of examples that demonstrate more advanced and real world use of the 
v-skeleton-loader
 component.
#
Ice-cream suggestions
The following example demonstrates how the 
v-skeleton-loader
 component can be used to create a placeholder loading state for when content is being fetched from a server or loaded asynchronously.
 Toggle Loading 
 Homemade Dulce de Leche Ice Cream with Chocolate Chips 
#
SASS Variables
Make fine tuned changes by modifying the 
v-skeleton-loader
 
SASS variables
. This is useful when you want to change the default button height or padding.
 src/settings.scss
@use
 
'vuetify/settings'
 
with
 
(

  
$skeleton-loader-gutter
:
 24px
,

  
$skeleton-loader-button-width
:
 80px
,


)
;


For a list of all available SASS variables, navigate to the 
v-skeleton-loader
 API page.
#
Accessibility
By default, the 
v-skeleton-loader
 component is assigned a 
WAI-ARIA
 role of 
alert
. We augment this role with three aria properties. An 
aria-busy
 value of 
true
 denotes that a widget is missing required owned elements. An 
aria-live
 value of 
polite
 sets the screen reader‚Äôs priority of live regions. And finally, 
aria-label
, which is used to provide a human readable description of the element.
#
Configuring the aria-label
Configure the default text used in the 
v-skeleton-loader
 component in the locale options. The following example demonstrates how to update the 
loading-text
 property:
 src/plugins/vuetify.js
import
 
{
 createVuetify 
}
 
from
 
'vuetify'



export
 
default
 
createVuetify
(
{

  
locale
:
 
{

    
messages
:
 
{

      
loading
:
 
'Loading content...'
,

    
}
,

  
}
,


}
)


Navigate to the 
Internationalization (i18n)
 page for more information on how to configure the locale options.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Cards
Components
Progress circular
Components
Buttons
Components
Ratings
Snackbars
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/snackbars/#usage:














Snackbar component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Multi line
Timeout
Variants
Vertical
Sponsors
Support
#
Snackbars
The 
v-snackbar
 component is used to display a quick message to a user. Snackbars support positioning, removal delay, and callbacks.
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
a 
v-snackbar
 in its simplest form displays a temporary and closable notification to the user.
 Open Snackbar 
ads via vuetify
#
API
Component
Description
v-snackbar
Primary Component
v-btn
Sub-component typically used for actions
Toggle Inline API
#
Examples
#
Props
#
Multi line
The 
multi-line
 property extends the height of the 
v-snackbar
 to give you a little more room for content.
 Open Snackbar 
#
Timeout
The 
timeout
 property lets you customize the delay before the 
v-snackbar
 is hidden.
 Open Snackbar 
#
Variants
Apply different styles to the snackbar using props such as 
text
, 
shaped
, 
outlined
, and more.
open
open
open
open
open
#
Vertical
The 
vertical
 property allows you to stack the content of your 
v-snackbar
.
 Open Snackbar 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Material color palette
Styles
Forms
Components
Skeleton loaders
Timelines
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/timelines/#api:














Timeline component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
API
Examples
Props
Direction
Side
Alignment
Dot color
Icon dots
Size
Truncated line
Line inset
Slots
Icon
Opposite
Misc
Advanced
Sponsors
Support
#
Timelines
The 
v-timeline
 is useful for stylistically displaying chronological information.
Report a Bug
Open issues
View on GitHub
ads via vuetify
#
API
Component
Description
v-timeline
Primary Component
v-timeline-item
Sub-component used to display a single timeline item
Toggle Inline API
#
Examples
#
Props
#
Direction
Switch between a horizontal and vertical timeline in real-time using the 
direction
 prop.
Content title
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
 Opposite content 
Content title
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
 Opposite content 
Content title
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
 Opposite content 
#
Side
Use the 
side
 property to force all items to one side of the timeline.
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae. 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae. 
#
Alignment
By default, 
v-timeline-item
 content is vertically aligned 
center
. The 
align
 prop also supports 
top
 alignment.
Content title
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
 Opposite content 
Content title
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
 Opposite content 
Content title
 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
 Opposite content 
#
Dot color
Colored dots create visual breakpoints that make your timelines easier for users to read.
5pm
New Icon
 Mobile App 
3-4pm
Design Stand Up
 Hangouts 
12pm
Lunch break
9-11am
Finish Home Screen
 Web App 
#
Icon dots
Use icons within the 
v-timeline-item
 dot to provide additional context.
 Lorem Ipsum Dolor 
Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae.
 Button 
 Lorem Ipsum Dolor 
Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae.
 Button 
 Lorem Ipsum Dolor 
Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae.
 Button 
 Lorem Ipsum Dolor 
Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae.
 Button 
#
Size
The 
size
 prop allows you to customize the size of each dot.
 Title 1 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit. 
 Title 2 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit. 
 Title 3 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit. 
 Title 4 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit. 
 Title 5 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit. 
#
Truncated line
Truncate the start, end or both ends of the timeline center line by using the 
truncate-line
 prop.
 Content 
 Opposite 
 Content 
 Opposite 
 Content 
 Opposite 
 Content 
 Opposite 
 Content 
 Opposite 
 Content 
 Opposite 
 Content 
 Opposite 
 Content 
 Opposite 
 Content 
 Opposite 
#
Line inset
Modify the inset of dividing lines by specifying a custom amount using the 
line-inset
 prop.
 Content 
 Opposite 
 Content 
 Opposite 
 Content 
 Opposite 
#
Slots
#
Icon
Insert avatars into dots with use of the 
icon
 slot and 
v-avatar
.
 Lorem ipsum 
Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae.
Tus eu perfecto
#
Opposite
The 
opposite
 slot provides an additional layer of customization within your timelines.
 Lorem ipsum 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae. 
1960
 Lorem ipsum 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae. 
1970
 Lorem ipsum 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae. 
1980
 Lorem ipsum 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae. 
1990
 Lorem ipsum 
 Lorem ipsum dolor sit amet, no nam oblique veritus. Commune scaevola imperdiet nec ut, sed euismod convenire principes at. Est et nobis iisque percipit, an vim zril disputando voluptatibus, vix an salutandi sententiae. 
2000
#
Misc
#
Advanced
Leave a comment...
Leave a comment...
 Post 
JL
TODAY
 This order was archived. 
 15:26 EDT 
 APP 
 Digital Downloads fulfilled 1 item. 
 15:25 EDT 
 Order confirmation email was sent to John Leider (john@google.com). 
 15:25 EDT 
 Resend Email 
 A $15.00 USD payment was processed on PayPal Express Checkout 
 15:25 EDT 
 John Leider placed this order on Online Store (checkout #1937432132572). 
 15:25 EDT 
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Cards
Components
Icons
Components
Grids
Components
Snackbars
Aspect ratios
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/aspect-ratios/#usage:














Aspect ratios ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Sponsors
Support
#
Aspect ratios
The 
v-responsive
 component can be used to fix any section to a specific aspect ratio
Report a Bug
Open issues
View on GitHub
#
Usage
Specify a custom aspect-ratio
 Default 
16 / 9
4 / 3
 Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus! Eaque cupiditate minima, at placeat totam, magni doloremque veniam neque porro libero rerum unde voluptatem! 
Content class
<
v-responsive
 
class
=
"
border pa-4
"
>
</
v-responsive
>
ads via vuetify
#
API
Component
Description
v-responsive
Primary component
Toggle Inline API
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Cards
Components
Sheets
Components
Images
Components
Timelines
Avatars
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/avatars/#usage:














Avatar component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Anatomy
Examples
Props
Size
Tile
Slots
Default
Misc
Advanced usage
Profile Card
Sponsors
Support
#
Avatars
The 
v-avatar
 component is typically used to display circular user profile pictures. This component will allow you to dynamically size and add a border radius of responsive images, icons, and text. When 
rounded
 prop set to 
0
 will display an avatar without border radius.
Figma Design
Report a Bug
Open issues
View on GitHub
#
Usage
Avatars in their simplest form display content within a circular container.
 Default 
Tile
Icon
Image
Size
40
<
v-avatar
 
color
=
"
surface-variant
"
>
</
v-avatar
>
ads via vuetify
#
API
Component
Description
v-avatar
Primary Component
#
Anatomy
The recommended placement of elements inside of 
v-avatar
 is:
Place a 
v-img
 or 
v-icon
 component within the default 
slot
Place textual content within the default 
slot
Element / Area
Description
1. Container
The Avatar container that typically holds a 
v-icon
 or 
v-img
 component
Toggle Inline API
#
Examples
#
Props
#
Size
The 
size
 prop allows you to change the height and width of the avatar.
 32 
 48 
 64 
#
Tile
The 
rounded
 prop can be used to remove the border radius from v-avatar leaving you with a simple square avatar.
#
Slots
#
Default
The 
v-avatar
 default slot allows you to render content such as 
v-icon
 components, images, or text. Mix and match these with other props to create something unique.
CJ
#
Misc
#
Advanced usage
Combining an avatar with other components allows you to build beautiful user interfaces right out of the box.
John Leider
Welcome to Vuetify!
 ‚Äî Thank you for joining our community...
Social
 ¬†(3) 
1 new 
Twitter
Promos
 ¬†(4) 
2 new 
Shop your way
Another example combining avatar with menu.
JD
#
Profile Card
Using the 
rounded
 prop value 
0
, we can create a sleek hard-lined profile card.
Marcus Obrien
Network Engineer
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Badges
Components
Icons
Components
Lists
Components
Aspect ratios
Icons
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/icons/#usage:














Icon component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Color
Misc
Buttons
Font Awesome
Material Design
MDI SVG
Accessibility
Decorative Font Icons
Semantic Font Icons
Decorative SVG Icons
Semantic SVG Icons
Sponsors
Support
#
Icons
The 
v-icon
 component provides a large set of glyphs to provide context to various aspects of your application. For a list of all available icons, visit the official 
Material Design Icons
 page. To use any of these icons simply use the 
mdi-
 prefix followed by the icon name.
Figma Design
Report a Bug
Open issues
View on GitHub
Design Specification
#
Usage
Icons come in two themes (light and dark), and five different sizes (x-small, small, medium (default), large, and x-large).
 Default 
Size
Size
Color
Color
Icon
Icon
<
v-icon
 
icon
=
"
$vuetify
"
>
</
v-icon
>
ads via vuetify
#
API
Component
Description
v-icon
Primary Component
Toggle Inline API
#
Examples
#
Props
#
Color
Using color helpers you can change the color of an icon from the standard dark and light themes.
#
Misc
#
Buttons
Icons can be used inside of buttons to add emphasis to the action.
 Accept 
 Decline 
 Cancel 
 Back 
#
Font Awesome
Font Awesome
 is also supported. Simply use the 
fa-
 prefixed icon name. Please note that you still need to include the Font Awesome icons in your project. For more information on how to install it, please navigate to the 
installation page
Note that this example is using an icon set prefix, because the default icon set in the documentation is 
mdi
. You can read more about using multiple icon sets 
here
#
Material Design
Material Design
 is also supported. For more information on how to install it please 
navigate here
Note that this example is using an icon set prefix, because the default icon set in the documentation is 
mdi
. You can read more about using multiple icon sets 
here
home
event
info
folder_open
widgets
gavel
#
MDI SVG
You can manually import only the icons you use when using the 
@mdi/js
 package. Read more about using them 
here
.
Note that this example is using an icon set prefix, because the default icon set in the documentation is 
mdi
. You can read more about using multiple icon sets 
here
#
Accessibility
Icons can convey all sorts of meaningful information, so it‚Äôs important that they reach the largest amount of people possible. There are two use cases you‚Äôll want to consider:
Decorative Icons
 are only being used for visual or branding reinforcement. If they were removed from the page, users would still understand and be able to use your page.
Semantic Icons
 are ones that you‚Äôre using to convey meaning, rather than just pure decoration. This includes icons without text next to them used as interactive controls ‚Äî buttons, form elements, toggles, etc.
WAI-ARIA Authoring Practices 1.1 notes that 
aria-hidden="false"
 currently 
behaves inconsistently across browsers
.
WIP: Our team will change to the component to not render 
aria-hidden="false"
 when you pass a label prop.
#
Decorative Font Icons
If your icons are purely decorative, you‚Äôll need to manually add an attribute to each of your icons so they‚Äôre accessible.
aria-hidden
(automatically by vuetify)
#
Semantic Font Icons
If your icons have semantic meaning, you need to provide a text alternative inside a (or similar) element. Also include appropriate CSS to visually hide the element while keeping it accessible to assistive technologies.
<
v-icon
 
aria-hidden
=
"
false
"
>

  mdi-account

</
v-icon
>


#
Decorative SVG Icons
If your icons are purely decorative, you‚Äôll need to manually add an attribute to each of your icons so they‚Äôre accessible.
aria-hidden
(automatically by vuetify)
#
Semantic SVG Icons
Apply accessibility attributes to the 
v-icon
 component, such as 
role="img"
, to give it a semantic meaning.
 Component.vue
<
v-icon
 
aria-label
=
"
My Account
"
 
role
=
"
img
"
 
aria-hidden
=
"
false
"
>

  mdiAccount

</
v-icon
>



<
script
 
setup
>


import
 
{
 mdiAccount 
}
 
from
 
"@mdi/js"
;



const
 icons 
=
 
{
 mdiAccount 
}


</
script
>


Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Icon Fonts
Features
Buttons
Components
Cards
Components
Avatars
Images
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/images/#usage:














Image component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Caveats
Examples
Props
Cover
Height
Gradient
Slots
Placeholder
Error
Misc
Future image formats
Grid
Complex Grid Layout
Sponsors
Support
#
Images
The 
v-img
 component is packed with features to support rich media. Combined with the 
vuetify-loader
, you can add dynamic progressive images to provide a better user experience.
Report a Bug
Open issues
View on GitHub
#
Usage
v-img
 component is used to display a responsive image with lazy-load and placeholder.
 Default 
Aspect ratio
Aspect ratio
16/9
Width
300
<
v-img


:width
=
"
300
"


aspect-ratio
=
"
16/9
"


cover


src
=
"
https://cdn.vuetifyjs.com/images/parallax/material.jpg
"


>
</
v-img
>
ads via vuetify
#
API
Component
Description
v-img
Primary Component
Toggle Inline API
#
Caveats
The 
lazy-src
 property has no effect unless either 
height
 or 
aspect-ratio
 are provided. This is because the image container needs a non-zero height in order for the temporary image to be shown.
#
Examples
#
Props
#
Cover
If the provided aspect ratio doesn‚Äôt match that of the actual image, the default behavior is to fill as much space as possible without cropping. To fill the entire available space use the 
cover
 prop.
Default
Cover
#
Height
v-img
 will automatically grow to the size of its 
src
, preserving the correct aspect ratio. You can limit this with the 
height
 and 
max-height
 props.
 height 
 height with cover 
 max-height 
 max-height with cover 
#
Gradient
The 
gradient
 prop can be used to apply a simple gradient overlay to the image. More complex gradients should be written as a class on the content slot instead.
#
Slots
#
Placeholder
v-img
 has a special 
placeholder
 slot for placeholder to display while image‚Äôs loading. Note: the example below has bad src which won‚Äôt load for you to see placeholder.
#
Error
v-img
 has an 
error
 slot that can be used to display alternative content if an error occurs while loading your source image. A common use for this slot is to load a fallback image if your original image is not available.
#
Misc
#
Future image formats
By default 
v-img
 will render a basic 
<img>
 element. If you want to use 
.webp
 images with a fallback for older browsers, you can pass a list of 
<source>
 elements to the 
sources
 slot:
<
v-img
 
src
=
"
image.jpeg
"
>

  
<
template
 
#sources
>

    
<
source
 
srcset
=
"
image.webp
"
>

  
</
template
>


</
v-img
>


This will behave similarly to:
<
picture
>

  
<
source
 
srcset
=
"
image.webp
"
>

  
<
img
 
src
=
"
image.jpeg
"
>


</
picture
>


srcset
 and 
media
 attributes can also be used for art direction or alternate sizes, see 
MDN
 for more.
#
Grid
You can use 
v-img
 to make, for example, a picture gallery.
#
Complex Grid Layout
Build a more complex picture gallery layout using 
flex-box
 classes.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Grids
Components
Aspect ratios
Components
Parallax
Components
Icons
Parallax
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/parallax/#usage:














Parallax component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Misc
Content
Custom height
Sponsors
Support
#
Parallax
The 
v-parallax
 component creates a 3d effect that makes an image appear to scroll slower than the window.
Report a Bug
Open issues
View on GitHub
#
Usage
A parallax causes a shift in a background image when the user scrolls the page.
ads via vuetify
#
API
Component
Description
v-parallax
Primary Component
Toggle Inline API
#
Examples
#
Misc
#
Content
You can also place any content inside of the parallax. This allows you to use the parallax as a hero image.
 Vuetify 
 Build your application today! 
#
Custom height
You can specify a custom height on a parallax. Keep in mind this can break the parallax if your image is not sized properly
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Aspect ratios
Components
Cards
Components
Images
Components
Images
Color pickers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/color-pickers/#usage:














Color picker component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Props
Customizing the look of the picker
Elevation
Mode
Model
Swatches
Sponsors
Support
#
Color pickers
The 
v-color-picker
 allows you to select a color using a variety of input methods.
Report a Bug
Open issues
View on GitHub
#
Usage
 Default 
Disabled
Show swatches
0.0
1.00000000
R
G
B
A
Hide canvas
Hide inputs
<
v-color-picker
>
</
v-color-picker
>
ads via vuetify
#
API
Component
Description
v-color-picker
Primary component
Toggle Inline API
#
Examples
#
Props
#
Customizing the look of the picker
There are a number of props available to help you customize the component by hiding or showing the various parts of the picker. You can independently hide the canvas, the sliders, and the inputs. You can also show a collection of swatches.
R
G
B
A
120.0
1.00000000
#
Elevation
Adjust the elevation of the 
v-color-picker
 component using the 
elevation
 or 
flat
 prop. The 
flat
 is equivalent to setting 
elevation
 to 0.
0.0
1.00000000
R
G
B
A
0.0
1.00000000
R
G
B
A
#
Mode
You can specify which input modes are available to your users with the 
modes
 prop. If you only set a single mode, then the mode toggle will automatically be hidden. You can also control the current mode with the 
mode
 v-model.
300.0
1.00000000
R
G
B
A
300.0
1.00000000
H
S
L
A
hsla
#
Model
The 
v-color-picker
 uses the 
v-model
 prop to control the color displayed. It supports hex strings such as 
#FF00FF
 and 
#FF00FF00
, and objects representing 
RGBA
, 
HSLA
 and 
HSVA
 values. The component will try to emit the color in the same format that was provided. If the value is null, then the 
v-color-picker
 will default to emitting hex colors.
null
hex
hexa
rgba
hsla
hsva
0.0
1.00000000
R
G
B
A
#
Swatches
Using the 
show-swatches
 prop you can display an array of color swatches that users can pick from. It is also possible to customize what colors are shown using the 
swatches
 prop. This prop accepts a two-dimensional array, where the first dimension defines a column, and second dimension defines the swatches from top to bottom by providing rgba hex strings. You can also set the max height of the swatches section with the 
swatches-max-height
 prop.
0.0
1.00000000
R
G
B
A
0.0
1.00000000
R
G
B
A
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Menus
Components
Material color palette
Styles
Theme
Features
Parallax
Date pickers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/date-pickers/#usage:














Date pickers ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Guide
Props
Elevation
Width
Show sibling months
Colors
Allowed dates
Internationalization
Parsing dates
Sponsors
Support
#
Date pickers
v-date-picker
 is a fully featured date selection component that lets users select a date.
Report a Bug
Open issues
View on GitHub
Design Specification
This feature was introduced in 
v3.4.0 (Blackguard)
#
Usage
Date pickers come in two orientation variations, portrait 
(default)
 and landscape. By default they are emitting 
input
 event when the day (for date picker) or month (for month picker), but with 
reactive
 prop they can update the model even after clicking year/month.
 Default 
Select date
Enter date
November 2024
S
M
T
W
T
F
S
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
Show adjacent months
<
v-date-picker
>
</
v-date-picker
>
ads via vuetify
#
API
Component
Description
v-date-picker
Primary Component
Toggle Inline API
#
Guide
The 
v-date-picker
 component is a stand-alone interface that allows the selection of a date, month and year. This component is built using the 
Date composable
.
All date components support the 
date-io
 abstraction layer for date management. By default they will use a built-in adapter that uses the native Date object, but it is possible to use any of the date-io adapters. See the 
dates
 page for more information.
import
 DayJsAdapter 
from
 
'@date-io/dayjs'



createVuetify
(
{

  
date
:
 
{

    
adapter
:
 DayJsAdapter
,

  
}
,


}
)


#
Props
The 
v-date-picker
 component supports multiple props for configuring dates that can be selected, date formats, translations and more.
#
Elevation
The 
v-date-picker
 component supports elevation up to a maximum value of 24. For more information on elevations, visit the official 
Material Design elevations
 page.
Select date
Enter date
November 2024
S
M
T
W
T
F
S
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#
Width
You can specify the picker‚Äôs width or make it full width.
Select date
Enter date
November 2024
S
M
T
W
T
F
S
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#
Show sibling months
By default days from previous and next months are not visible. They can be displayed using the 
show-adjacent-months
 prop.
Select date
Enter date
November 2024
S
M
T
W
T
F
S
27
28
29
30
31
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
1
2
3
4
5
6
7
#
Colors
Date picker colors can be set using the 
color
 props.
Select date
Enter date
November 2024
S
M
T
W
T
F
S
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#
Allowed dates
Specify allowed dates using objects or functions. When using objects, accepts a date string in the format of YYYY-MM-DD. When using functions, accepts a date object as a parameter and should return a boolean.
Select date
Fri, Mar 2
March 2018
S
M
T
W
T
F
S
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
#
Internationalization
Vuetify components can localize date formats by utilizing the 
i18n
 feature. This determines the appropriate locale for date display. When the default date adapter is in use, localization is managed automatically.
For those not using the default date adapter, you need to create a mapping between the i18n locale string and your chosen date library‚Äôs locale. This can be done in the Vuetify options as shown below:
import
 DateFnsAdapter 
from
 
'@date-io/date-fns'


import
 enUS 
from
 
'date-fns/locale/en-US'


import
 svSE 
from
 
'date-fns/locale/sv'



createVuetify
(
{

  
date
:
 
{

    
adapter
:
 DateFnsAdapter
,

    
locale
:
 
{

      
en
:
 enUS
,

      
sv
:
 svSE
,

    
}
,

  
}
,


}
)


#
Parsing dates
It‚Äôs recommended that you use the 
Date composable
 for parsing and formatting when working with string dates. The following example uses the parseISO function to convert a string date to a Date object.
import
 
{
 useDate 
}
 
from
 
'vuetify'



const
 adapter 
=
 
useDate
(
)


const
 date 
=
 
'2023-11-30'


console
.
log
(
new
 
Date
(
date
)
)
 
// Wed Nov 29 2023 18:00:00 GMT-0600

console
.
log
(
adapter
.
parseISO
(
date
)
)
 
// Thu Nov 30 2023 00:00:00 GMT-0600


Using this function ensures that the date is parsed correctly regardless of the user‚Äôs timezone.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Buttons
Components
Dates
Features
Text fields
Components
Color pickers
Defaults providers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/defaults-providers/#usage:














Defaults provider component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Examples
Defaults
Sponsors
Support
#
Defaults providers
The defaults provider allows you to provide specific default prop values to components in a section of your application
Report a Bug
Open issues
View on GitHub
#
Usage
The 
v-defaults-provider
 component is used to provide default props to components within its scope. It hooks into the 
Global configuration
 feature and makes it easy to assign multiple properties at once or scope out all incoming changes to any children.
 Default 
Button
Use v-btn defaults
<
v-defaults-provider
>


<
v-btn
>
Button
</
v-btn
>


</
v-defaults-provider
>
#
API
Component
Description
v-defaults-provider
Primary Component
Toggle Inline API
#
Examples
#
Defaults
The 
v-defaults-provider
 expects a prop 
defaults
 which looks the same as the 
defaults
 object that you can pass to 
createVuetify
 when creating your application.
Title
Subtitle
Title
Subtitle
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Aliasing
Features
Blueprints
Features
Global configuration
Features
Date pickers
Locale providers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/locale-providers/#api:














Locale provider component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
API
Examples
Locale
Sponsors
Support
#
Locale providers
The locale provider allows you to provide specific default prop values to components in a section of your application
Report a Bug
Open issues
View on GitHub
ads via vuetify
#
API
Component
Description
v-locale-provider
Primary Component
Toggle Inline API
#
Examples
#
Locale
The 
v-locale-provider
 expects a prop 
locale
 which looks the same as the 
locale
 object that you can pass to 
createVuetify
 when creating your application.
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Internationalization (i18n)
Features
Global configuration
Features
Browser support
Getting started
Defaults providers
Theme providers
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/theme-providers/#api:














Theme provider component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
API
Examples
Background
Sponsors
Support
#
Theme providers
The theme provider allows you to style a section of your application in a different theme from the default
Report a Bug
Open issues
View on GitHub
ads via vuetify
#
API
Component
Description
v-theme-provider
Primary Component
Toggle Inline API
#
Examples
#
Background
By default, 
v-theme-provider
 is a renderless component that allows you to change the applied theme for all of its children. When using the 
with-background
 prop, the 
v-theme-provider
 wraps its children in an element and applies the selected theme‚Äôs background color to it.
Title
Subtitle
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Theme
Features
Material color palette
Styles
Application layout
Features
Locale providers
Lazy
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/lazy/#usage:














Lazy component ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Sponsors
Support
#
Lazy
The 
v-lazy
 component is used to dynamically load components based upon an elements visibility.
Report a Bug
Open issues
View on GitHub
#
Usage
The 
v-lazy
 component by default will not render its contents until it has been intersected. Scroll down and watch the element render as you go past it.
 Default 
 Scroll down 
 The card will appear below: 
<
v-lazy


:min-height
=
"
200
"


:options
=
"
{'threshold':0.5}
"


transition
=
"
fade-transition
"


>


<
div
 
class
=
"
text-center text-body-2 mb-12
"
>

    The card will appear below:
  
</
div
>


<
v-card


class
=
"
mx-auto
"


max-width
=
"
336
"


text
=
"
Phasellus magna. Quisque rutrum. Nunc egestas, augue at pellentesque laoreet.
"


title
=
"
Card title
"


>


<
v-card-actions
 
class
=
"
justify-center
"
>


<
v-btn
 
@click
=
"
reset
"
>
Reset Demo
</
v-btn
>


</
v-card-actions
>


</
v-card
>


</
v-lazy
>
ads via vuetify
#
API
Component
Description
v-lazy
Primary Component
Toggle Inline API
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Badges
Components
Icons
Components
Lists
Components
Theme providers
No SSR
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

Data from https://vuetifyjs.com/en/components/no-ssr/#usage:














No SSR ‚Äî Vuetify










































































Vuetify Snips
Meet Vuetify Snips - Your Ultimate UI Toolkit! With over 450 beautifully crafted UI snippets, your development process just got a whole lot easier and faster.
Documentation settings
Theme
Customize your documentation experience with light and dark themes, as well as a combination of both named.
 Light
 Dark
 System
Dark code blocks
Change all code blocks to use a dark theme.
Vuetify One Themes
Available offline
Install a service worker to cache the entire site locally.
Downloading: 0 / 0
Downloading: 0 / 0
Enable pins
NEW
Bookmark and access vital documentation pages for a more efficient workflow.
Enable Composition API
Determines the script shown in code examples for components.
Enable Inline API
Display API tables inline on documentation pages.
Use / for Search hotkey
This option sets the bound search key to '/' from Cmd/Ctrl+K.
Developer mode
Developer mode enables new features and functionality within the documentation that are still in development.
 Latest release
v3.7.3 
 Documentation Build
24b12d9 
 Latest commit
24b12d9 
Search
Login
10
Introduction 
Why Vuetify? 
Long-term support 
Roadmap 
Sponsors and backers 
Professional support
For Enterprise 
Getting started 
Installation 
Frequently asked questions 
Wireframes 
Unit testing 
Browser support 
Upgrade guide 
Release notes 
Contributing 
Features 
Accessibility (a11y) 
Aliasing 
Application layout 
Blueprints 
Dates 
Display & Platform 
Global configuration 
Icon Fonts 
Internationalization (i18n) 
Programmatic scrolling 
SASS variables 
Theme 
Treeshaking 
Styles and animations 
CSS Reset 
Transitions 
Material color palette 
Utility classes
Borders 
Border radius 
Content 
Cursor 
Display 
Elevation 
Flex 
Float 
Opacity 
Overflow 
Position 
Sizing 
Spacing 
Text and typography 
Components 
All Components 
API Explorer 
Browse Components
Application 
Containment
Bottom sheets 
Buttons 
Cards 
Chips 
Dialogs 
Dividers 
Expansion panels 
Lists 
Menus 
Overlays 
Sheets 
Toolbars 
Tooltips 
Navigation
App bars 
Bottom navigation 
Breadcrumbs 
Floating Action Buttons 
Footers 
Navigation drawers 
Pagination 
Speed Dials 
System bars 
Tabs 
Form inputs & controls
Autocompletes 
Checkboxes 
Combobox 
File inputs 
Forms 
Custom inputs 
OTP Input 
Radio buttons 
Range sliders 
Selects 
Sliders 
Switches 
Text fields 
Textareas 
Data & display
Confirm Edit 
Data iterators 
Data tables 
Introduction 
Guide
Basics 
Data and Display 
Types
Server side tables 
Virtual tables 
Sparklines 
Infinite scrollers 
Tables 
Virtual scrollers 
Grids
Grids 
Selection
Button toggles 
Carousels 
Chip groups 
Item groups 
Slide groups 
Steppers 
Windows 
Feedback
Alerts 
Badges 
Banners 
Empty states 
Hover 
Progress circular 
Progress linear 
Ratings 
Skeleton loaders 
Snackbars 
Timelines 
Images & icons
Aspect ratios 
Avatars 
Icons 
Images 
Parallax 
Pickers
Color pickers 
Date pickers 
Providers
Defaults providers 
Locale providers 
Theme providers 
Miscellaneous
Lazy 
No SSR 
API 
useDate 
useDefaults 
useDisplay 
useGoTo 
useLayout 
useLocale 
useRtl 
useTheme 
v-click-outside 
v-intersect 
v-mutate 
v-resize 
v-ripple 
v-scroll 
v-tooltip 
v-touch 
VAlert 
VAlertTitle 
VApp 
VAppBar 
VAppBarNavIcon 
VAppBarTitle 
VAutocomplete 
VAvatar 
VBadge 
VBanner 
VBannerActions 
VBannerText 
VBottomNavigation 
VBottomSheet 
VBreadcrumbs 
VBreadcrumbsDivider 
VBreadcrumbsItem 
VBtn 
VBtnGroup 
VBtnToggle 
VCalendar 
VCalendarDay 
VCalendarHeader 
VCalendarInterval 
VCalendarIntervalEvent 
VCalendarMonthDay 
VCard 
VCardActions 
VCardItem 
VCardSubtitle 
VCardText 
VCardTitle 
VCarousel 
VCarouselItem 
VCheckbox 
VCheckboxBtn 
VChip 
VChipGroup 
VClassIcon 
VCode 
VCol 
VColorPicker 
VCombobox 
VComponentIcon 
VConfirmEdit 
VContainer 
VCounter 
VDataIterator 
VDataTable 
VDataTableFooter 
VDataTableHeaders 
VDataTableRow 
VDataTableRows 
VDataTableServer 
VDataTableVirtual 
VDateInput 
VDatePicker 
VDatePickerControls 
VDatePickerHeader 
VDatePickerMonth 
VDatePickerMonths 
VDatePickerYears 
VDefaultsProvider 
VDialog 
VDialogBottomTransition 
VDialogTopTransition 
VDialogTransition 
VDivider 
VEmptyState 
VExpandTransition 
VExpandXTransition 
VExpansionPanel 
VExpansionPanels 
VExpansionPanelText 
VExpansionPanelTitle 
VFab 
VFabTransition 
VFadeTransition 
VField 
VFieldLabel 
VFileInput 
VFooter 
VForm 
VHover 
VIcon 
VImg 
VInfiniteScroll 
VInput 
VItem 
VItemGroup 
VKbd 
VLabel 
VLayout 
VLayoutItem 
VLazy 
VLigatureIcon 
VList 
VListGroup 
VListImg 
VListItem 
VListItemAction 
VListItemMedia 
VListItemSubtitle 
VListItemTitle 
VListSubheader 
VLocaleProvider 
VMain 
VMenu 
VMessages 
VNavigationDrawer 
VNoSsr 
VNumberInput 
VOtpInput 
VOverlay 
VPagination 
VParallax 
VPicker 
VPickerTitle 
VProgressCircular 
VProgressLinear 
VPullToRefresh 
VRadio 
VRadioGroup 
VRangeSlider 
VRating 
VResponsive 
VRow 
VScaleTransition 
VScrollXReverseTransition 
VScrollXTransition 
VScrollYReverseTransition 
VScrollYTransition 
VSelect 
VSelectionControl 
VSelectionControlGroup 
VSheet 
VSkeletonLoader 
VSlideGroup 
VSlideGroupItem 
VSlider 
VSlideXReverseTransition 
VSlideXTransition 
VSlideYReverseTransition 
VSlideYTransition 
VSnackbar 
VSnackbarQueue 
VSpacer 
VSparkline 
VSpeedDial 
VStepper 
VStepperActions 
VStepperHeader 
VStepperItem 
VStepperVertical 
VStepperVerticalActions 
VStepperVerticalItem 
VStepperWindow 
VStepperWindowItem 
VSvgIcon 
VSwitch 
VSystemBar 
VTab 
VTable 
VTabs 
VTabsWindow 
VTabsWindowItem 
VTextarea 
VTextField 
VThemeProvider 
VTimeline 
VTimelineItem 
VTimePicker 
VTimePickerClock 
VTimePickerControls 
VToolbar 
VToolbarItems 
VToolbarTitle 
VTooltip 
VTreeview 
VTreeviewGroup 
VTreeviewItem 
VValidation 
VVirtualScroll 
VWindow 
VWindowItem 
Directives 
Click outside 
Intersection observer 
Mutation observer 
Resize 
Ripple 
Scroll 
Tooltip 
Touch 
Labs 
Introduction 
Calendars 
Date inputs 
Number inputs 
Pull To Refresh 
Snackbar Queue 
Steppers Vertical 
Time pickers 
Treeview 
Resources 
Brand Kit 
Jobs 
Made with Vuetify 
Themes 
Guides
Search Engine 
UI Kits 
About 
Code of conduct 
Licensing 
Meet the team 
Security disclosure 
24b12d9
3.7.3
Contents
Usage
API
Sponsors
Support
#
No SSR
The 
v-no-ssr
 component is a simple wrapper that allows a developer to designate what a server-side renderer should not render, but leave to the client.
Report a Bug
Open issues
View on GitHub
#
Usage
The 
v-no-ssr
 component prevents its content from rendering on the server side.
<
template
>

  
<
v-no-ssr
>

    
<!-- Everything inside will only render on the Client -->

    
<
v-sheet
>

      Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias vitae minus, incidunt laboriosam amet doloribus officiis?
    
</
v-sheet
>

  
</
v-no-ssr
>


</
template
>


#
API
Component
Description
v-no-ssr
Primary Component
Toggle Inline API
ads via vuetify
Ready for more?
Continue your learning with related content selected by the 
Team
 or move between pages by using the navigation links below.
Lazy
Edit this page on
GitHub




Guest
10
Notifications
Vuetify Studio
Closed Alpha
Sponsorships
Settings
Sync is paused
Login with GitHub
Login with Discord
Login with Shopify

==================================================

